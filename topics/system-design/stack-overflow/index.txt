1:"$Sreact.fragment"
2:I[10961,["8609","static/chunks/b321d78c-7a062717568e9902.js","9696","static/chunks/26d1fef7-ee766bdebc2771f4.js","6334","static/chunks/6334-d195304efa533649.js","1959","static/chunks/1959-5ce2d9e80376f08d.js","7177","static/chunks/app/layout-25227c6113fa4794.js"],"ThemeProvider"]
3:I[37752,["8609","static/chunks/b321d78c-7a062717568e9902.js","9696","static/chunks/26d1fef7-ee766bdebc2771f4.js","6334","static/chunks/6334-d195304efa533649.js","1959","static/chunks/1959-5ce2d9e80376f08d.js","7177","static/chunks/app/layout-25227c6113fa4794.js"],"AuthProvider"]
4:I[37462,["8609","static/chunks/b321d78c-7a062717568e9902.js","9696","static/chunks/26d1fef7-ee766bdebc2771f4.js","6334","static/chunks/6334-d195304efa533649.js","1959","static/chunks/1959-5ce2d9e80376f08d.js","7177","static/chunks/app/layout-25227c6113fa4794.js"],"default"]
5:I[95079,[],""]
6:I[81019,[],""]
8:I[96590,[],"OutletBoundary"]
a:I[47875,[],"AsyncMetadataOutlet"]
c:I[96590,[],"ViewportBoundary"]
e:I[96590,[],"MetadataBoundary"]
f:"$Sreact.suspense"
11:I[69741,[],""]
:HL["/cracking-interview/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/cracking-interview/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/cracking-interview/_next/static/css/ff78c3bf1dd6c987.css","style"]
:HL["/cracking-interview/_next/static/css/34937f2da1ffdcf9.css","style"]
0:{"P":null,"b":"3ddzafj3y1iV8DPtiYwP4","p":"/cracking-interview","c":["","topics","system-design","stack-overflow",""],"i":false,"f":[[["",{"children":["topics",{"children":[["category","system-design","d"],{"children":[["topicId","stack-overflow","oc"],{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/cracking-interview/_next/static/css/ff78c3bf1dd6c987.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/cracking-interview/_next/static/css/34937f2da1ffdcf9.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_68ab41 __variable_8cef05 antialiased","children":["$","$L2",null,{"children":["$","$L3",null,{"children":[["$","$L4",null,{}],["$","$L5",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]}]}]}]]}],{"children":["topics",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["category","system-design","d"],["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["topicId","stack-overflow","oc"],["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L7",null,["$","$L8",null,{"children":["$L9",["$","$La",null,{"promise":"$@b"}]]}]]}],{},null,false]},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$Lc",null,{"children":"$Ld"}],["$","meta",null,{"name":"next-size-adjust","content":""}]],["$","$Le",null,{"children":["$","div",null,{"hidden":true,"children":["$","$f",null,{"fallback":null,"children":"$L10"}]}]}]]}],false]],"m":"$undefined","G":["$11",[]],"s":false,"S":true}
d:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
9:null
b:{"metadata":[["$","title","0",{"children":"Design Stack Overflow - System Design"}],["$","meta","1",{"name":"description","content":"Learn about Design Stack Overflow with detailed explanations and code solutions."}]],"error":null,"digest":"$undefined"}
10:"$b:metadata"
12:I[72314,["8609","static/chunks/b321d78c-7a062717568e9902.js","9696","static/chunks/26d1fef7-ee766bdebc2771f4.js","3459","static/chunks/b2e9d811-56ea87cd42344413.js","1959","static/chunks/1959-5ce2d9e80376f08d.js","7317","static/chunks/7317-999ff3800f1bd958.js","9165","static/chunks/9165-9113c84c8a01dde3.js","2175","static/chunks/2175-dece1948dd7b5e7b.js","9643","static/chunks/9643-fb2991eb2bf04407.js","7870","static/chunks/7870-e27d15cf7b4d7d3c.js","2717","static/chunks/2717-6c387102824d202d.js","4893","static/chunks/app/topics/%5Bcategory%5D/%5B%5B...topicId%5D%5D/page-3b416c1bcaa633d7.js"],"DocsLayoutSSG"]
13:T1886,Stack Overflow is one of the largest online communities for developers to learn and share their knowledge. The website provides a platform for its users to ask and answer questions, and through membership and active participation, to vote questions and answers up or down. Users can edit questions and answers in a fashion similar to a <MdxLink href="https://en.wikipedia.org/wiki/Wiki">wiki</MdxLink>.

Users of Stack Overflow can earn reputation points and badges. For example, a person is awarded ten reputation points for receiving an “up” vote on an answer and five points for the “up” vote of a question. The can also receive badges for their valued contributions. A higher reputation lets users unlock new privileges like the ability to vote, comment on, and even edit other people’s posts.

---
## System Requirements
We will be designing a system with the following requirements:
1. Any non-member (guest) can search and view questions. However, to add or upvote a question, they have to become a member.
2. Members should be able to post new questions.
3. Members should be able to add an answer to an open question.
4. Members can add comments to any question or answer.
5. A member can upvote a question, answer or comment.
6. Members can flag a question, answer or comment, for serious problems or moderator attention.
7. Any member can add a bounty to their question to draw attention.
8. Members will earn badges for being helpful.
9. Members can vote to close a question; Moderators can close or reopen any question.
10. Members can add tags to their questions. A tag is a word or phrase that describes the topic of the question.
11. Members can vote to delete extremely off-topic or very low-quality questions.
12. Moderators can close a question or undelete an already deleted question.
13. The system should also be able to identify most frequently used tags in the questions.

---
## Use Case Diagrams
We have five main actors in our system:

- **Admin:** Mainly responsible for blocking or unblocking members.
- **Guest:** All guests can search and view questions.
- **Member:** Members can perform all activities that guests can, in addition to which they can add/remove questions, answers, and comments. Members can delete and un-delete their questions, answers or comments.
- **Moderator:** In addition to all the activities that members can perform, moderators can close/delete/undelete any question.
- **System:** Mainly responsible for sending notifications and assigning badges to members.

Here are the top use cases for Stack Overflow:

1. Search questions.
2. Create a new question with bounty and tags.
3. Add/modify answers to questions.
4. Add comments to questions or answers.
5. Moderators can close, delete, and un-delete any question.

<MdxImage 
  src="design/stack-overflow/use-case.svg" 
  alt="Usecase Diagram for Stack Overflow"
/>

---
## Class Diagrams
Here are the main classes of Stack Overflow System:

- **Question:** This class is the central part of our system. It has attributes like Title and Description to define the question. In addition to this, we will track the number of times a question has been viewed or voted on. We should also track the status of a question, as well as closing remarks if the question is closed.
- **Answer:** The most important attributes of any answer will be the text and the view count. In addition to that, we will also track the number of times an answer is voted on or flagged. We should also track if the question owner has accepted an answer.
- **Comment:** Similar to answer, comments will have text, and view, vote, and flag counts. Members can add comments to questions and answers.
- **Tag:** Tags will be identified by their names and will have a field for a description to define them. We will also track daily and weekly frequencies at which tags are associated with questions.
- **Badge:** Similar to tags, badges will have a name and description.
- **Photo:** Questions or answers can have photos.
- **Bounty:** Each member, while asking a question, can place a bounty to draw attention. Bounties will have a total reputation and an expiry date.
- **Account:** We will have four types of accounts in the system, guest, member, admin, and moderator. Guests can search and view questions. Members can ask questions and earn reputation by answering questions and from bounties.
- **Notification:** This class will be responsible for sending notifications to members and assigning badges to members based on their reputations.

<MdxImage 
  src="design/stack-overflow/class-diagram.svg" 
  alt="Class Diagram for Stack Overflow"
/>

<MdxImage 
  src="design/concepts/uml.svg" 
  alt="Uml"
/>

---
## Activity Diagram
**Post a new question:** Any member or moderator can perform this activity. Here are the steps to post a question:

<MdxImage 
  src="design/stack-overflow/activity-post.svg" 
  alt="Activity Diagram for Stack Overflow"
/>

---
## Sequence Diagram
Following is the sequence diagram for creating a new question:

<MdxImage 
  src="design/stack-overflow/sequence-create-question.svg" 
  alt="Sequence Diagram for Stack Overflow"
/>

---
## Code
Here is the high-level definition for the classes described above.

- **Enums and Constants:** Here are the required enums, data types, and constants:

<MdxCodeTabs
  langs={["java", "py"]}
  path="system-design/code/stack-overflow/enums"
/>

- **Account, Member, Admin, and Moderator:** These classes represent different people that interact with our system:

<MdxCodeTabs
  langs={["java", "py"]}
  path="system-design/code/stack-overflow/accounts"
/>

- **Badge, Tag, and Notification:** Members have badges, questions have tags and notifications:

<MdxCodeTabs
  langs={["java", "py"]}
  path="system-design/code/stack-overflow/tag"
/>

- **Photo and Bounty:** Members can put bounties on questions. Answers and Questions can have multiple photos:

<MdxCodeTabs
  langs={["java", "py"]}
  path="system-design/code/stack-overflow/photo-bounty"
/>

- **Question, Comment and Answer:** Members can ask questions, as well as add an answer to any question. All members can add comments to all open questions or answers:

<MdxCodeTabs
  langs={["java", "py"]}
  path="system-design/code/stack-overflow/question"
/>14:T400,// For simplicity, we are not defining getter and setter functions. The reader can
// assume that all class attributes are private and accessed through their respective
// public getter methods and modified only through their public methods function.

public class Account {
  private String id;
  private String password;
  private AccountStatus status;
  private String name;
  private Address address;
  private String email;
  private String phone;
  private int reputation;

  public boolean resetPassword();
}

public class Member {
  private Account account;
  private List<Badge> badges;

  public int getReputation();
  public String getEmail();
  public boolean createQuestion(Question question);
  public boolean createTag(Tag tag);
}

public class Admin extends Member {
  public boolean blockMember(Member member);
  public boolean unblockMember(Member member);
}

public class Moderator extends Member {
  public boolean closeQuestion(Question question);
  public boolean undeleteQuestion(Question question);
}15:T487,# For simplicity, we are not defining getter and setter functions. The reader can
# assume that all class attributes are private and accessed through their respective
# public getter methods and modified only through their public methods function.


class Account:
  def __init__(self, id, password, name, address, email, phone, status=AccountStatus.Active):
    self.__id = id
    self.__password = password
    self.__name = name
    self.__address = address
    self.__email = email
    self.__phone = phone
    self.__status = status
    self.__reputation = 0

  def reset_password(self):
    None


class Member:
  def __init__(self, account):
    self.__account = account
    self.__badges = []

  def get_reputation(self):
    return self.__account.get_reputation()

  def get_email(self):
    return self.__account.get_email()

  def create_question(self, question):
    None

  def create_tag(self, tag):
    None


class Admin(Member):
  def block_member(self, member):
    None

  def unblock_member(self, member):
    None


class Moderator(Member):
  def close_question(self, question):
    None

  def undelete_question(self, question):
    None16:T4fa,public interface Search {
  public static List<Question> search(String query);
}

public class Question implements Search {
  private String title;
  private String description;
  private int viewCount;
  private int voteCount;
  private Date creationTime;
  private Date updateTime;
  private QuestionStatus status;
  private QuestionClosingRemark closingRemark;

  private Member askingMember;
  private Bounty bounty;
  private List<Photo> photos;
  private List<Comment> comments;
  private List<Answer> answers;

  public boolean close();
  public boolean undelete();
  public boolean addComment(Comment comment);
  public boolean addBounty(Bounty bounty);

  public static List<Question> search(String query) {
    // return all questions containing the string query in their title or description.
  }
}

public class Comment {
  private String text;
  private Date creationTime;
  private int flagCount;
  private int voteCount;

  private Member askingMember;

  public boolean incrementVoteCount();
}

public class Answer {
  private String answerText;
  private boolean accepted;
  private int voteCount;
  private int flagCount;
  private Date creationTime;

  private Member creatingMember;
  private List<Photo> photos;

  public boolean incrementVoteCount();
}17:T5d8,from abc import ABC, abstractmethod

class Search(ABC):
  def search(self, query):
    None

import datetime

class Question(Search):
  def __init__(self, title, description, bounty, asking_member):
    self.__title = title
    self.__description = description
    self.__view_count = 0
    self.__vote_count = 0
    self.__creation_time = datetime.datetime.now()
    self.__update_time = datetime.datetime.now()
    self.__status = QuestionStatus.OPEN
    self.__closing_remark = QuestionClosingRemark.DUPLICATE

    self.__bounty = bounty
    self.__asking_member = asking_member
    self.__photos = []
    self.__comments = []
    self.__answers = []

  def close(self):
    None

  def undelete(self):
    None

  def add_comment(self, comment):
    None

  def add_bounty(self, bounty):
    None

  def search(self, query):
    # return all questions containing the string query in their title or description.
    None


class Comment:
  def __init__(self, text, member):
    self.__text = text
    self.__creation_time = datetime.datetime.now()
    self.__flag_count = 0
    self.__vote_count = 0
    self.__asking_member = member

  def increment_vote_count(self):
    None


class Answer:
  def __init__(self, text, member):
    self.__answer_text = text
    self.__accepted = False
    self.__vote_count = 0
    self.__flag_count = 0
    self.__creation_time = datetime.datetime.now()
    self.__creating_member = member
    self.__photos = []

  def increment_vote_count(self):
    None7:["$","$L12",null,{"title":"System Design","description":"Learn to design scalable systems and architectures","category":"system-design","allTopics":[{"id":"library-management","title":"Design a Library Management System","difficulty":"medium","description":"A Library Management System is a software built to handle the primary housekeeping functions of a library. Libraries rely on library management systems to manage asset collections as well as relations…","companies":[],"topics":[]},{"id":"movie-booking","title":"Design a Movie Ticket Booking System","difficulty":"medium","description":"An online movie ticket booking system facilitates the purchasing of movie tickets to its customers. E-ticketing systems allow customers to browse through movies currently playing and book seats, anywh…","companies":[],"topics":[]},{"id":"online-shopping","title":"Design Amazon - Online Shopping System","difficulty":"medium","description":"<MdxLink href=\"https://amazon.com\">Amazon</MdxLink> is the world's largest online retailer. The company was originally a bookseller but has expanded to sell a wide variety of consumer goods and digita…","companies":[],"topics":[]},{"id":"parking-lot","title":"Design a Parking Lot","difficulty":"medium","description":"A parking lot or car park is a dedicated cleared area that is intended for parking vehicles. In most countries where cars are a major mode of transportation, parking lots are a feature of every city a…","companies":[],"topics":[]},{"id":"stack-overflow","title":"Design Stack Overflow","difficulty":"medium","description":"Stack Overflow is one of the largest online communities for developers to learn and share their knowledge. The website provides a platform for its users to ask and answer questions, and through member…","companies":[],"topics":[]}],"selectedTopic":{"id":"stack-overflow","title":"Design Stack Overflow","difficulty":"medium","description":"System design concepts and patterns","companies":[],"topics":[],"content":"$13","solutions":{"accounts_java":{"language":"java","code":"$14"},"accounts_py":{"language":"py","code":"$15"},"enums_java":{"language":"java","code":"public enum QuestionStatus{\n  OPEN,\n  CLOSED,\n  ON_HOLD,\n  DELETED\n}\n\npublic enum QuestionClosingRemark{\n  DUPLICATE,\n  OFF_TOPIC,\n  TOO_BROAD,\n  NOT_CONSTRUCTIVE,\n  NOT_A_REAL_QUESTION,\n  PRIMARILY_OPINION_BASED\n}\n\npublic enum AccountStatus{\n  ACTIVE,\n  CLOSED,\n  CANCELED,\n  BLACKLISTED,\n  BLOCKED\n}"},"enums_py":{"language":"py","code":"class QuestionStatus(Enum):\n  OPEN, CLOSED, ON_HOLD, DELETED = 1, 2, 3, 4\n\n\nclass QuestionClosingRemark(Enum):\n  DUPLICATE, OFF_TOPIC, TOO_BROAD, NOT_CONSTRUCTIVE, NOT_A_REAL_QUESTION, PRIMARILY_OPINION_BASED = 1, 2, 3, 4, 5, 6\n\n\nclass AccountStatus(Enum):\n  ACTIVE, CLOSED, CANCELED, BLACKLISTED, BLOCKED = 1, 2, 3, 4, 5"},"photo-bounty_java":{"language":"java","code":"public class Photo {\n  private int photoId;\n  private String photoPath;\n  private Date creationDate;\n\n  private Member creatingMember;\n\n  public boolean delete();\n}\n\npublic class Bounty {\n  private int reputation;\n  private Date expiry;\n\n  public boolean modifyReputation(int reputation);\n}"},"photo-bounty_py":{"language":"py","code":"import datetime\n\nclass Photo:\n  def __init__(self, id, path, member):\n    self.__photo_id = id\n    self.__photo_path = path\n    self.__creation_date = datetime.datetime.now()\n    self.__creating_member = member\n\n  def delete(self):\n    None\n\n# import datetime\n\n\nclass Bounty:\n  def __init__(self, reputation, expiry):\n    self.__reputation = reputation\n    self.__expiry = expiry\n\n  def modify_reputation(self, reputation):\n    None"},"question_java":{"language":"java","code":"$16"},"question_py":{"language":"py","code":"$17"},"tag_java":{"language":"java","code":"public class Badge {\n  private String name;\n  private String description;\n}\n\npublic class Tag {\n  private String name;\n  private String description;\n  private long dailyAskedFrequency;\n  private long weeklyAskedFrequency;\n}\n\npublic class Notification {\n  private int notificationId;\n  private Date createdOn;\n  private String content;\n\n  public boolean sendNotification();\n}"},"tag_py":{"language":"py","code":"class Badge:\n  def __init__(self, name, description):\n    self.__name = name\n    self.__description = description\n\n\nclass Tag:\n  def __init__(self, name, description):\n    self.__name = name\n    self.__description = description\n    self.__daily_asked_frequency = 0\n    self.__weekly_asked_frequency = 0\n\n# import datetime\n\n\nclass Notification:\n  def __init__(self, id, content):\n    self.__notification_id = id\n    self.__created_on = datetime.datetime.now()\n    self.__content = content\n\n  def send_notification(self):\n    None"}},"relatedTopics":[]}}]
