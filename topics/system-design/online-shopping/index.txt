1:"$Sreact.fragment"
2:I[10961,["8609","static/chunks/b321d78c-7a062717568e9902.js","9696","static/chunks/26d1fef7-ee766bdebc2771f4.js","6334","static/chunks/6334-d195304efa533649.js","1959","static/chunks/1959-5ce2d9e80376f08d.js","7177","static/chunks/app/layout-25227c6113fa4794.js"],"ThemeProvider"]
3:I[37752,["8609","static/chunks/b321d78c-7a062717568e9902.js","9696","static/chunks/26d1fef7-ee766bdebc2771f4.js","6334","static/chunks/6334-d195304efa533649.js","1959","static/chunks/1959-5ce2d9e80376f08d.js","7177","static/chunks/app/layout-25227c6113fa4794.js"],"AuthProvider"]
4:I[37462,["8609","static/chunks/b321d78c-7a062717568e9902.js","9696","static/chunks/26d1fef7-ee766bdebc2771f4.js","6334","static/chunks/6334-d195304efa533649.js","1959","static/chunks/1959-5ce2d9e80376f08d.js","7177","static/chunks/app/layout-25227c6113fa4794.js"],"default"]
5:I[95079,[],""]
6:I[81019,[],""]
8:I[96590,[],"OutletBoundary"]
a:I[47875,[],"AsyncMetadataOutlet"]
c:I[96590,[],"ViewportBoundary"]
e:I[96590,[],"MetadataBoundary"]
f:"$Sreact.suspense"
11:I[69741,[],""]
:HL["/cracking-interview/_next/static/media/569ce4b8f30dc480-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/cracking-interview/_next/static/media/93f479601ee12b01-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]
:HL["/cracking-interview/_next/static/css/ff78c3bf1dd6c987.css","style"]
:HL["/cracking-interview/_next/static/css/34937f2da1ffdcf9.css","style"]
0:{"P":null,"b":"3ddzafj3y1iV8DPtiYwP4","p":"/cracking-interview","c":["","topics","system-design","online-shopping",""],"i":false,"f":[[["",{"children":["topics",{"children":[["category","system-design","d"],{"children":[["topicId","online-shopping","oc"],{"children":["__PAGE__",{}]}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/cracking-interview/_next/static/css/ff78c3bf1dd6c987.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/cracking-interview/_next/static/css/34937f2da1ffdcf9.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__variable_68ab41 __variable_8cef05 antialiased","children":["$","$L2",null,{"children":["$","$L3",null,{"children":[["$","$L4",null,{}],["$","$L5",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]]}]}]}]}]]}],{"children":["topics",["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["category","system-design","d"],["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["topicId","online-shopping","oc"],["$","$1","c",{"children":[null,["$","$L5",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L7",null,["$","$L8",null,{"children":["$L9",["$","$La",null,{"promise":"$@b"}]]}]]}],{},null,false]},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,[["$","$Lc",null,{"children":"$Ld"}],["$","meta",null,{"name":"next-size-adjust","content":""}]],["$","$Le",null,{"children":["$","div",null,{"hidden":true,"children":["$","$f",null,{"fallback":null,"children":"$L10"}]}]}]]}],false]],"m":"$undefined","G":["$11",[]],"s":false,"S":true}
d:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
9:null
b:{"metadata":[["$","title","0",{"children":"Design Amazon - Online Shopping System - System Design"}],["$","meta","1",{"name":"description","content":"Learn about Design Amazon - Online Shopping System with detailed explanations and code solutions."}]],"error":null,"digest":"$undefined"}
10:"$b:metadata"
12:I[72314,["8609","static/chunks/b321d78c-7a062717568e9902.js","9696","static/chunks/26d1fef7-ee766bdebc2771f4.js","3459","static/chunks/b2e9d811-56ea87cd42344413.js","1959","static/chunks/1959-5ce2d9e80376f08d.js","7317","static/chunks/7317-999ff3800f1bd958.js","9165","static/chunks/9165-9113c84c8a01dde3.js","2175","static/chunks/2175-dece1948dd7b5e7b.js","9643","static/chunks/9643-fb2991eb2bf04407.js","7870","static/chunks/7870-e27d15cf7b4d7d3c.js","2717","static/chunks/2717-6c387102824d202d.js","4893","static/chunks/app/topics/%5Bcategory%5D/%5B%5B...topicId%5D%5D/page-3b416c1bcaa633d7.js"],"DocsLayoutSSG"]
13:T192b,<MdxLink href="https://amazon.com">Amazon</MdxLink> is the world's largest online retailer. The company was originally a bookseller but has expanded to sell a wide variety of consumer goods and digital media. For the sake of this problem, we will focus on their online retail business where users can sell/buy their products.

---
## System Requirements
We will be designing a system with the following requirements:
1. Users should be able to add new products to sell.
2. Users should be able to search for products by their name or category.
3. Users can search and view all the products, but they will have to become a registered member to buy a product.
4. Users should be able to add/remove/modify product items in their shopping cart.
5. Users can check out and buy items in the shopping cart.
6. Users can rate and add a review for a product.
7. The user should be able to specify a shipping address where their order will be delivered.
8. Users can cancel an order if it has not shipped.
9. Users should get notifications whenever there is a change in the order or shipping status.
10. Users should be able to pay through credit cards or electronic bank transfer.
11. Users should be able to track their shipment to see the current state of their order.

---
## Use Case Diagrams
We have four main Actors in our system:

- **Admin:** Mainly responsible for account management and adding or modifying new product categories.
- **Guest:** All guests can search the catalog, add/remove items to the shopping cart, as well as become registered members.
- **Member:** Members can perform all the activities that guests can, in addition to which, they can place orders and add new products to sell.
- **System:** Mainly responsible for sending notifications for orders and shipping updates.

Here are the top use cases of the Online Shopping System:
1. Add/update products; whenever a product is added or modified, we will update the catalog.
2. Search for products by their name or category.
3. Add/remove product items in the shopping cart.
4. Check-out to buy product items in the shopping cart.
5. Make a payment to place an order.
6. Add a new product category.
7. Send notifications to members with shipment updates.

<MdxImage 
  src="design/online-shopping/use-case.svg" 
  alt="Usecase Diagram for Online Shopping"
/>

---
## Class Diagrams
Here are the descriptions of the different classes of our Online Shopping System:

- **Account:** There are two types of registered accounts in the system: one will be an Admin, who is responsible for adding new product categories and blocking/unblocking members; the other, a Member, who can buy/sell products.
- **Guest:** Guests can search for and view products, and add them in the shopping cart. To place an order they have to become a registered member.
- **Catalog:** Users of our system can search for products by their name or category. This class will keep an index of all products for faster search.
- **ProductCategory:** This will encapsulate the different categories of products, such as books, electronics, etc.
- **Product:** This class will encapsulate the entity that the users of our system will be buying and selling. Each Product will belong to a ProductCategory.
- **ProductReview:** Any registered member can add a review about a product.
- **ShoppingCart:** Users will add product items that they intend to buy to the shopping cart.
- **Item:** This class will encapsulate a product item that the users will be buying or placing in the shopping cart. For example, a pen could be a product and if there are 10 pens in the inventory, each of these 10 pens will be considered a product item.
- **Order:** This will encapsulate a buying order to buy everything in the shopping cart.
- **OrderLog:** Will keep a track of the status of orders, such as unshipped, pending, complete, canceled, etc.
- **ShipmentLog:** Will keep a track of the status of shipments, such as pending, shipped, delivered, etc.
- **Notification:** This class will take care of sending notifications to customers.
- **Payment:** This class will encapsulate the payment for an order. Members can pay through credit card or electronic bank transfer.

<MdxImage 
  src="design/online-shopping/class-diagram.png" 
  alt="Class Diagram for Online Shopping"
/>

<MdxImage 
  src="design/concepts/uml.svg" 
  alt="Uml"
/>

---
## Activity Diagram
Following is the activity diagram for a user performing online shopping:

<MdxImage 
  src="design/online-shopping/activity.svg" 
  alt="Activity Diagram for Online Shopping"
/>

---
## Sequence Diagram
1. Here is the sequence diagram for searching from the catalog:

<MdxImage 
  src="design/online-shopping/sequence-searching.svg" 
  alt="Sequence Diagram for Online Shopping"
/>

2. Here is the sequence diagram for adding an item to the shopping cart:

<MdxImage 
  src="design/online-shopping/sequence-adding-items.svg" 
  alt="Sequence Diagram for Online Shopping"
/>

3. Here is the sequence diagram for checking out to place an order:

<MdxImage 
  src="design/online-shopping/sequence-checkout.svg" 
  alt="Sequence Diagram for Online Shopping"
/>

---
## Code
Here is the high-level definition for the classes described above.

- **Enums and Constants:** Here are the required enums, data types, and constants:

<MdxCodeTabs
  langs={["java", "py"]}
  path="system-design/code/online-shopping/enums"
/>

- **Account, Customer, Admin, and Guest:** These classes represent different people that interact with our system:

<MdxCodeTabs
  langs={["java", "py"]}
  path="system-design/code/online-shopping/accounts"
/>

- **ProductCategory, Product, and ProductReview:** Here are the classes related to a product:

<MdxCodeTabs
  langs={["java", "py"]}
  path="system-design/code/online-shopping/product"
/>

- **ShoppingCart, Item, Order, and OrderLog:** Users will add items to the shopping cart and place an order to buy all the items in the cart.

<MdxCodeTabs
  langs={["java", "py"]}
  path="system-design/code/online-shopping/cart"
/>

- **Shipment, ShipmentLog, and Notification:** After successfully placing an order, a shipment record will be created:

<MdxCodeTabs
  langs={["java", "py"]}
  path="system-design/code/online-shopping/shipment"
/>

- **Search interface and Catalog:** Catalog will implement Search to facilitate searching of products.

<MdxCodeTabs
  langs={["java", "py"]}
  path="system-design/code/online-shopping/search"
/>14:T450,// For simplicity, we are not defining getter and setter functions. The reader can
// assume that all class attributes are private and accessed through their respective
// public getter methods and modified only through their public methods function.

public class Account {
  private String userName;
  private String password;
  private AccountStatus status;
  private String name;
  private Address shippingAddress;
  private String email;
  private String phone;

  private List<CreditCard> creditCards;
  private List<ElectronicBankTransfer> bankAccounts;

  public boolean addProduct(Product product);
  public boolean addProductReview(ProductReview review);
  public boolean resetPassword();
}

public abstract class Customer {
  private ShoppingCart cart;
  private Order order;

  public ShoppingCart getShoppingCart();
  public bool addItemToCart(Item item);
  public bool removeItemFromCart(Item item);
}

public class Guest extends Customer {
  public bool registerAccount();
}

public class Member extends Customer {
  private Account account;
  public OrderStatus placeOrder(Order order);
}15:T4ee,# For simplicity, we are not defining getter and setter functions. The reader can
# assume that all class attributes are private and accessed through their respective
# public getter methods and modified only through their public methods function.


class Account:
  def __init__(self, user_name, password, name, email, phone, shipping_address, status=AccountStatus):
    self.__user_name = user_name
    self.__password = password
    self.__name = name
    self.__email = email
    self.__phone = phone
    self.__shipping_address = shipping_address
    self.__status = status.ACTIVE
    self.__credit_cards = []
    self.__bank_accounts = []

  def add_product(self, product):
    None

  def add_productReview(self, review):
    None

  def reset_password(self):
    None


from abc import ABC, abstractmethod

class Customer(ABC):
  def __init__(self, cart, order):
    self.__cart = cart
    self.__order = order

  def get_shopping_cart(self):
    return self.__cart

  def add_item_to_cart(self, item):
    None

  def remove_item_from_cart(self, item):
    None


class Guest(Customer):
  def register_account(self):
    None


class Member(Customer):
  def __init__(self, account):
    self.__account = account

  def place_order(self, order):
    None7:["$","$L12",null,{"title":"System Design","description":"Learn to design scalable systems and architectures","category":"system-design","allTopics":[{"id":"library-management","title":"Design a Library Management System","difficulty":"medium","description":"A Library Management System is a software built to handle the primary housekeeping functions of a library. Libraries rely on library management systems to manage asset collections as well as relations…","companies":[],"topics":[]},{"id":"movie-booking","title":"Design a Movie Ticket Booking System","difficulty":"medium","description":"An online movie ticket booking system facilitates the purchasing of movie tickets to its customers. E-ticketing systems allow customers to browse through movies currently playing and book seats, anywh…","companies":[],"topics":[]},{"id":"online-shopping","title":"Design Amazon - Online Shopping System","difficulty":"medium","description":"<MdxLink href=\"https://amazon.com\">Amazon</MdxLink> is the world's largest online retailer. The company was originally a bookseller but has expanded to sell a wide variety of consumer goods and digita…","companies":[],"topics":[]},{"id":"parking-lot","title":"Design a Parking Lot","difficulty":"medium","description":"A parking lot or car park is a dedicated cleared area that is intended for parking vehicles. In most countries where cars are a major mode of transportation, parking lots are a feature of every city a…","companies":[],"topics":[]},{"id":"stack-overflow","title":"Design Stack Overflow","difficulty":"medium","description":"Stack Overflow is one of the largest online communities for developers to learn and share their knowledge. The website provides a platform for its users to ask and answer questions, and through member…","companies":[],"topics":[]}],"selectedTopic":{"id":"online-shopping","title":"Design Amazon - Online Shopping System","difficulty":"medium","description":"System design concepts and patterns","companies":[],"topics":[],"content":"$13","solutions":{"accounts_java":{"language":"java","code":"$14"},"accounts_py":{"language":"py","code":"$15"},"cart_java":{"language":"java","code":"public class Item {\n  private String productID;\n  private int quantity;\n  private double price;\n\n  public boolean updateQuantity(int quantity);\n}\n\npublic class ShoppingCart {\n  private List<Items> items;\n\n  public boolean addItem(Item item);\n  public boolean removeItem(Item item);\n  public boolean updateItemQuantity(Item item, int quantity);\n  public List<Item> getItems();\n  public boolean checkout();\n}\n\npublic class OrderLog {\n  private String orderNumber;\n  private Date creationDate;\n  private OrderStatus status;\n}\n\npublic class Order {\n  private String orderNumber;\n  private OrderStatus status;\n  private Date orderDate;\n  private List<OrderLog> orderLog;\n\n  public boolean sendForShipment();\n  public boolean makePayment(Payment payment);\n  public boolean addOrderLog(OrderLog orderLog);\n}"},"cart_py":{"language":"py","code":"class Item:\n  def __init__(self, id, quantity, price):\n    self.__product_id = id\n    self.__quantity = quantity\n    self.__price = price\n\n  def update_quantity(self, quantity):\n    None\n\n\nclass ShoppingCart:\n  def __init__(self):\n    self.__items = []\n\n  def add_item(self, item):\n    None\n\n  def remove_item(self, item):\n    None\n\n  def update_item_quantity(self, item, quantity):\n    None\n\n  def get_items(self):\n    return self.__items\n\n  def checkout(self):\n    None\n\n\nclass OrderLog:\n  def __init__(self, order_number, status=OrderStatus.PENDING):\n    self.__order_number = order_number\n    self.__creation_date = datetime.date.today()\n    self.__status = status\n\n\nclass Order:\n  def __init__(self, order_number, status=OrderStatus.PENDING):\n    self.__order_number = 0\n    self.__status = status\n    self.__order_date = datetime.date.today()\n    self.__order_log = []\n\n  def send_for_shipment(self):\n    None\n\n  def make_payment(self, payment):\n    None\n\n  def add_order_log(self, order_log):\n    None"},"enums_java":{"language":"java","code":"public class Address {\n  private String streetAddress;\n  private String city;\n  private String state;\n  private String zipCode;\n  private String country;\n}\n\npublic enum OrderStatus {\n  UNSHIPPED, PENDING, SHIPPED, COMPLETED, CANCELED, REFUND_APPLIED\n}\n\npublic enum AccountStatus {\n  ACTIVE, BLOCKED, BANNED, COMPROMISED, ARCHIVED, UNKNOWN\n}\n\npublic enum ShipmentStatus {\n  PENDING, SHIPPED, DELIVERED, ON_HOLD,\n}\n\npublic enum PaymentStatus {\n  UNPAID, PENDING, COMPLETED, FILLED, DECLINED, CANCELLED, ABANDONED, SETTLING, SETTLED, REFUNDED\n}"},"enums_py":{"language":"py","code":"class Address:\n  def __init__(self, street, city, state, zip_code, country):\n    self.__street_address = street\n    self.__city = city\n    self.__state = state\n    self.__zip_code = zip_code\n    self.__country = country\n\n\nclass OrderStatus(Enum):\n  UNSHIPPED, PENDING, SHIPPED, COMPLETED, CANCELED, REFUND_APPLIED = 1, 2, 3, 4, 5, 6\n\n\nclass AccountStatus(Enum):\n  ACTIVE, BLOCKED, BANNED, COMPROMISED, ARCHIVED, UNKNOWN = 1, 2, 3, 4, 5, 6\n\n\nclass ShipmentStatus(Enum):\n  PENDING, SHIPPED, DELIVERED, ON_HOLD = 1, 2, 3, 4\n\n\nclass PaymentStatus(Enum):\n  UNPAID, PENDING, COMPLETED, FILLED, DECLINED, CANCELLED, ABANDONED, SETTLING, SETTLED, REFUNDED = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10"},"product_java":{"language":"java","code":"public class ProductCategory {\n  private String name;\n  private String description;\n}\n\npublic class ProductReview {\n  private int rating;\n  private String review;\n\n  private Member reviewer;\n}\n\npublic class Product {\n  private String productID;\n  private String name;\n  private String description;\n  private double price;\n  private ProductCategory category;\n  private int availableItemCount;\n\n  private Account seller;\n\n  public int getAvailableCount();\n  public boolean updatePrice(double newPrice);\n}"},"product_py":{"language":"py","code":"class ProductCategory:\n  def __init__(self, name, description):\n    self.__name = name\n    self.__description = description\n\n\nclass ProductReview:\n  def __init__(self, rating, review, reviewer):\n    self.__rating = rating\n    self.__review = review\n    self.__reviewer = reviewer\n\n\nclass Product:\n  def __init__(self, id, name, description, price, category, seller_account):\n    self.__product_id = id\n    self.__name = name\n    self.__description = description\n    self.__price = price\n    self.__category = category\n    self.__available_item_count = 0\n\n    self.__seller = seller_account\n\n  def get_available_count(self):\n    return self.__available_item_count\n\n  def update_price(self, new_price):\n    None"},"search_java":{"language":"java","code":"public interface Search {\n  public List<Product> searchProductsByName(String name);\n  public List<Product> searchProductsByCategory(String category);\n}\n\npublic class Catalog implements Search {\n   HashMap<String, List<Product>> productNames;\n   HashMap<String, List<Product>> productCategories;\n\n  public List<Product> searchProductsByName(String name) {\n    return productNames.get(name);\n  }\n\n  public List<Product> searchProductsByCategory(String category) {\n    return productCategories.get(category);\n  }\n}"},"search_py":{"language":"py","code":"from abc import ABC, abstractmethod\n\nclass Search(ABC):\n  def search_products_by_name(self, name):\n    None\n\n  def search_products_by_category(self, category):\n    None\n\n\nclass Catalog(Search):\n  def __init__(self):\n    self.__product_names = {}\n    self.__product_categories = {}\n\n  def search_products_by_name(self, name):\n    return self.product_names.get(name)\n\n  def search_products_by_category(self, category):\n    return self.product_categories.get(category)"},"shipment_java":{"language":"java","code":"public class ShipmentLog {\n  private String shipmentNumber;\n  private ShipmentStatus status;\n  private Date creationDate;\n}\n\npublic class Shipment {\n  private String shipmentNumber;\n  private Date shipmentDate;\n  private Date estimatedArrival;\n  private String shipmentMethod;\n  private List<ShipmentLog> shipmentLogs;\n\n  public boolean addShipmentLog(ShipmentLog shipmentLog);\n}\n\npublic abstract class Notification {\n  private int notificationId;\n  private Date createdOn;\n  private String content;\n\n  public boolean sendNotification(Account account);\n}"},"shipment_py":{"language":"py","code":"class ShipmentLog:\n  def __init__(self, shipment_number, status=ShipmentStatus.PENDING):\n    self.__shipment_number = shipment_number\n    self.__status = status\n    self.__creation_date = datetime.date.today()\n\n\nclass Shipment:\n  def __init__(self, shipment_numbe, shipment_methodr):\n    self.__shipment_number = shipment_number\n    self.__shipment_date = datetime.date.today()\n    self.__estimated_arrival = datetime.date.today()\n    self.__shipment_method = shipment_method\n    self.__shipmentLogs = []\n\n  def add_shipment_log(self, shipment_log):\n    None\n\n\n# from abc import ABC, abstractmethod\nclass Notification(ABC):\n  def __init__(self, id, content):\n    self.__notification_id = id\n    self.__created_on = datetime.date.today()\n    self.__content = content\n\n  def send_notification(self, account):\n    None"}},"relatedTopics":[]}}]
