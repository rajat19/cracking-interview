{
  "cpp": {
    "language": "cpp",
    "code": "class Solution {\npublic:\n    vector<vector<int>> subsets(vector<int>& nums) {\n        vector<vector<int>> result;\n        vector<int> subset = {};\n        backtrack(nums, result, subset, 0);\n        return result;\n    }\n\n    void backtrack(vector<int>& nums, vector<vector<int>>& result, vector<int>& subset, int pos) {\n        result.push_back(subset);\n        for(int i=pos; i<nums.size(); i++) {\n            subset.push_back(nums[i]);\n            backtrack(nums, result, subset, i+1);\n            subset.pop_back();\n        }\n    }\n};",
    "subPath": "",
    "fileName": "solution.cpp"
  },
  "java": {
    "language": "java",
    "code": "class Solution {\n    public List<List<Integer>> subsets(int[] nums) {\n        List<List<Integer>> res = new ArrayList<>();\n        backtrack(nums, res, new ArrayList<>(), 0);\n        return res;\n    }\n\n    private void backtrack(int[] nums, List<List<Integer>> res, List<Integer> subset, int pos) {\n        res.add(new ArrayList<>(subset));\n        for(int i=pos; i<nums.length; i++) {\n            subset.add(nums[i]);\n            backtrack(nums, res, subset, i+1);\n            subset.remove(subset.size() - 1);\n        }\n    }\n}",
    "subPath": "",
    "fileName": "solution.java"
  }
}