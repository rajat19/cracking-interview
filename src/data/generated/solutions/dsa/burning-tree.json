{
  "java": {
    "language": "java",
    "code": "class TreeNode{\n    int data;\n    TreeNode left;\n    TreeNode right;\n}\n\nclass BurningTree{\n    public int minTimeToBurnTree(TreeNode root,int target){\n        Map<TreeNode, TreeNode> parentMap=new HashMap<>();\n        Queue<TreeNode> queue=new LinkedList<>();\n        Set<TreeNode> visited=new HashSet<>();\n        queue.offer(root);\n        TreeNode targetNode=null;\n        int steps=0;\n        while(!queue.isEmpty()){\n            TreeNode node=queue.poll();\n            if (node.data==target){\n                targetNode=node;\n            }\n            if(node.left!=null){\n                queue.offer(node.left);\n                parentMap.put(node.left,node);\n            }\n            if(node.right!=null){\n                queue.offer(node.right);\n                parentMap.put(node.right,node);\n            }\n        }\n        if(targetNode==null){\n            return -1;\n        }\n        queue.clear();\n        queue.offer(targetNode);\n        visited.add(targetNode);\n        while(!queue.isEmpty()){\n            int size = queue.size();\n            for(int i=0; i<size; i++){\n                TreeNode node=queue.poll();\n                TreeNode parent=parentMap.get(node);\n                if(node.left!=null && !visited.contains(node.left)){\n                    queue.offer(node.left);\n                    visited.add(node.left);\n                }\n                if(node.right!=null && !visited.contains(node.right)){\n                    queue.offer(node.right);\n                    visited.add(node.right);\n                }\n                if(parent!=null && !visited.contains(parent)){\n                    queue.offer(parent);\n                    visited.add(parent);\n                }\n            }\n            if(!q.isEmpty()) steps++;\n        }\n        return steps;\n    }\n}",
    "subPath": "",
    "fileName": "solution.java"
  }
}