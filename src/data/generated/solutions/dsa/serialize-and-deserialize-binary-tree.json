{
  "java": {
    "language": "java",
    "code": "/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Codec {\n\n    // Encodes a tree to a single string.\n    public String serialize(TreeNode root) {\n        StringBuilder sb=new StringBuilder();\n        dfs(root,sb);\n        return sb.toString();\n    }\n\n    private void dfs(TreeNode x, StringBuilder sb) {\n        if (x==null) {\n            sb.append(\"null \");\n            return;\n        }\n        sb.append(String.valueOf(x.val));\n        sb.append(' ');\n        dfs(x.left,sb);\n        dfs(x.right,sb);\n    }\n\n    // Decodes your encoded data to tree.\n    public TreeNode deserialize(String data) {\n        String[] node=data.split(\" \");\n        int[] d=new int[1];\n        return dfs(node,d);\n    }\n    private TreeNode dfs(String[] node, int[] d) {\n        if (node[d[0]].equals(\"null\")) {\n            d[0]++;\n            return null;\n        }\n        TreeNode x=new TreeNode(Integer.valueOf(node[d[0]]));\n        d[0]++;\n        x.left=dfs(node,d);\n        x.right=dfs(node,d);\n        return x;\n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser = new Codec();\n// Codec deser = new Codec();\n// TreeNode ans = deser.deserialize(ser.serialize(root));",
    "subPath": "",
    "fileName": "solution.java"
  },
  "py": {
    "language": "py",
    "code": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Codec:\n    def __init__(self):\n        self.separator = '#'\n        self.null = 'null'\n\n    def serialize(self, root):\n        \"\"\"Encodes a tree to a single string.\n\n        :type root: TreeNode\n        :rtype: str\n        \"\"\"\n        ser = []\n        self._dfs(root, ser)\n        return self.separator.join(ser)\n\n    def _dfs(self, root, ser: []):\n        if root is None:\n            ser.append(self.null)\n            return\n        ser.append(f'{root.val}')\n        self._dfs(root.left, ser)\n        self._dfs(root.right, ser)\n\n    def deserialize(self, data):\n        \"\"\"Decodes your encoded data to tree.\n\n        :type data: str\n        :rtype: TreeNode\n        \"\"\"\n        parsed = data.split(self.separator)\n        index = [0]\n        return self._deser_dfs(parsed, index)\n\n    def _deser_dfs(self, parsed: [], index: []):\n        if parsed[index[0]] == self.null:\n            index[0] += 1\n            return None\n        node = TreeNode(parsed[index[0]])\n        index[0] += 1\n        node.left = self._deser_dfs(parsed, index)\n        node.right = self._deser_dfs(parsed, index)\n        return node\n\n\n# Your Codec object will be instantiated and called as such:\n# ser = Codec()\n# deser = Codec()\n# ans = deser.deserialize(ser.serialize(root))",
    "subPath": "",
    "fileName": "solution.py"
  }
}