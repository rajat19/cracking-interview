{
  "cpp": {
    "language": "cpp",
    "code": "class Solution {\npublic:\n    int maxSubArray(vector<int>& nums) {\n        int s = nums.size();\n        if (s == 1) return nums[0];\n        int mx = 0;\n        int msf = nums[0];\n        for(int i=0; i<s; i++) {\n            mx += nums[i];\n            if (mx > msf) msf = mx;\n            if (mx < 0) mx = 0;\n        }\n        return msf;\n    }\n};",
    "subPath": "",
    "fileName": "solution.cpp"
  },
  "go": {
    "language": "go",
    "code": "func maxSubArray(nums []int) int {\n    x := nums[0]\n    res := 0\n    for i := 0; i<len(nums); i++ {\n        res = Max(nums[i], res+nums[i])\n        x = Max(res, x)\n    }\n    return x\n}\n\nfunc Max(x, y int) int {\n    if x < y {\n        return y\n    }\n    return x\n}",
    "subPath": "",
    "fileName": "solution.go"
  },
  "java": {
    "language": "java",
    "code": "class Solution {\n    public int maxSubArray(int[] nums) {\n        int sum = 0, max = Integer.MIN_VALUE;\n        for(int n: nums) {\n            sum += n;\n            max = Math.max(max, sum);\n            sum = Math.max(sum, 0);\n        }\n        return max;\n    }\n}",
    "subPath": "",
    "fileName": "solution.java"
  },
  "py": {
    "language": "py",
    "code": "class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        if len(nums) == 1: return nums[0]\n        msf = nums[0]\n        mx = 0\n        for i in range(len(nums)):\n            mx += nums[i]\n            if mx > msf:\n                msf = mx\n            if mx < 0:\n                mx = 0\n        return msf",
    "subPath": "",
    "fileName": "solution.py"
  }
}