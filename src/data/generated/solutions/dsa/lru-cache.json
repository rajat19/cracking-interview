{
  "java": {
    "language": "java",
    "code": "class Node {\n    int val;\n    int key;\n    Node next;\n    Node prev;\n    Node(int k, int v) {\n        val = v;\n        key = k;\n    }\n}\n\nclass LRUCache {\n\n    private Map<Integer, Node> map;\n    private Node head, tail;\n    private int cursize, maxsize;\n    public LRUCache(int capacity) {\n        map = new HashMap<>();\n        cursize = 0;\n        maxsize = capacity;\n        head = new Node(0, 0);\n        tail = new Node(0, 0);\n        head.next = tail;\n        tail.prev = head;\n    }\n\n    public int get(int key) {\n        if (!map.containsKey(key)) {\n            return -1;\n        }\n        Node node = map.get(key);\n        remove(node);\n        add(node);\n        return node.val;\n    }\n\n    public void put(int key, int value) {\n        if (map.containsKey(key)) {\n            remove(map.get(key));\n            cursize--;\n        }\n        Node newNode = new Node(key, value);\n        map.put(key, newNode);\n        add(newNode);\n        cursize++;\n        if (cursize > maxsize) {\n            map.remove(head.next.key);\n            remove(head.next);\n            cursize--;\n        }\n    }\n\n    private void remove(Node node) {\n        Node prev = node.prev;\n        Node next = node.next;\n        prev.next = next;\n        next.prev = prev;\n        node.next = null;\n        node.prev = null;\n    }\n\n    private void add(Node node) {\n        Node prev = tail.prev;\n        prev.next = node;\n        tail.prev = node;\n        node.prev = prev;\n        node.next = tail;\n    }\n}",
    "subPath": "",
    "fileName": "solution.java"
  },
  "py": {
    "language": "py",
    "code": "class Node:\n    def __init__(self, k, v):\n        self.key = k\n        self.val = v\n        self.prev = None\n        self.next = None\n\n\nclass LRUCache:\n    def __init__(self, capacity):\n        self.capacity = capacity\n        self.dic = dict()\n        self.head = Node(0, 0)\n        self.tail = Node(0, 0)\n        self.head.next = self.tail\n        self.tail.prev = self.head\n\n    def get(self, key):\n        if key in self.dic:\n            n = self.dic[key]\n            self._remove(n)\n            self._add(n)\n            return n.val\n        return -1\n\n    def put(self, key, value):\n        if key in self.dic:\n            self._remove(self.dic[key])\n        n = Node(key, value)\n        self._add(n)\n        self.dic[key] = n\n        if len(self.dic) > self.capacity:\n            n = self.head.next\n            self._remove(n)\n            del self.dic[n.key]\n\n    def _remove(self, node):\n        p = node.prev\n        n = node.next\n        p.next = n\n        n.prev = p\n\n    def _add(self, node):\n        p = self.tail.prev\n        p.next = node\n        self.tail.prev = node\n        node.prev = p\n        node.next = self.tail",
    "subPath": "",
    "fileName": "solution.py"
  }
}