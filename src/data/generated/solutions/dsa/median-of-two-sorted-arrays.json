{
  "cpp": {
    "language": "cpp",
    "code": "class Solution {\npublic:\n    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\n        int n1 = nums1.size(), n2 = nums2.size();\n        if (n1 > n2) return findMedianSortedArrays(nums2, nums1);\n        int start = 0, end = n1;\n        while(start <= end) {\n            int mid1 = start + (end-start)/2;\n            int mid2 = (n1+n2+1)/2 - mid1;\n            int x1 = mid1 == 0 ? INT_MIN : nums1[mid1-1];\n            int x2 = mid2 == 0 ? INT_MIN : nums2[mid2-1];\n            int y1 = mid1 == n1 ? INT_MAX : nums1[mid1];\n            int y2 = mid2 == n2 ? INT_MAX : nums2[mid2];\n            if (x1 <= y2 && x2 <= y1) {\n                if ((n1+n2)%2 == 0) {\n                    return (max(x1, x2) + min(y1, y2)) /2.0;\n                } else {\n                    return max(x1, x2);\n                }\n            }\n            if (x1 > y2) {\n                end = mid1 - 1;\n            } else {\n                start = mid1 + 1;\n            }\n        }\n        return -1;\n    }\n};",
    "subPath": "",
    "fileName": "solution.cpp"
  },
  "java": {
    "language": "java",
    "code": "import java.lang.*;\n\nclass Solution {\n    private static double findMedian(int[] arr1, int[] arr2) {\n        int n1 = arr1.length, n2 = arr2.length;\n        if (n1 > n2) return findMedian(arr2, arr1);\n        int start = 0, end = n1;\n        while(start <= end) {\n            int mid1 = start + (end - start)/2;\n            int mid2 = (n1+n2+1)/2 - mid1;\n            int x1 = mid1 == 0 ? Integer.MIN_VALUE : arr1[mid1 - 1];\n            int x2 = mid2 == 0 ? Integer.MIN_VALUE : arr2[mid2 - 1];\n            int y1 = mid1 == n1 ? Integer.MAX_VALUE : arr1[mid1];\n            int y2 = mid2 == n2 ? Integer.MAX_VALUE : arr2[mid2];\n            if (x1 <= y2 && x2 <= y1) {\n                if ((n1+n2)%2 == 0) {\n                    return (Math.max(x1, x2) + Math.min(y1, y2)) / 2.0;\n                }\n                return Math.max(x1, x2);\n            }\n            if (x1 > y2) {\n                end = mid1 - 1;\n            } else {\n                start = mid1 + 1;\n            }\n        }\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        int[] arr1 = { -5, 3, 6, 12, 15 };\n        int[] arr2 = { -12, -10, -6, -3, 4, 10 };\n        System.out.println(findMedian(arr1, arr2));\n    }\n}",
    "subPath": "",
    "fileName": "solution.java"
  },
  "kt": {
    "language": "kt",
    "code": "class Solution {\n    fun findMedianSortedArrays(nums1: IntArray, nums2: IntArray): Double {\n        val n1 = nums1.size\n        val n2 = nums2.size\n\n        if (n1 > n2) {\n            return findMedianSortedArrays(nums2, nums1)\n        }\n\n        var start = 0\n        var end = n1\n\n        while (start <= end) {\n            val mid1 = start + (end - start) / 2\n            val mid2 = (n1 + n2 + 1) / 2 - mid1\n\n            val left1 = if (mid1 == 0) Int.MIN_VALUE else nums1[mid1 - 1]\n            val left2 = if (mid2 == 0) Int.MIN_VALUE else nums2[mid2 - 1]\n\n            val right1 = if (mid1 == n1) Int.MAX_VALUE else nums1[mid1]\n            val right2 = if (mid2 == n2) Int.MAX_VALUE else nums2[mid2]\n\n            if (left1 <= right2 && left2 <= right1) {\n                if ((n1 + n2) % 2 == 0) {\n                    return (maxOf(left1, left2).toDouble() + minOf(right1, right2).toDouble()) / 2.0\n                } else {\n                    return maxOf(left1, left2).toDouble()\n                }\n            }\n            if (left1 > right2) {\n                end = mid1 - 1\n            } else {\n                start = mid1 + 1\n            }\n        }\n        return -1.0 // Return a Double consistent with the function's return type\n    }\n}",
    "subPath": "",
    "fileName": "solution.kt"
  },
  "py": {
    "language": "py",
    "code": "class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:\n        n1, n2 = len(nums1), len(nums2)\n        if n1 > n2:\n            return self.findMedianSortedArrays(nums2, nums1)\n        start, end = 0, n1\n        while start <= end:\n            m1 = start + (end-start)//2\n            m2 = (n1+n2+1)//2 - m1\n            x1 = float('-inf') if m1 == 0 else nums1[m1-1]\n            x2 = float('-inf') if m2 == 0 else nums2[m2-1]\n            y1 = float('inf') if m1 == n1 else nums1[m1]\n            y2 = float('inf') if m2 == n2 else nums2[m2]\n            if x1 <= y2 and x2 <= y1:\n                if (n1+n2)%2 == 0:\n                    return (max(x1, x2) + min(y1, y2))/2\n                return max(x1, x2)\n            elif x1 > y2:\n                end = m1 - 1\n            else:\n                start = m1 + 1\n        return -1",
    "subPath": "",
    "fileName": "solution.py"
  },
  "ts": {
    "language": "ts",
    "code": "function findMedianSortedArrays(nums1: number[], nums2: number[]): number {\n    const l1 = nums1.length, l2 = nums2.length;\n    if (l1 > l2) {\n        return findMedianSortedArrays(nums2, nums1);\n    }\n\n    let left = 0, right = l1;\n    while (left <= right) {\n        const mid1 = Math.floor((left + right) / 2);\n        const mid2 = Math.floor((l1 + l2 + 1) / 2) - mid1;\n\n        const x1 = mid1 === 0 ? -Infinity : nums1[mid1 - 1];\n        const x2 = mid2 === 0 ? -Infinity : nums2[mid2 - 1];\n        const y1 = mid1 === l1 ? Infinity : nums1[mid1];\n        const y2 = mid2 === l2 ? Infinity : nums2[mid2];\n\n        if (x1 <= y2 && x2 <= y1) {\n            if ((l1 + l2) % 2 === 0) {\n                return (Math.max(x1, x2) + Math.min(y1, y2)) / 2.0;\n            } else {\n                return Math.max(x1, x2);\n            }\n        }\n\n        if (x1 > y2) {\n            right = mid1 - 1;\n        } else {\n            left = mid1 + 1;\n        }\n    }\n\n    return -1;\n}",
    "subPath": "",
    "fileName": "solution.ts"
  }
}