{
  "cpp": {
    "language": "cpp",
    "code": "class Solution {\npublic:\n    vector<vector<string>> partition(string s) {\n        int n = s.length();\n        vector<vector<string>> result;\n        vector<vector<bool>> dp(n, vector<bool>(n, false));\n        vector<string> current;\n        backtrack(s, dp, 0, current, result);\n        return result;\n    }\n\n    void backtrack(string s, vector<vector<bool>> &dp, int start, vector<string> &current, vector<vector<string>> &result) {\n        if (start >= s.length()) {\n            result.push_back(current);\n            return;\n        }\n        for(int pos=start; pos<s.length(); pos++) {\n            if (s[start] == s[pos] && (pos - start <= 2 || dp[start+1][pos-1])) {\n                dp[start][pos] = true;\n                current.push_back(s.substr(start, pos+1-start));\n                backtrack(s, dp, pos+1, current, result);\n                current.pop_back();\n            }\n        }\n    }\n};",
    "subPath": "",
    "fileName": "solution.cpp"
  },
  "java": {
    "language": "java",
    "code": "class Solution {\n    public List<List<String>> partition(String s) {\n        int len = s.length();\n        boolean[][] dp = new boolean[len][len];\n        List<List<String>> result = new ArrayList<>();\n        backtrack(result, s, 0, new ArrayList<>(), dp);\n        return result;\n    }\n\n    void backtrack(List<List<String>> result, String s, int start, List<String> currentList, boolean[][] dp) {\n        if (start >= s.length()) result.add(new ArrayList<>(currentList));\n        for (int end = start; end < s.length(); end++) {\n            if (s.charAt(start) == s.charAt(end) && (end - start <= 2 || dp[start + 1][end - 1])) {\n                dp[start][end] = true;\n                currentList.add(s.substring(start, end + 1));\n                backtrack(result, s, end + 1, currentList, dp);\n                currentList.remove(currentList.size() - 1);\n            }\n        }\n    }\n}",
    "subPath": "",
    "fileName": "solution.java"
  },
  "py": {
    "language": "py",
    "code": "from typing import List\n\n\nclass Solution:\n    def partition(self, s: str) -> List[List[str]]:\n        n = len(s)\n        dp = [[False for _ in range(n)] for _ in range(n)]\n        res = []\n        self.backtrack(s, 0, dp, [], res)\n        return res\n\n    def backtrack(self, s, start, dp, current, res):\n        if start >= len(s):\n            res.append(list(current))\n            return\n        for end in range(start, len(s)):\n            if s[start] == s[end] and (end-start <= 2 or dp[start+1][end-1]):\n                dp[start][end] = True;\n                current.append(s[start:end+1])\n                self.backtrack(s, end+1, dp, current, res)\n                current.pop()",
    "subPath": "",
    "fileName": "solution.py"
  }
}