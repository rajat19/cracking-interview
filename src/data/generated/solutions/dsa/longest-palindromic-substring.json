{
  "cpp": {
    "language": "cpp",
    "code": "class Solution {\npublic:\n    string longestPalindrome(string s) {\n        int n = s.length(), start = 0, end=0;\n        bool dp[n][n];\n        memset(dp, false, sizeof(dp));\n        for(int i=n-1; i>=0; i--) {\n            for(int j=i; j<n; j++) {\n                if (s[i] == s[j] && (j-i <= 2 || dp[i+1][j-1])) {\n                    dp[i][j] = true;\n                }\n                if (dp[i][j] && j-i > end-start) {\n                    end = j;\n                    start = i;\n                }\n            }\n        }\n        return s.substr(start, end-start+1);\n    }\n};",
    "subPath": "",
    "fileName": "solution.cpp"
  },
  "java": {
    "language": "java",
    "code": "class Solution {\n    public String longestPalindrome(String s) {\n        int best = 0, start = 0, end = 0;\n        for(int i=0; i<s.length(); i++) {\n            int left = i-1;\n            while(i < s.length() - 1 && s.charAt(i) == s.charAt(i+1)) {\n                i++;\n            }\n\n            int right = i+1;\n            while(left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {\n                left--;\n                right++;\n            }\n\n            if (right-left > best) {\n                best = right - left;\n                start = left+1;\n                end = right;\n            }\n        }\n        return s.substring(start, end);\n    }\n}\n\n// Alternate solution using dp\n// class Solution {\n//     public String longestPalindrome(String s) {\n//         int n = s.length(), start = 0, end=0;\n//         boolean[][] dp = new boolean[n][n];\n//         for(int i=n-1; i>=0; i--) {\n//             for(int j=i; j<n; j++) {\n//                 if (s.charAt(i) == s.charAt(j) && (j-i <= 2 || dp[i+1][j-1])) {\n//                     dp[i][j] = true;\n//                 }\n//                 if (dp[i][j] && j-i > end-start) {\n//                     end = j;\n//                     start = i;\n//                 }\n//             }\n//         }\n//         return s.substring(start, end+1);\n//     }\n// }",
    "subPath": "",
    "fileName": "solution.java"
  },
  "py": {
    "language": "py",
    "code": "class Solution:\n    def longestPalindrome(self, s: str) -> str:\n        best, start, end = 0, 0, 0\n        for i in range(len(s)):\n            left = i-1\n            while i < len(s) - 1 and s[i] == s[i+1]:\n                i += 1\n            \n            right = i+1\n            while left >= 0 and right < len(s) and s[left] == s[right]:\n                left -= 1\n                right += 1\n            \n            if right - left > best:\n                best, start, end = right-left, left+1, right\n        return s[start:end]",
    "subPath": "",
    "fileName": "solution.py"
  }
}