{
  "cpp": {
    "language": "cpp",
    "code": "class Solution {\npublic:\n    int findDuplicate(vector<int>& nums) {\n        int slow = nums[0], fast = nums[0];\n        while (true) {\n            slow = nums[slow];\n            fast = nums[nums[fast]];\n            if (slow == fast) break;\n        }\n        slow = nums[0];\n        while(slow != fast) {\n            slow = nums[slow];\n            fast = nums[fast];\n        }\n        return fast;\n    }\n};",
    "subPath": "",
    "fileName": "solution.cpp"
  },
  "go": {
    "language": "go",
    "code": "package find_the_duplicate_number\n\nfunc findDuplicate(nums []int) int {\n\tslow := nums[0]\n\tfast := nums[0]\n\tfor true {\n\t\tslow = nums[slow]\n\t\tfast = nums[nums[fast]]\n\t\tif slow == fast {\n\t\t\tbreak\n\t\t}\n\t}\n\tslow = nums[0]\n\tfor slow != fast {\n\t\tslow = nums[slow]\n\t\tfast = nums[fast]\n\t}\n\treturn fast\n}",
    "subPath": "",
    "fileName": "solution.go"
  },
  "java": {
    "language": "java",
    "code": "class Solution {\n    public int findDuplicate(int[] nums) {\n        int slow = nums[0], fast = nums[0];\n        do {\n            slow = nums[slow];\n            fast = nums[nums[fast]];\n        } while(slow != fast);\n        slow = nums[0];\n        while (slow != fast) {\n            slow = nums[slow];\n            fast = nums[fast];\n        }\n        return fast;\n    }\n}",
    "subPath": "",
    "fileName": "solution.java"
  },
  "kt": {
    "language": "kt",
    "code": "class Solution {\n    fun findDuplicate(nums: IntArray): Int {\n        var slow = nums[0];\n        var fast = nums[0];\n        do {\n            slow = nums[slow]\n            fast = nums[nums[fast]];\n        } while(slow != fast);\n\n        slow = nums[0];\n        while(slow != fast) {\n            slow = nums[slow];\n            fast = nums[fast];\n        }\n\n        return fast;\n    }\n}",
    "subPath": "",
    "fileName": "solution.kt"
  },
  "py": {
    "language": "py",
    "code": "class Solution:\n    def findDuplicate(self, nums: List[int]) -> int:\n        slow, fast = nums[0], nums[0]\n        while True:\n            slow = nums[slow]\n            fast = nums[nums[fast]]\n            if slow == fast:\n                break\n        slow = nums[0]\n        while slow != fast:\n            slow = nums[slow]\n            fast = nums[fast]\n        return fast",
    "subPath": "",
    "fileName": "solution.py"
  }
}