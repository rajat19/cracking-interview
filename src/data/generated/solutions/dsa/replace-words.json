{
  "java": {
    "language": "java",
    "code": "class TrieNode {\n\n    boolean isEnd;\n    TrieNode[] children;\n\n    TrieNode() {\n        isEnd = false;\n        children = new TrieNode[26];\n    }\n}\n\nclass Trie {\n\n    private TrieNode root;\n\n    public Trie() {\n        root = new TrieNode();\n    }\n\n    public void insert(String word) {\n        TrieNode current = root;\n        for (char c : word.toCharArray()) {\n            if (current.children[c - 'a'] == null) {\n                current.children[c - 'a'] = new TrieNode();\n            }\n            current = current.children[c - 'a'];\n        }\n        current.isEnd = true;\n    }\n\n    // Find the shortest root of the word in the trie\n    public String shortestRoot(String word) {\n        TrieNode current = root;\n        for (int i = 0; i < word.length(); i++) {\n            char c = word.charAt(i);\n            if (current.children[c - 'a'] == null) {\n                // There is not a corresponding root in the trie\n                return word;\n            }\n            current = current.children[c - 'a'];\n            if (current.isEnd) {\n                return word.substring(0, i + 1);\n            }\n        }\n        // There is not a corresponding root in the trie\n        return word;\n    }\n}\n\nclass Solution {\n\n    public String replaceWords(List<String> dictionary, String sentence) {\n        String wordArray[] = sentence.split(\" \");\n\n        Trie dictTrie = new Trie();\n        for (String word : dictionary) {\n            dictTrie.insert(word);\n        }\n\n        // Replace each word in the sentence with the corresponding shortest root\n        for (int word = 0; word < wordArray.length; word++) {\n            wordArray[word] = dictTrie.shortestRoot(wordArray[word]);\n        }\n\n        return String.join(\" \", wordArray);\n    }\n}",
    "subPath": "",
    "fileName": "solution.java"
  },
  "py": {
    "language": "py",
    "code": "class Solution:\n    def replaceWords(self, dictionary: List[str], sentence: str) -> str:\n        root = Trie()\n        for word in dictionary:\n            root.insert(word)\n\n        res, split = [], sentence.split(' ')\n        for word in split:\n            res.append(root.search(word))\n\n        return ' '.join(res)\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word: str):\n        node = self.root\n        for c in word:\n            if c not in node.children:\n                node.children[c] = TrieNode()\n            node = node.children[c]\n        node.leaf = True\n\n    def search(self, word: str) -> str:\n        node = self.root\n        for i in range(len(word)):\n            c = word[i]\n            if c not in node.children:\n                return word\n            node = node.children[c]\n            if node.leaf:\n                return word[:i+1]\n        return word\n\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.leaf = False",
    "subPath": "",
    "fileName": "solution.py"
  }
}