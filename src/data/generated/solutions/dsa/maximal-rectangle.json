{
  "cpp": {
    "language": "cpp",
    "code": "class Solution {\npublic:\n    int maximalRectangle(vector<vector<char>>& matrix) {\n        int rows = matrix.size(), cols = matrix[0].size();\n        vector<int> histogram(cols, 0);\n        for(int i=0; i<cols; i++) {\n            histogram[i] = matrix[0][i] - '0';\n        }\n        int maxArea = largestHistogram(histogram);\n        for(int i=1; i<rows; i++) {\n            for(int j=0; j<cols; j++) {\n                histogram[j] = matrix[i][j] == '1' ? histogram[j] + 1 : 0;\n            }\n            maxArea = max(maxArea, largestHistogram(histogram));\n        }\n        return maxArea;\n    }\n\n    int largestHistogram(vector<int> &matrix) {\n        stack<int> st;\n        int n = matrix.size();\n        int maxArea = 0, i = 0;\n        while(i<n) {\n            if (st.empty() || matrix[st.top()] <= matrix[i]) {\n                st.push(i++);\n            } else {\n                int top = st.top(); st.pop();\n                int width = st.empty() ? i : i - st.top() - 1;\n                maxArea = max(maxArea, matrix[top]*width);\n            }\n        }\n        while(!st.empty()) {\n            int top = st.top(); st.pop();\n            int width = st.empty() ? n : n - st.top() - 1;\n            maxArea = max(maxArea, matrix[top]*width);\n        }\n        return maxArea;\n    }\n};",
    "subPath": "",
    "fileName": "solution.cpp"
  },
  "java": {
    "language": "java",
    "code": "class Solution {\n    public int maximalRectangle(char[][] matrix) {\n        int rows = matrix.length, cols = matrix[0].length;\n        int[] histogram = new int[cols];\n        for(int i=0; i<cols; i++) {\n            histogram[i] = matrix[0][i] - '0';\n        }\n        int maxArea = largestRectangleArea(histogram);\n        for(int i=1; i<rows; i++) {\n            for(int j=0; j<cols; j++) {\n                histogram[j] = matrix[i][j] == '1' ? histogram[j]+1 : 0;\n            }\n            int result = largestRectangleArea(histogram);\n            maxArea = Math.max(maxArea, result);\n        }\n        return maxArea;\n    }\n\n    private int largestRectangleArea(int[] heights) {\n        Stack<Integer> stack = new Stack<>();\n        int n = heights.length;\n        int maxArea = 0;\n        int i=0;\n        while(i<n) {\n            if (stack.isEmpty() || heights[stack.peek()] <= heights[i]) {\n                stack.push(i++);\n            } else {\n                int top = stack.pop();\n                int width = stack.isEmpty() ? i : i - stack.peek() - 1;\n                maxArea = Math.max(maxArea, heights[top]*width);\n            }\n        }\n        while(!stack.isEmpty()) {\n            int top = stack.pop();\n            int width = stack.isEmpty() ? n : n - stack.peek() - 1;\n            maxArea = Math.max(maxArea, heights[top]*width);\n        }\n        return maxArea;\n    }\n}",
    "subPath": "",
    "fileName": "solution.java"
  }
}