{
  "java": {
    "language": "java",
    "code": "class Solution {\n    public int calculate(String s) {\n        Stack<Integer> st = new Stack<>();\n\n        int num = 0;\n        char operator = '+';\n\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\n            if (Character.isDigit(c)) {\n                num = num * 10 + (c - '0');\n            }\n\n            if (isOperator(c) || i == s.length() - 1) {\n                if (operator == '+') st.push(num);\n                else if (operator == '-') st.push(-num);\n                else if (operator == '*') st.push(st.pop() * num);\n                else if (operator == '/') st.push(st.pop() / num);\n\n                num = 0;\n                operator = c;\n            }\n        }\n\n        int ans = 0;\n\n        while (!st.isEmpty()) {\n            ans += st.pop();\n        }\n\n        return ans;\n    }\n\n    private boolean isOperator(char c) {\n        return c == '+' || c == '-' || c == '*' || c == '/';\n    }\n}",
    "subPath": "",
    "fileName": "solution.java"
  },
  "py": {
    "language": "py",
    "code": "class Solution:\n    def calculate(self, s: str) -> int:\n        def update(op, v):\n            if op == \"+\": stack.append(v)\n            if op == \"-\": stack.append(-v)\n            if op == \"*\": stack.append(stack.pop() * v)           #for BC II and BC III\n            if op == \"/\": stack.append(int(stack.pop() / v))      #for BC II and BC III\n\n        it, num, stack, sign = 0, 0, [], \"+\"\n\n        while it < len(s):\n            if s[it].isdigit():\n                num = num * 10 + int(s[it])\n            elif s[it] in \"+-*/\":\n                update(sign, num)\n                num, sign = 0, s[it]\n            elif s[it] == \"(\":                                        # For BC I and BC III\n                num, j = self.calculate(s[it + 1:])\n                it = it + j\n            elif s[it] == \")\":                                        # For BC I and BC III\n                update(sign, num)\n                return sum(stack), it + 1\n            it += 1\n        update(sign, num)\n        return sum(stack)",
    "subPath": "",
    "fileName": "solution.py"
  }
}