{
  "java": {
    "language": "java",
    "code": "class UnionFind {\n    public int[] group;\n    public int[] rank;\n\n    public UnionFind(int size) {\n        group = new int[size];\n        rank = new int[size];\n        for (int i = 0; i < size; ++i) {\n            group[i] = i;\n        }\n    }\n\n    public int find(int node) {\n        if (group[node] != node) {\n            group[node] = find(group[node]);\n        }\n        return group[node];\n    }\n\n    public boolean union(int node1, int node2) {\n        int group1 = find(node1);\n        int group2 = find(node2);\n\n        // node1 and node2 already belong to same group.\n        if (group1 == group2) {\n            return false;\n        }\n\n        if (rank[group1] > rank[group2]) {\n            group[group2] = group1;\n        } else if (rank[group1] < rank[group2]) {\n            group[group1] = group2;\n        } else {\n            group[group1] = group2;\n            rank[group2] += 1;\n        }\n\n        return true;\n    }\n}\n\nclass Solution {\n    public int minCostConnectPoints(int[][] points) {\n        int n = points.length;\n        ArrayList<int[]> allEdges = new ArrayList<>();\n\n        // Storing all edges of our complete graph.\n        for (int currNext = 0; currNext < n; ++currNext) {\n            for (int nextNext = currNext + 1; nextNext < n; ++nextNext) {\n                int weight = Math.abs(points[currNext][0] - points[nextNext][0]) +\n                        Math.abs(points[currNext][1] - points[nextNext][1]);\n\n                int[] currEdge = {weight, currNext, nextNext};\n                allEdges.add(currEdge);\n            }\n        }\n\n        // Sort all edges in increasing order.\n        Collections.sort(allEdges, (a, b) -> Integer.compare(a[0], b[0]));\n\n        UnionFind uf = new UnionFind(n);\n        int mstCost = 0;\n        int edgesUsed = 0;\n\n        for (int i = 0; i < allEdges.size() && edgesUsed < n - 1; ++i) {\n            int node1 = allEdges.get(i)[1];\n            int node2 = allEdges.get(i)[2];\n            int weight = allEdges.get(i)[0];\n\n            if (uf.union(node1, node2)) {\n                mstCost += weight;\n                edgesUsed++;\n            }\n        }\n\n        return mstCost;\n    }\n}",
    "subPath": "",
    "fileName": "solution.java"
  }
}