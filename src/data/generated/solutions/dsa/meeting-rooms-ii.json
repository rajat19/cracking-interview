{
  "cpp": {
    "language": "cpp",
    "code": "class Solution {\npublic:\n    int minMeetingRooms(vector<vector<int>>& intervals) {\n        int n = 1000010;\n        vector<int> delta(n);\n        for (auto e : intervals) {\n            ++delta[e[0]];\n            --delta[e[1]];\n        }\n        for (int i = 0; i < n - 1; ++i) {\n            delta[i + 1] += delta[i];\n        }\n        return *max_element(delta.begin(), delta.end());\n    }\n};",
    "subPath": "",
    "fileName": "solution.cpp"
  },
  "go": {
    "language": "go",
    "code": "func minMeetingRooms(intervals [][]int) int {\n\tn := 1000010\n\tdelta := make([]int, n)\n\tfor _, e := range intervals {\n\t\tdelta[e[0]]++\n\t\tdelta[e[1]]--\n\t}\n\tfor i := 1; i < n; i++ {\n\t\tdelta[i] += delta[i-1]\n\t}\n\treturn slices.Max(delta)\n}",
    "subPath": "",
    "fileName": "solution.go"
  },
  "java": {
    "language": "java",
    "code": "class Solution {\n    public int minMeetingRooms(int[][] intervals) {\n        int n = 1000010;\n        int[] delta = new int[n];\n        for (int[] e : intervals) {\n            ++delta[e[0]];\n            --delta[e[1]];\n        }\n        int res = delta[0];\n        for (int i = 1; i < n; ++i) {\n            delta[i] += delta[i - 1];\n            res = Math.max(res, delta[i]);\n        }\n        return res;\n    }\n}",
    "subPath": "",
    "fileName": "solution.java"
  },
  "py": {
    "language": "py",
    "code": "class Solution(object):\n  def minMeetingRooms(self, intervals):\n    \"\"\"\n    :type intervals: List[Interval]\n    :rtype: int\n    \"\"\"\n    meetings = []\n    for i in intervals:\n      meetings.append((i.start, 1))\n      meetings.append((i.end, 0))\n    meetings.sort()\n    ans = 0\n    count = 0\n    for meeting in meetings:\n      if meeting[1] == 1:\n        count += 1\n      else:\n        count -= 1\n      ans = max(ans, count)\n    return ans",
    "subPath": "",
    "fileName": "solution.py"
  },
  "ts": {
    "language": "ts",
    "code": "function minMeetingRooms(intervals: number[][]): number {\n    const m = Math.max(...intervals.map(([_, r]) => r));\n    const d: number[] = Array(m + 1).fill(0);\n    for (const [l, r] of intervals) {\n        d[l]++;\n        d[r]--;\n    }\n    let [ans, s] = [0, 0];\n    for (const v of d) {\n        s += v;\n        ans = Math.max(ans, s);\n    }\n    return ans;\n}",
    "subPath": "",
    "fileName": "solution.ts"
  }
}