{
  "cpp": {
    "language": "cpp",
    "code": "class Solution {\npublic:\n    int maxAreaOfIsland(vector<vector<int>>& grid) {\n        int n = grid.size(), m = grid[0].size();\n        int mx = 0;\n        int count[1] = {0};\n        for(int i=0; i<n; i++) {\n            for(int j = 0; j<m; j++) {\n                if (grid[i][j] == 1) {\n                    count[0] = 0;\n                    dfs(grid, n, m, i, j, count);\n                    mx = max(count[0], mx);\n                }\n            }\n        }\n        return mx;\n    }\n\n    void dfs(vector<vector<int>> &grid, int n, int m, int x, int y, int* count) {\n        count[0]++;\n        grid[x][y] = 2;\n        int dir[5] = {-1,0,1,0,-1};\n        for(int i=0; i<4; i++) {\n            int nx = x+dir[i], ny = y+dir[i+1];\n            if(nx>=0 && ny>=0 && nx<n && ny <m && grid[nx][ny] == 1) {\n                dfs(grid,n,m,nx,ny,count);\n            }\n        }\n    }\n};",
    "subPath": "",
    "fileName": "solution.cpp"
  },
  "java": {
    "language": "java",
    "code": "class Solution {\n    public int maxAreaOfIsland(int[][] grid) {\n        int n = grid.length, m = grid[0].length;\n        int max = 0;\n        int[] count = new int[]{0};\n        for(int i=0; i<n; i++) {\n            for(int j = 0; j<m; j++) {\n                if (grid[i][j] == 1) {\n                    count[0] = 0;\n                    dfs(grid, n, m, i, j, count);\n                    max = Math.max(count[0], max);\n                }\n            }\n        }\n        return max;\n    }\n\n    private void dfs(int[][] grid, int n, int m, int x, int y, int[] count) {\n        count[0]++;\n        grid[x][y] = 2;\n        int[] dir = new int[]{-1,0,1,0,-1};\n        for(int i=0; i<4; i++) {\n            int nx = x+dir[i], ny = y+dir[i+1];\n            if(nx>=0 && ny>=0 && nx<n && ny <m && grid[nx][ny] == 1) {\n                dfs(grid,n,m,nx,ny,count);\n            }\n        }\n    }\n}",
    "subPath": "",
    "fileName": "solution.java"
  }
}