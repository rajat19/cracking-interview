{
  "cpp": {
    "language": "cpp",
    "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\n    struct compare {\n        bool operator()(const ListNode* l, const ListNode* r) {\n            return l->val > r->val;\n        }\n    };\n\npublic:\n    ListNode *mergeKLists(vector<ListNode *> &lists) {\n        priority_queue<ListNode *, vector<ListNode *>, compare> q;\n        for (auto l : lists) {\n            if (l) {\n                q.push(l);\n            }\n        }\n\n        if (q.empty()) {\n            return NULL;\n        }\n\n        ListNode* result = q.top();\n        q.pop();\n        if (result->next) {\n            q.push(result->next);\n        }\n\n        ListNode* tail = result;\n        while (!q.empty()) {\n            tail->next = q.top();\n            q.pop();\n            tail = tail->next;\n            if (tail->next) {\n                q.push(tail->next);\n            }\n        }\n\n        return result;\n    }\n};",
    "subPath": "",
    "fileName": "solution.cpp"
  },
  "java": {
    "language": "java",
    "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        if (lists.length == 0) return null;\n        PriorityQueue<ListNode> pq = new PriorityQueue<>((a, b) -> a.val - b.val);\n        for(int i=0; i<lists.length; i++) {\n            if (lists[i] != null) pq.offer(lists[i]);\n        }\n        ListNode head = new ListNode();\n        ListNode temp = head;\n        while(!pq.isEmpty()) {\n            ListNode top = pq.poll();\n            if (top.next != null) pq.offer(top.next);\n            top.next = null;\n            temp.next = top;\n            temp = temp.next;\n        }\n        return head.next;\n    }\n}",
    "subPath": "",
    "fileName": "solution.java"
  }
}