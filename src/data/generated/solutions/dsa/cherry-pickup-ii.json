{
  "java": {
    "language": "java",
    "code": "class Solution {\n    public int cherryPickup(int[][] grid) {\n        int dir[] = new int[]{-1, 0, 1};\n\n        int row = grid.length;\n        int col = grid[0].length;\n        int dp[][][] = new int[row][col][col];\n\n        for(int i = 0; i < row; i++){\n            for(int j = 0; j < col; j++){\n                for(int k = 0; k < col; k++){\n                    dp[i][j][k] = -1;\n                }\n            }\n        }\n        int col1 = 0;\n        int col2 = col - 1;\n\n        dp[0][col1][col2] = grid[0][col1] + grid[0][col2];\n        int max = dp[0][col1][col2];\n\n        for(int i = 1; i < row; i++){\n            for(int c1 = 0; c1 < col; c1++){\n                for(int c2 = 0; c2 < col; c2++){\n                    int prev = dp[i - 1][c1][c2];\n                    if(prev >= 0){\n                        for(int d1: dir){\n                            col1 = d1 + c1;\n                            for(int d2: dir){\n                                col2 = d2 + c2;\n                                if(inRange(col1, col) && inRange(col2, col)){\n                                    dp[i][col1][col2] = Math.max(dp[i][col1][col2], prev+(col1 == col2 ? grid[i][col1] : (grid[i][col1] + grid[i][col2])));\n                                    max = Math.max(max, dp[i][col1][col2]);\n                                }\n                            }\n                        }\n                    }\n\n                }\n            }\n        }\n        return max;\n    }\n\n    public boolean inRange(int val, int limit){\n        return 0 <= val && val < limit;\n    }\n}",
    "subPath": "",
    "fileName": "solution.java"
  }
}