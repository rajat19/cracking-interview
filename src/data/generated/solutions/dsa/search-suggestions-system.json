{
  "java": {
    "language": "java",
    "code": "class Solution {\n    public List<List<String>> suggestedProducts(String[] products, String searchWord) {\n        TrieNode root = new TrieNode();\n        for(String product: products) {\n            root.add(product);\n        }\n        int n = searchWord.length();\n        List<List<String>> res = new ArrayList<>();\n        for(int i=0; i<n; i++) {\n            char c = searchWord.charAt(i);\n            int pos = c - 'a';\n            List<String> list = new ArrayList<>();\n            if (root != null && root.children[pos] != null) {\n                PriorityQueue<String> pq = root.children[pos].top;\n                while(!pq.isEmpty()) list.add(0, pq.poll());\n                pq.addAll(list);\n            }\n            res.add(list);\n            if (root == null) continue;\n            root = root.children[pos];\n        }\n        return res;\n    }\n}\n\nclass TrieNode {\n    PriorityQueue<String> top;\n    TrieNode[] children;\n    boolean isEndWord;\n    static int MAX_SIZE = 3;\n    TrieNode() {\n        top = new PriorityQueue<>((a,b) -> b.compareTo(a));\n        children = new TrieNode[26];\n        isEndWord = false;\n    }\n\n    public void add(String s) {\n        TrieNode root = this;\n        int n = s.length();\n        for(int i=0; i<n; i++) {\n            char c = s.charAt(i);\n            int pos = c - 'a';\n            if (root.children[pos] == null) {\n                root.children[pos] = new TrieNode();\n            }\n            PriorityQueue<String> pq = root.children[pos].top;\n            if (pq.size() < MAX_SIZE) pq.offer(s);\n            else {\n                if (pq.peek().compareTo(s) > 0) {\n                    pq.poll();\n                    pq.offer(s);\n                }\n            }\n            root.children[pos].top = pq;\n            root = root.children[pos];\n        }\n        root.isEndWord = true;\n    }\n}",
    "subPath": "",
    "fileName": "solution.java"
  }
}