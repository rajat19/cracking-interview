{
  "cpp": {
    "language": "cpp",
    "code": "/* The knows API is defined for you.\n      bool knows(int a, int b); */\n\nclass Solution {\npublic:\n    int findCelebrity(int n) {\n        int ans = 0;\n        for (int i = 1; i < n; ++i) {\n            if (knows(ans, i)) {\n                ans = i;\n            }\n        }\n        for (int i = 0; i < n; ++i) {\n            if (ans != i) {\n                if (knows(ans, i) || !knows(i, ans)) {\n                    return -1;\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "subPath": "",
    "fileName": "solution.cpp"
  },
  "go": {
    "language": "go",
    "code": "/**\n * The knows API is already defined for you.\n *     knows := func(a int, b int) bool\n */\nfunc solution(knows func(a int, b int) bool) func(n int) int {\n\treturn func(n int) int {\n\t\tans := 0\n\t\tfor i := 1; i < n; i++ {\n\t\t\tif knows(ans, i) {\n\t\t\t\tans = i\n\t\t\t}\n\t\t}\n\t\tfor i := 0; i < n; i++ {\n\t\t\tif ans != i {\n\t\t\t\tif knows(ans, i) || !knows(i, ans) {\n\t\t\t\t\treturn -1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ans\n\t}\n}",
    "subPath": "",
    "fileName": "solution.go"
  },
  "java": {
    "language": "java",
    "code": "/* The knows API is defined in the parent class Relation.\n      boolean knows(int a, int b); */\n\npublic class Solution extends Relation {\n    public int findCelebrity(int n) {\n        int ans = 0;\n        for (int i = 1; i < n; ++i) {\n            if (knows(ans, i)) {\n                ans = i;\n            }\n        }\n        for (int i = 0; i < n; ++i) {\n            if (ans != i) {\n                if (knows(ans, i) || !knows(i, ans)) {\n                    return -1;\n                }\n            }\n        }\n        return ans;\n    }\n}",
    "subPath": "",
    "fileName": "solution.java"
  },
  "py": {
    "language": "py",
    "code": "# The knows API is already defined for you.\n# return a bool, whether a knows b\n# def knows(a: int, b: int) -> bool:\n\n\nclass Solution:\n    def findCelebrity(self, n: int) -> int:\n        ans = 0\n        for i in range(1, n):\n            if knows(ans, i):\n                ans = i\n        for i in range(n):\n            if ans != i:\n                if knows(ans, i) or not knows(i, ans):\n                    return -1\n        return ans",
    "subPath": "",
    "fileName": "solution.py"
  }
}