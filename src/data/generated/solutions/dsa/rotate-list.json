{
  "c": {
    "language": "c",
    "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\nstruct ListNode* rotateRight(struct ListNode* head, int k){\n    if (k==0 || head == NULL || head->next == NULL) return head;\n    struct ListNode* fast = head;\n    int n=0;\n    while(fast != NULL) {\n        fast = fast->next;\n        n++;\n    }\n    if (n <= k) k = k%n;\n    if (k==0) return head;\n    fast = head;\n    while(k>0) {\n        k--;\n        fast = fast->next;\n    }\n    struct ListNode* slow = head;\n    while (fast->next != NULL) {\n        slow = slow->next;\n        fast = fast->next;\n    }\n    fast->next = head;\n    struct ListNode* newhead = slow->next;\n    slow->next = NULL;\n    return newhead;\n}",
    "subPath": "",
    "fileName": "solution.c"
  },
  "cpp": {
    "language": "cpp",
    "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(NULLptr) {}\n *     ListNode(int x) : val(x), next(NULLptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* rotateRight(ListNode* head, int k) {\n        if (k==0 || head == NULL || head->next == NULL) return head;\n        ListNode* fast = head;\n        int n=0;\n        while(fast != NULL) {\n            fast = fast->next;\n            n++;\n        }\n        if (n <= k) k = k%n;\n        if (k==0) return head;\n        fast = head;\n        while(k>0) {\n            k--;\n            fast = fast->next;\n        }\n        ListNode* slow = head;\n        while (fast->next != NULL) {\n            slow = slow->next;\n            fast = fast->next;\n        }\n        fast->next = head;\n        ListNode* newhead = slow->next;\n        slow->next = NULL;\n        return newhead;\n    }\n};",
    "subPath": "",
    "fileName": "solution.cpp"
  },
  "java": {
    "language": "java",
    "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode rotateRight(ListNode head, int k) {\n        if (k==0 || head == null || head.next == null) return head;\n        ListNode fast = head;\n        int n=0;\n        while(fast != null) {\n            fast = fast.next;\n            n++;\n        }\n        if (n <= k) k = k%n;\n        if (k==0) return head;\n        fast = head;\n        while(k>0) {\n            k--;\n            fast = fast.next;\n        }\n        ListNode slow = head;\n        while (fast.next != null) {\n            slow = slow.next;\n            fast = fast.next;\n        }\n        fast.next = head;\n        ListNode newhead = slow.next;\n        slow.next = null;\n        return newhead;\n    }\n}",
    "subPath": "",
    "fileName": "solution.java"
  }
}