{
  "java": {
    "language": "java",
    "code": "class Solution {\n    public int maxSumAfterPartitioning(int[] arr, int k) {\n        int[] dp = new int[arr.length];\n        Arrays.fill(dp, -1);\n        return maxSum(arr, k, dp, arr.length, 0);\n    }\n\n    private int maxSum(int[] arr, int k, int[] dp, int n, int start) {\n        if (start >= n) {\n            return 0;\n        }\n        if (dp[start] != -1) {\n            return dp[start];\n        }\n        int max = 0, ans = 0;\n        int end = Math.min(n, start + k);\n        for(int i = start; i < end; i++) {\n            max = Math.max(max, arr[i]);\n            ans = Math.max(ans, max*(i-start+1) + maxSum(arr, k, dp, n, i+1));\n        }\n        return dp[start] = ans;\n    }\n}",
    "subPath": "",
    "fileName": "solution.java"
  }
}