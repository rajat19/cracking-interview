{
  "cpp": {
    "language": "cpp",
    "code": "class Solution {\npublic:\n    void rotate(vector<int>& nums, int k) {\n        int n = nums.size();\n        k %= n;\n        reverse(nums, 0, n-k-1);\n        reverse(nums, n-k, n-1);\n        reverse(nums, 0, n-1);\n    }\n\n    void reverse(vector<int> &nums, int start, int end) {\n        while(start < end) {\n            int temp = nums[start];\n            nums[start] = nums[end];\n            nums[end] = temp;\n            start++;\n            end--;\n        }\n    }\n};",
    "subPath": "",
    "fileName": "solution.cpp"
  },
  "java": {
    "language": "java",
    "code": "class Solution {\n    public void rotate(int[] nums, int k) {\n        int n = nums.length;\n        k %= n;\n        reverse(nums, 0, n-k-1);\n        reverse(nums, n-k, n-1);\n        reverse(nums, 0, n-1);\n    }\n\n    public void reverse(int[] nums, int start, int end) {\n        while(start < end) {\n            int temp = nums[start];\n            nums[start] = nums[end];\n            nums[end] = temp;\n            start++;\n            end--;\n        }\n    }\n}",
    "subPath": "",
    "fileName": "solution.java"
  },
  "py": {
    "language": "py",
    "code": "class Solution:\n    def rotate(self, nums: List[int], k: int) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        n = len(nums)\n        k %= n\n        self.reverse(nums, 0, n-k-1)\n        self.reverse(nums, n-k, n-1)\n        self.reverse(nums, 0, n-1)\n\n    def reverse(self, nums, start, end) -> None:\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start+=1\n            end-=1",
    "subPath": "",
    "fileName": "solution.py"
  }
}