{
  "c": {
    "language": "c",
    "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\n\nstruct ListNode* swapPairs(struct ListNode* head){\n    if (head == NULL || head->next == NULL) return head;\n    struct ListNode *l1 = head, *l2 = head->next;\n    l1->next = l2->next;\n    l2->next = l1;\n    l1->next = swapPairs(l1->next);\n    return l2;\n}",
    "subPath": "",
    "fileName": "solution.c"
  },
  "cpp": {
    "language": "cpp",
    "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        if (head == NULL || head->next == NULL) return head;\n        ListNode *l1 = head, *l2 = head->next;\n        l1->next = l2->next;\n        l2->next = l1;\n        l1->next = swapPairs(l1->next);\n        return l2;\n    }\n};",
    "subPath": "",
    "fileName": "solution.cpp"
  },
  "go": {
    "language": "go",
    "code": "package swap_nodes_in_pairs\n\ntype ListNode struct {\n\tVal int\n\tNext *ListNode\n}\n\nfunc swapPairs(head *ListNode) *ListNode {\n\tif head == nil || head.Next == nil {\n\t\treturn head\n\t}\n\tl1 := head\n\tl2 := head.Next\n\tl1.Next = l2.Next\n\tl2.Next = l1\n\tl1.Next = swapPairs(l1.Next)\n\treturn l2\n}",
    "subPath": "",
    "fileName": "solution.go"
  },
  "java": {
    "language": "java",
    "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode swapPairs(ListNode head) {\n        if (head == null || head.next == null) return head;\n        ListNode l1 = head, l2 = head.next;\n        l1.next = l2.next;\n        l2.next = l1;\n        l1.next = swapPairs(l1.next);\n        return l2;\n    }\n}",
    "subPath": "",
    "fileName": "solution.java"
  },
  "py": {
    "language": "py",
    "code": "from typing import Optional\n\n\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\n\nclass Solution:\n    def swapPairs(self, head: Optional[ListNode]) -> Optional[ListNode]:\n        if not head or not head.next:\n            return head\n        l1, l2 = head, head.next\n        l1.next = l2.next\n        l2.next = l1\n        l1.next = self.swapPairs(l1.next)\n        return l2",
    "subPath": "",
    "fileName": "solution.py"
  }
}