{
  "java": {
    "language": "java",
    "code": "class Solution {\n    public int shortestPathBinaryMatrix(int[][] grid) {\n        if (grid[0][0] == 1) return -1;\n        int n = grid.length, m = grid[0].length;\n        Queue<int[]> q = new LinkedList<>();\n        q.offer(new int[]{0, 0});\n        int steps = 1;\n        int[] dx = new int[]{-1,-1,-1,0,0,1,1,1};\n        int[] dy = new int[]{-1,0,1,-1,1,-1,0,1};\n        while(!q.isEmpty()) {\n            int qs = q.size();\n            for(int i=0; i<qs; i++) {\n                int[] first = q.poll();\n                if (grid[first[0]][first[1]] != 0) continue;\n                grid[first[0]][first[1]] = 1;\n                if (first[0] == n-1 && first[1] == m-1) {\n                    return steps;\n                }\n                for(int j=0; j<8; j++) {\n                    int nx = first[0] + dx[j], ny = first[1]+dy[j];\n                    if (nx>=0 && ny >=0 && nx<n && ny<m && grid[nx][ny] == 0) {\n                        q.offer(new int[]{nx, ny});\n                    }\n                }\n            }\n            steps++;\n        }\n        return -1;\n    }\n}",
    "subPath": "",
    "fileName": "solution.java"
  }
}