{
  "cpp": {
    "language": "cpp",
    "code": "class Solution {\npublic:\n    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {\n        vector<pair<int,int>> adj[n];\n        for(auto it: flights)\n        {\n            adj[it[0]].push_back({it[1], it[2]});\n        }\n\n        queue<pair<int, pair<int,int>>> q;\n        //{stop,{src, cost}}\n        q.push({0, {src,0}});\n\n        vector<int> dist(n, 1e9);\n        dist[src]=0;\n\n        while(!q.empty())\n        {\n            auto it =  q.front();\n            q.pop();\n            int stops = it.first;\n            int node = it.second.first;\n            int cost = it.second.second;\n\n            if(stops>k) break;\n\n            for(auto it : adj[node])\n            {\n                int adjNode = it.first;\n                int edW = it.second;\n\n                if(cost + edW < dist[adjNode] && stops <= k)\n                {\n                    dist[adjNode] = cost + edW;\n                    q.push({stops+1 ,{adjNode, cost+edW}});\n                }\n            }\n\n        }\n\n        if(dist[dst]== 1e9) return -1;\n        return dist[dst];\n    }\n};",
    "subPath": "",
    "fileName": "solution.cpp"
  },
  "java": {
    "language": "java",
    "code": "class Solution {\n    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {\n        int graph[][] = new int[n][n];\n        for (int i = 0; i < flights.length; i++) {\n            graph[flights[i][0]][flights[i][1]] = flights[i][2];\n        }\n        int ans = findCheapestPrice(src, dst, graph, k + 1, new int[n + 1][n + 1][k + 2]);\n        return ans >= 1000000 ? -1 : ans;\n    }\n\n    int findCheapestPrice(int src, int dst, int graph[][], int k, int dp[][][]) {\n        if (dst == src) {\n            return 0;\n        }\n        if (k == 0) {\n            return 1000000;\n        }\n        if (dp[src][dst][k] != 0) {\n            return dp[src][dst][k];\n        }\n        int min = 1000000;\n        for (int i = 0; i < graph[src].length; i++) {\n            if (graph[src][i] != 0) {\n                min = Math.min(min, graph[src][i] + findCheapestPrice(i, dst, graph, k - 1, dp));\n            }\n        }\n        return dp[src][dst][k] = min;\n    }\n}",
    "subPath": "",
    "fileName": "solution.java"
  }
}