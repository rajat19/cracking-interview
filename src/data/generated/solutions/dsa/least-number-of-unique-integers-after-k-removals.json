{
  "java": {
    "language": "java",
    "code": "class Solution {\n    public int findLeastNumOfUniqueInts(int[] arr, int k) {\n        Map<Integer, Integer> count = new HashMap<>();\n        for (int i = 0; i < arr.length; i++) {\n            count.put(arr[i], count.getOrDefault(arr[i], 0) + 1);\n        }\n        int unique = count.size();\n\n        int[] countArray = new int[100000];\n        for(Integer key : count.keySet()) {\n            int keyCount = count.get(key);\n            countArray[keyCount]++;\n        }\n\n        for (int i = 1; i < 100000; i++) {\n            if (countArray[i]!= 0) {\n                int remove = k / i;\n                if (remove == 0) {\n                    break;\n                } else {\n                    remove = Math.min(remove, countArray[i]);\n                    unique -= remove;\n                    k -= remove * i;\n                }\n            }\n        }\n        return unique;\n    }\n}",
    "subPath": "",
    "fileName": "solution.java"
  },
  "py": {
    "language": "py",
    "code": "class Solution:\n    def findLeastNumOfUniqueInts(self, arr: List[int], k: int) -> int:\n        count_map = {}\n        for el in arr:\n            count_map[el] = (count_map[el] if el in count_map else 0) + 1\n        freq = [0] * 100000\n        unique = len(count_map)\n        for v in count_map.values():\n            freq[v] += 1\n        for i in range(1, 100000):\n            if freq[i] != 0:\n                remove = k // i\n                if remove == 0:\n                    break\n                else:\n                    remove = min(remove, freq[i])\n                    unique -= remove\n                    k -= remove * i\n        return unique",
    "subPath": "",
    "fileName": "solution.py"
  }
}