{
  "c": {
    "language": "c",
    "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\n\n\nstruct ListNode* reverseBetween(struct ListNode* head, int left, int right){\n    if (head == NULL) return head;\n    struct ListNode *prev = NULL, *curr = head;\n    while(left > 1) {\n        prev = curr;\n        curr = curr->next;\n        left--;\n        right--;\n    }\n\n    struct ListNode* tail = curr, *conn = prev;\n    while (right > 0) {\n        struct ListNode *third = curr->next;\n        curr->next = prev;\n        prev = curr;\n        curr = third;\n        right--;\n    }\n\n    if (conn != NULL) {\n        conn->next = prev;\n    } else {\n        head = prev;\n    }\n    tail->next = curr;\n    return head;\n}",
    "subPath": "",
    "fileName": "solution.c"
  },
  "cpp": {
    "language": "cpp",
    "code": "/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* reverseBetween(ListNode* head, int left, int right) {\n        if (head == NULL) return head;\n        ListNode *prev = NULL, *curr = head;\n        while(left > 1) {\n            prev = curr;\n            curr = curr->next;\n            left--;\n            right--;\n        }\n\n        ListNode* tail = curr, *conn = prev;\n        while (right > 0) {\n            ListNode *third = curr->next;\n            curr->next = prev;\n            prev = curr;\n            curr = third;\n            right--;\n        }\n\n        if (conn != NULL) {\n            conn->next = prev;\n        } else {\n            head = prev;\n        }\n        tail->next = curr;\n        return head;\n    }\n};",
    "subPath": "",
    "fileName": "solution.cpp"
  },
  "java": {
    "language": "java",
    "code": "/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode reverseBetween(ListNode head, int left, int right) {\n        if (head == null) return head;\n        ListNode prev = null, curr = head;\n        while(left > 1) {\n            prev = curr;\n            curr = curr.next;\n            left--;\n            right--;\n        }\n\n        ListNode tail = curr, conn = prev;\n        while(right > 0) {\n            ListNode third = curr.next;\n            curr.next = prev;\n            prev = curr;\n            curr = third;\n            right--;\n        }\n\n        if (conn != null) {\n            conn.next = prev;\n        } else {\n            head = prev;\n        }\n        tail.next = curr;\n        return head;\n    }\n}",
    "subPath": "",
    "fileName": "solution.java"
  }
}