{
  "accounts_java": {
    "language": "java",
    "code": "// For simplicity, we are not defining getter and setter functions. The reader can\n// assume that all class attributes are private and accessed through their respective\n// public getter method and modified only through their public setter method.\n\npublic class Account {\n  private String id;\n  private String password;\n  private AccountStatus status;\n\n  public boolean resetPassword();\n}\n\npublic abstract class Person {\n  private String name;\n  private Address address;\n  private String email;\n  private String phone;\n\n  private Account account;\n}\n\npublic class Customer extends Person {\n  public boolean makeBooking(Booking booking);\n  public List<Booking> getBookings();\n}\n\npublic class Admin extends Person {\n  public boolean addMovie(Movie movie);\n  public boolean addShow(Show show);\n  public boolean blockUser(Customer customer);\n}\n\npublic class FrontDeskOfficer extends Person {\n  public boolean createBooking(Booking booking);\n}\n\npublic class Guest {\n  public bool registerAccount();\n}",
    "subPath": "accounts",
    "fileName": "solution.java"
  },
  "accounts_py": {
    "language": "py",
    "code": "# For simplicity, we are not defining getter and setter functions. The reader can\n# assume that all class attributes are private and accessed through their respective\n# public getter methods and modified only through their public methods function.\n\n\nclass Account:\n  def __init__(self, id, password, status=AccountStatus.Active):\n    self.__id = id\n    self.__password = password\n    self.__status = status\n\n  def reset_password(self):\n    None\n\n\n# from abc import ABC, abstractmethod\nclass Person(ABC):\n  def __init__(self, name, address, email, phone, account):\n    self.__name = name\n    self.__address = address\n    self.__email = email\n    self.__phone = phone\n    self.__account = account\n\n\nclass Customer(Person):\n  def make_booking(self, booking):\n    None\n\n  def get_bookings(self):\n    None\n\n\nclass Admin(Person):\n  def add_movie(self, movie):\n    None\n\n  def add_show(self, show):\n    None\n\n  def block_user(self, customer):\n    None\n\n\nclass FrontDeskOfficer(Person):\n  def create_booking(self, booking):\n    None\n\n\nclass Guest:\n  def register_account(self):\n    None",
    "subPath": "accounts",
    "fileName": "solution.py"
  },
  "booking_java": {
    "language": "java",
    "code": "public class Booking {\n  private String bookingNumber;\n  private int numberOfSeats;\n  private Date createdOn;\n  private BookingStatus status;\n\n  private Show show;\n  private List<ShowSeat> seats;\n  private Payment payment;\n\n  public boolean makePayment(Payment payment);\n  public boolean cancel();\n  public boolean assignSeats(List<ShowSeat> seats);\n}\n\npublic class ShowSeat extends CinemaHallSeat{\n  private int showSeatId;\n  private boolean isReserved;\n  private double price;\n}\n\npublic class Payment {\n  private double amount;\n  private Date createdOn;\n  private int transactionId;\n  private PaymentStatus status;\n}",
    "subPath": "booking",
    "fileName": "solution.java"
  },
  "booking_py": {
    "language": "py",
    "code": "class Booking:\n  def __init__(self, booking_number, number_of_seats, status, show, show_seats, payment):\n    self.__booking_number = booking_number\n    self.__number_of_seats = number_of_seats\n    self.__created_on = datetime.date.today()\n    self.__status = status\n    self.__show = show\n    self.__seats = show_seats\n    self.__payment = payment\n\n  def make_payment(self, payment):\n    None\n\n  def cancel(self):\n    None\n\n  def assign_seats(self, seats):\n    None\n\n\nclass ShowSeat(CinemaHallSeat):\n  def __init__(self, id, is_reserved, price):\n    self.__show_seat_id = id\n    self.__is_reserved = is_reserved\n    self.__price = price\n\n\nclass Payment:\n  def __init__(self, amount, transaction_id, payment_status):\n    self.__amount = amount\n    self.__created_on = datetime.date.today()\n    self.__transaction_id = transaction_id\n    self.__status = payment_status",
    "subPath": "booking",
    "fileName": "solution.py"
  },
  "cinema_java": {
    "language": "java",
    "code": "public class City {\n  private String name;\n  private String state;\n  private String zipCode;\n}\n\npublic class Cinema {\n  private String name;\n  private int totalCinemaHalls;\n  private Address location;\n\n  private List<CinemaHall> halls;\n}\n\npublic class CinemaHall {\n  private String name;\n  private int totalSeats;\n\n  private List<CinemaHallSeat> seats;\n  private List<Show> shows;\n}",
    "subPath": "cinema",
    "fileName": "solution.java"
  },
  "cinema_py": {
    "language": "py",
    "code": "class City:\n  def __init__(self, name, state, zip_code):\n    self.__name = name\n    self.__state = state\n    self.__zip_code = zip_code\n\n\nclass Cinema:\n  def __init__(self, name, total_cinema_halls, address, halls):\n    self.__name = name\n    self.__total_cinema_halls = total_cinema_halls\n    self.__location = address\n\n    self.__halls = halls\n\n\nclass CinemaHall:\n  def __init__(self, name, total_seats, seats, shows):\n    self.__name = name\n    self.__total_seats = total_seats\n\n    self.__seats = seats\n    self.__shows = shows",
    "subPath": "cinema",
    "fileName": "solution.py"
  },
  "concurrency_java": {
    "language": "java",
    "code": "import java.sql.DriverManager;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.sql.ResultSet;\n\npublic class Customer extends Person {\n\n  public boolean makeBooking(Booking booking) {\n    List<ShowSeat> seats = booking.getSeats();\n    Integer seatIds[] = new Integer[seats.size()];\n    int index = 0;\n    for(ShowSeat seat : seats) {\n      seatIds[index++] = seat.getShowSeatId();\n    }\n\n    Connection dbConnection = null;\n    try {\n      dbConnection = getDBConnection();\n      dbConnection.setAutoCommit(false);\n      // ‘Serializable’ is the highest isolation level and guarantees safety from\n      // Dirty, Nonrepeatable, and Phantoms reads\n      dbConnection.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);\n\n      Statement st = dbConnection.createStatement();\n      String selectSQL = \"Select * From ShowSeat where ShowID=? && ShowSeatID in (?) && isReserved=0\";\n      PreparedStatement preparedStatement = dbConnection.prepareStatement(selectSQL);\n      preparedStatement.setInt(1, booking.getShow().getShowId());\n      Array array = dbConnection.createArrayOf(\"INTEGER\", seatIds);\n      preparedStatement.setArray(2, array);\n\n      ResultSet rs = preparedStatement.executeQuery();\n      // With TRANSACTION_SERIALIZABLE all the read rows will have the write lock, so we can\n      // safely assume that no one else is modifying them.\n      if (rs.next()) {\n        rs.last(); // move to the last row, to calculate the row count\n        int rowCount = rs.getRow();\n        // check if we have expected number of rows, if not, this means another process is\n        // trying to process at least one of the same row, if that is the case we\n        // should not process this booking.\n        if(rowCount == seats.size()) {\n          // update ShowSeat table...\n          // update Booking table ...\n          dbConnection.commit();\n          return true;\n        }\n      }\n    } catch (SQLException e) {\n      dbConnection.rollback();\n      System.out.println(e.getMessage());\n    }\n    return false;\n  }\n}",
    "subPath": "concurrency",
    "fileName": "solution.java"
  },
  "concurrency_sql": {
    "language": "sql",
    "code": "SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;\n \nBEGIN TRANSACTION;\n \n    -- Suppose we intend to reserve three seats (IDs: 54, 55, 56) for ShowID=99 \n    Select * From ShowSeat where ShowID=99 && ShowSeatID in (54, 55, 56) && isReserved=0 \n \n    -- if the number of rows returned by the above statement is NOT three, we can return failure to the user.\n    update ShowSeat table...\n    update Booking table ...\n \nCOMMIT TRANSACTION;",
    "subPath": "concurrency",
    "fileName": "solution.sql"
  },
  "enums_java": {
    "language": "java",
    "code": "public enum BookingStatus {\n    REQUESTED, PENDING, CONFIRMED, CHECKED_IN, CANCELED, ABANDONED\n}\n  \npublic enum SeatType {\n    REGULAR, PREMIUM, ACCESSIBLE, SHIPPED, EMERGENCY_EXIT, OTHER\n}\n\npublic enum AccountStatus {\n    ACTIVE, BLOCKED, BANNED, COMPROMISED, ARCHIVED, UNKNOWN\n}\n\npublic enum PaymentStatus {\n    UNPAID, PENDING, COMPLETED, FILLED, DECLINED, CANCELLED, ABANDONED, SETTLING, SETTLED, REFUNDED\n}\n\npublic class Address {\n    private String streetAddress;\n    private String city;\n    private String state;\n    private String zipCode;\n    private String country;\n}",
    "subPath": "enums",
    "fileName": "solution.java"
  },
  "enums_py": {
    "language": "py",
    "code": "class BookingStatus(Enum):\n  REQUESTED, PENDING, CONFIRMED, CHECKED_IN, CANCELED, ABANDONED = 1, 2, 3, 4, 5, 6\n\n\nclass SeatType(Enum):\n  REGULAR, PREMIUM, ACCESSIBLE, SHIPPED, EMERGENCY_EXIT, OTHER = 1, 2, 3, 4, 5, 6\n\n\nclass AccountStatus(Enum):\n  ACTIVE, BLOCKED, BANNED, COMPROMISED, ARCHIVED, UNKNOWN = 1, 2, 3, 4, 5, 6\n\n\nclass PaymentStatus(Enum):\n  UNPAID, PENDING, COMPLETED, FILLED, DECLINED, CANCELLED, ABANDONED, SETTLING, SETTLED, REFUNDED = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n\n\nclass Address:\n  def __init__(self, street, city, state, zip_code, country):\n    self.__street_address = street\n    self.__city = city\n    self.__state = state\n    self.__zip_code = zip_code\n    self.__country = country",
    "subPath": "enums",
    "fileName": "solution.py"
  },
  "search_java": {
    "language": "java",
    "code": "public interface Search {\n  public List<Movie> searchByTitle(String title);\n  public List<Movie> searchByLanguage(String language);\n  public List<Movie> searchByGenre(String genre);\n  public List<Movie> searchByReleaseDate(Date relDate);\n  public List<Movie> searchByCity(String cityName);\n}\n\npublic class Catalog implements Search {\n   HashMap<String, List<Movie>> movieTitles;\n   HashMap<String, List<Movie>> movieLanguages;\n   HashMap<String, List<Movie>> movieGenres;\n   HashMap<Date, List<Movie>> movieReleaseDates;\n   HashMap<String, List<Movie>> movieCities;\n\n  public List<Movie> searchByTitle(String title) {\n    return movieTitles.get(title);\n  }\n\n  public List<Movie> searchByLanguage(String language) {\n    return movieLanguages.get(language);\n  }\n\n  //...\n\n  public List<Movie> searchByCity(String cityName) {\n    return movieCities.get(cityName);\n  }\n}",
    "subPath": "search",
    "fileName": "solution.java"
  },
  "search_py": {
    "language": "py",
    "code": "from abc import ABC, abstractmethod\n\nclass Search(ABC):\n  def search_by_title(self, title):\n    None\n\n  def search_by_language(self, language):\n    None\n\n  def search_by_genre(self, genre):\n    None\n\n  def search_by_release_date(self, rel_date):\n    None\n\n  def search_by_city(self, city_name):\n    None\n\n\nclass Catalog(Search):\n  def __init__(self):\n    self.__movie_titles = {}\n    self.__movie_languages = {}\n    self.__movie_genres = {}\n    self.__movie_release_dates = {}\n    self.__movie_cities = {}\n\n    def search_by_title(self, title):\n      return self.__movie_titles.get(title)\n\n    def search_by_language(self, language):\n      return self.__movie_languages.get(language)\n\n    # ...\n\n    def search_by_city(self, city_name):\n      return self.__movie_cities.get(city_name)",
    "subPath": "search",
    "fileName": "solution.py"
  },
  "show_java": {
    "language": "java",
    "code": "public class Show {\n  private int showId;\n  private Date createdOn;\n  private Date startTime;\n  private Date endTime;\n  private CinemaHall playedAt;\n  private Movie movie;\n}\n\npublic class Movie {\n  private String title;\n  private String description;\n  private int durationInMins;\n  private String language;\n  private Date releaseDate;\n  private String country;\n  private String genre;\n  private Admin movieAddedBy;\n\n  private List<Show> shows;\n  public List<Show> getShows();\n}",
    "subPath": "show",
    "fileName": "solution.java"
  },
  "show_py": {
    "language": "py",
    "code": "class Show:\n  def __init__(self, id, played_at, movie, start_time, end_time):\n    self.__show_id = id\n    self.__created_on = datetime.date.today()\n    self.__start_time = start_time\n    self.__end_time = end_time\n    self.__played_at = played_at\n    self.__movie = movie\n\n\nclass Movie:\n  def __init__(self, title, description, duration_in_mins, language, release_date, country, genre, added_by):\n    self.__title = title\n    self.__description = description\n    self.__duration_in_mins = duration_in_mins\n    self.__language = language\n    self.__release_date = release_date\n    self.__country = country\n    self.__genre = genre\n    self.__movie_added_by = added_by\n\n    self.__shows = []\n\n  def get_shows(self):\n    None",
    "subPath": "show",
    "fileName": "solution.py"
  }
}