{
  "library-management": {
    "id": "library-management",
    "title": "Design a Library Management System",
    "difficulty": "medium",
    "companies": [],
    "topics": [],
    "langs": [],
    "content": "---\ntitle: \"Design a Library Management System\"\nauthor: \"Rajat Srivastava\"\ncategories: system-designs\ntags: [system-design, hld, lld]\ndifficulty: medium\n---\n\nA Library Management System is a software built to handle the primary housekeeping functions of a library. Libraries rely on library management systems to manage asset collections as well as relationships with their members. Library management systems help libraries keep track of the books and their checkouts, as well as members’ subscriptions and profiles.\n\nLibrary management systems also involve maintaining the database for entering new books and recording books that have been borrowed with their respective due dates.\n\n---\n\n## System Requirements\n\nWe will focus on the following set of requirements while designing the Library Management System:\n\n1. Any library member should be able to search books by their title, author, subject category as well by the publication date.\n2. Each book will have a unique identification number and other details including a rack number which will help to physically locate the book.\n3. There could be more than one copy of a book, and library members should be able to check-out and reserve any copy. We will call each copy of a book, a book item.\n4. The system should be able to retrieve information like who took a particular book or what are the books checked-out by a specific library member.\n5. There should be a maximum limit (5) on how many books a member can check-out.\n6. There should be a maximum limit (10) on how many days a member can keep a book.\n7. The system should be able to collect fines for books returned after the due date.\n8. Members should be able to reserve books that are not currently available.\n9. The system should be able to send notifications whenever the reserved books become available, as well as when the book is not returned within the due date.\n10. Each book and member card will have a unique barcode. The system will be able to read barcodes from books and members’ library cards.\n\n---\n## Use Case Diagrams\n\nWe have three main actors in our system:\n\n- **Librarian:** Mainly responsible for adding and modifying books, book items, and users. The Librarian can also issue, reserve, and return book items.\n- **Member:** All members can search the catalog, as well as check-out, reserve, renew, and return a book.\n- **System:** Mainly responsible for sending notifications for overdue books, canceled reservations, etc.\n\nHere are the top use cases of the Library Management System:\n\n- **Add/Remove/Edit book:** To add, remove or modify a book or book item.\n- **Search catalog:** To search books by title, author, subject or publication date.\n- **Register new account/cancel membership:** To add a new member or cancel the membership of an existing member.\n- **Check-out book:** To borrow a book from the library.\n- **Reserve book:** To reserve a book which is not currently available.\n- **Renew a book:** To reborrow an already checked-out book.\n- **Return a book:** To return a book to the library which was issued to a member.\n\n<MdxImage \n  src=\"design/library-management/use-case.png\" \n  alt=\"Use Case Diagram for Library Management System\"\n/>\n\n---\n## Class Diagrams\nHere are the main classes of our Library Management System:\n\n- **Library:** The central part of the organization for which this software has been designed. It has attributes like ‘Name’ to distinguish it from any other libraries and ‘Address’ to describe its location.\n- **Book:** The basic building block of the system. Every book will have ISBN, Title, Subject, Publishers, etc.\n- **BookItem:** Any book can have multiple copies, each copy will be considered a book item in our system. Each book item will have a unique barcode.\n- **Account:** We will have two types of accounts in the system, one will be a general member, and the other will be a librarian.\n- **LibraryCard:** Each library user will be issued a library card, which will be used to identify users while issuing or returning books.\n- **BookReservation:** Responsible for managing reservations against book items.\n- **BookLending:** Manage the checking-out of book items.\n- **Catalog:** Catalogs contain list of books sorted on certain criteria. Our system will support searching through four catalogs: Title, Author, Subject, and Publish-date.\n- **Fine:** This class will be responsible for calculating and collecting fines from library members.\n- **Author:** This class will encapsulate a book author.\n- **Rack:** Books will be placed on racks. Each rack will be identified by a rack number and will have a location identifier to describe the physical location of the rack in the library.\n- **Notification:** This class will take care of sending notifications to library members.\n\n<MdxImage \n  src=\"design/library-management/class-diagram.png\" \n  alt=\"Class Diagram for Library Management System\"\n/>\n\n<MdxImage \n  src=\"design/concepts/uml.svg\" \n  alt=\"UML Diagram for Library Management System\"\n/>\n\n---\n## Activity diagrams\n\n- **Check-out a book:** Any library member or librarian can perform this activity. Here are the set of steps to check-out a book:\n  1. Verify member eligibility and check book availability\n  2. Scan book and member card barcodes\n  3. Update book status to \"checked out\"\n  4. Set due date (default 10 days)\n  5. Create lending record\n  6. Send confirmation to member\n\n<MdxImage \n  src=\"design/library-management/activity-checkout.svg\" \n  alt=\"Activity Diagram for Library Management System\"\n/>\n\n- **Return a book:** Any library member or librarian can perform this activity. The system will collect fines from members if they return books after the due date. Here are the steps for returning a book:\n  1. Scan book barcode to identify the book\n  2. Verify the book is checked out\n  3. Check if book is overdue\n  4. Calculate and collect fine if applicable\n  5. Update book status to \"available\"\n  6. Close lending record\n  7. Send confirmation to member\n\n<MdxImage \n  src=\"design/library-management/activity-return.png\" \n  alt=\"Activity Diagram for Library Management System\"\n/>\n\n- **Renew a book:** While renewing (re-issuing) a book, the system will check for fines and see if any other member has not reserved the same book, in that case the book item cannot be renewed. Here are the different steps for renewing a book:\n  1. Verify member and book information\n  2. Check if book has pending reservations\n  3. Check for outstanding fines\n  4. Extend due date if renewal is allowed\n  5. Update lending record\n  6. Send confirmation to member\n\n<MdxImage \n  src=\"design/library-management/activity-renew.svg\" \n  alt=\"Activity Diagram for Movie Booking System\"\n/>\n\n---\n## Code\nHere is the code for the use cases mentioned above: 1) Check-out a book, 2) Return a book, and 3) Renew a book.\n\nNote: This code only focuses on the design part of the use cases. Since you are not required to write a fully executable code in an interview, you can assume parts of the code to interact with the database, payment system, etc.\n\n### Enums and Constants\n- **BookStatus:** Available, Reserved, Loaned, Lost\n- **BookFormat:** Hardcover, Paperback, AudioBook, Ebook, Newspaper, Magazine, Journal\n- **AccountStatus:** Active, Closed, Canceled, Blacklisted, None\n- **ReservationStatus:** Waiting, Pending, Canceled, None\n- **Address:** Basic address information for members\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/library-management/enums\"\n/>\n\n\n### Account Management\n- **Account:** Base class for all system users\n- **Member:** Library members who can borrow books\n- **Librarian:** Staff members with administrative privileges\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/library-management/accounts\"\n/>\n\n### Core Library Operations\n- **BookReservation:** Manages book reservations\n- **BookLending:** Handles the lending process\n- **Fine:** Calculates and manages overdue fines\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/library-management/reservation\"\n/>\n\n### Book and Catalog Management\n- **Book:** Represents a book in the library\n- **BookItem:** Individual copies of books\n- **Catalog:** Implements search functionality across different criteria\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/library-management/books\"\n/>\n\n### Search Interface\nThe system supports searching by:\n- Title\n- Author\n- Subject\n- Publication date\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/library-management/search\"\n/>\n",
    "body": "A Library Management System is a software built to handle the primary housekeeping functions of a library. Libraries rely on library management systems to manage asset collections as well as relationships with their members. Library management systems help libraries keep track of the books and their checkouts, as well as members’ subscriptions and profiles.\n\nLibrary management systems also involve maintaining the database for entering new books and recording books that have been borrowed with their respective due dates.\n\n---\n\n## System Requirements\n\nWe will focus on the following set of requirements while designing the Library Management System:\n\n1. Any library member should be able to search books by their title, author, subject category as well by the publication date.\n2. Each book will have a unique identification number and other details including a rack number which will help to physically locate the book.\n3. There could be more than one copy of a book, and library members should be able to check-out and reserve any copy. We will call each copy of a book, a book item.\n4. The system should be able to retrieve information like who took a particular book or what are the books checked-out by a specific library member.\n5. There should be a maximum limit (5) on how many books a member can check-out.\n6. There should be a maximum limit (10) on how many days a member can keep a book.\n7. The system should be able to collect fines for books returned after the due date.\n8. Members should be able to reserve books that are not currently available.\n9. The system should be able to send notifications whenever the reserved books become available, as well as when the book is not returned within the due date.\n10. Each book and member card will have a unique barcode. The system will be able to read barcodes from books and members’ library cards.\n\n---\n## Use Case Diagrams\n\nWe have three main actors in our system:\n\n- **Librarian:** Mainly responsible for adding and modifying books, book items, and users. The Librarian can also issue, reserve, and return book items.\n- **Member:** All members can search the catalog, as well as check-out, reserve, renew, and return a book.\n- **System:** Mainly responsible for sending notifications for overdue books, canceled reservations, etc.\n\nHere are the top use cases of the Library Management System:\n\n- **Add/Remove/Edit book:** To add, remove or modify a book or book item.\n- **Search catalog:** To search books by title, author, subject or publication date.\n- **Register new account/cancel membership:** To add a new member or cancel the membership of an existing member.\n- **Check-out book:** To borrow a book from the library.\n- **Reserve book:** To reserve a book which is not currently available.\n- **Renew a book:** To reborrow an already checked-out book.\n- **Return a book:** To return a book to the library which was issued to a member.\n\n<MdxImage \n  src=\"design/library-management/use-case.png\" \n  alt=\"Use Case Diagram for Library Management System\"\n/>\n\n---\n## Class Diagrams\nHere are the main classes of our Library Management System:\n\n- **Library:** The central part of the organization for which this software has been designed. It has attributes like ‘Name’ to distinguish it from any other libraries and ‘Address’ to describe its location.\n- **Book:** The basic building block of the system. Every book will have ISBN, Title, Subject, Publishers, etc.\n- **BookItem:** Any book can have multiple copies, each copy will be considered a book item in our system. Each book item will have a unique barcode.\n- **Account:** We will have two types of accounts in the system, one will be a general member, and the other will be a librarian.\n- **LibraryCard:** Each library user will be issued a library card, which will be used to identify users while issuing or returning books.\n- **BookReservation:** Responsible for managing reservations against book items.\n- **BookLending:** Manage the checking-out of book items.\n- **Catalog:** Catalogs contain list of books sorted on certain criteria. Our system will support searching through four catalogs: Title, Author, Subject, and Publish-date.\n- **Fine:** This class will be responsible for calculating and collecting fines from library members.\n- **Author:** This class will encapsulate a book author.\n- **Rack:** Books will be placed on racks. Each rack will be identified by a rack number and will have a location identifier to describe the physical location of the rack in the library.\n- **Notification:** This class will take care of sending notifications to library members.\n\n<MdxImage \n  src=\"design/library-management/class-diagram.png\" \n  alt=\"Class Diagram for Library Management System\"\n/>\n\n<MdxImage \n  src=\"design/concepts/uml.svg\" \n  alt=\"UML Diagram for Library Management System\"\n/>\n\n---\n## Activity diagrams\n\n- **Check-out a book:** Any library member or librarian can perform this activity. Here are the set of steps to check-out a book:\n  1. Verify member eligibility and check book availability\n  2. Scan book and member card barcodes\n  3. Update book status to \"checked out\"\n  4. Set due date (default 10 days)\n  5. Create lending record\n  6. Send confirmation to member\n\n<MdxImage \n  src=\"design/library-management/activity-checkout.svg\" \n  alt=\"Activity Diagram for Library Management System\"\n/>\n\n- **Return a book:** Any library member or librarian can perform this activity. The system will collect fines from members if they return books after the due date. Here are the steps for returning a book:\n  1. Scan book barcode to identify the book\n  2. Verify the book is checked out\n  3. Check if book is overdue\n  4. Calculate and collect fine if applicable\n  5. Update book status to \"available\"\n  6. Close lending record\n  7. Send confirmation to member\n\n<MdxImage \n  src=\"design/library-management/activity-return.png\" \n  alt=\"Activity Diagram for Library Management System\"\n/>\n\n- **Renew a book:** While renewing (re-issuing) a book, the system will check for fines and see if any other member has not reserved the same book, in that case the book item cannot be renewed. Here are the different steps for renewing a book:\n  1. Verify member and book information\n  2. Check if book has pending reservations\n  3. Check for outstanding fines\n  4. Extend due date if renewal is allowed\n  5. Update lending record\n  6. Send confirmation to member\n\n<MdxImage \n  src=\"design/library-management/activity-renew.svg\" \n  alt=\"Activity Diagram for Movie Booking System\"\n/>\n\n---\n## Code\nHere is the code for the use cases mentioned above: 1) Check-out a book, 2) Return a book, and 3) Renew a book.\n\nNote: This code only focuses on the design part of the use cases. Since you are not required to write a fully executable code in an interview, you can assume parts of the code to interact with the database, payment system, etc.\n\n### Enums and Constants\n- **BookStatus:** Available, Reserved, Loaned, Lost\n- **BookFormat:** Hardcover, Paperback, AudioBook, Ebook, Newspaper, Magazine, Journal\n- **AccountStatus:** Active, Closed, Canceled, Blacklisted, None\n- **ReservationStatus:** Waiting, Pending, Canceled, None\n- **Address:** Basic address information for members\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/library-management/enums\"\n/>\n\n\n### Account Management\n- **Account:** Base class for all system users\n- **Member:** Library members who can borrow books\n- **Librarian:** Staff members with administrative privileges\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/library-management/accounts\"\n/>\n\n### Core Library Operations\n- **BookReservation:** Manages book reservations\n- **BookLending:** Handles the lending process\n- **Fine:** Calculates and manages overdue fines\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/library-management/reservation\"\n/>\n\n### Book and Catalog Management\n- **Book:** Represents a book in the library\n- **BookItem:** Individual copies of books\n- **Catalog:** Implements search functionality across different criteria\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/library-management/books\"\n/>\n\n### Search Interface\nThe system supports searching by:\n- Title\n- Author\n- Subject\n- Publication date\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/library-management/search\"\n/>\n",
    "solutions": {}
  },
  "movie-booking": {
    "id": "movie-booking",
    "title": "Design a Movie Ticket Booking System",
    "difficulty": "medium",
    "companies": [],
    "topics": [],
    "langs": [],
    "content": "---\ntitle: \"Design a Movie Ticket Booking System\"\nauthor: \"Rajat Srivastava\"\ncategories: system-designs\ntags: [system-design, hld, lld]\ndescription: \"System design concepts and patterns\"\n---\n\nAn online movie ticket booking system facilitates the purchasing of movie tickets to its customers. E-ticketing systems allow customers to browse through movies currently playing and book seats, anywhere and anytime.\n\n---\n## System Requirements\nOur ticket booking service should meet the following requirements:\n1. It should be able to list the cities where affiliate cinemas are located.\n2. Each cinema can have multiple halls and each hall can run one movie show at a time.\n3. Each Movie will have multiple shows.\n4. Customers should be able to search movies by their title, language, genre, release date, and city name.\n5. Once the customer selects a movie, the service should display the cinemas running that movie and its available shows.\n6. The customer should be able to select a show at a particular cinema and book their tickets.\n7. The service should show the customer the seating arrangement of the cinema hall. The customer should be able to select multiple seats according to their preference.\n8. The customer should be able to distinguish between available seats and booked ones.\n9. The system should send notifications whenever there is a new movie, as well as when a booking is made or canceled.\n10. Customers of our system should be able to pay with credit cards or cash.\n11. The system should ensure that no two customers can reserve the same seat.\n12. Customers should be able to add a discount coupon to their payment.\n\n---\n## Use Case Diagrams\nWe have five main Actors in our system:\n\n- **Admin:** Responsible for adding new movies and their shows, canceling any movie or show, blocking/unblocking customers, etc.\n- **FrontDeskOfficer:** Can book/cancel tickets.\n- **Customer:** Can view movie schedules, book, and cancel tickets.\n- **Guest:** All guests can search movies but to book seats they have to become a registered member.\n- **System:** Mainly responsible for sending notifications for new movies, bookings, cancellations, etc.\n\nHere are the top use cases of the Movie Ticket Booking System:\n\n- **Search movies:** To search movies by title, genre, language, release date, and city name.\n- **Create/Modify/View booking:** To book a movie show ticket, cancel it or view details about the show.\n- **Make payment for booking:** To pay for the booking.\n- **Add a coupon to the payment:** To add a discount coupon to the payment.\n- **Assign Seat:** Customers will be shown a seat map to let them select seats for their booking.\n- **Refund payment:** Upon cancellation, customers will be refunded the payment amount as long as the cancellation occurs within the allowed time frame.\n\n<MdxImage \n  src=\"design/movie-booking/use-case.svg\" \n  alt=\"Usecase Diagram for Movie Booking System\"\n/>\n\n---\n## Class Diagrams\nHere are the main classes of the Movie Ticket Booking System:\n\n- **Account:** Admin will be able to add/remove movies and shows, as well as block/unblock accounts. Customers can search for movies and make bookings for shows. FrontDeskOffice can book tickets for movie shows\n- **Guest:** Guests can search and view movies descriptions. To make a booking for a show they have to become a registered member.\n- **Cinema:** The main part of the organization for which this software has been designed. It has attributes like ‘name’ to distinguish it from other cinemas.\n- **CinemaHall:** Each cinema will have multiple halls containing multiple seats.\n- **City:** Each city can have multiple cinemas.\n- **Movie:** The main entity of the system. Movies have attributes like title, description, language, genre, release date, city name, etc.\n- **Show:** Each movie can have many shows; each show will be played in a cinema hall.\n- **CinemaHallSeat:** Each cinema hall will have many seats.\n- **ShowSeat:** Each ShowSeat will correspond to a movie Show and a CinemaHallSeat. Customers will make a booking against a ShowSeat.\n- **Booking:** A booking is against a movie show and has attributes like a unique booking number, number of seats, and status.\n- **Payment:** Responsible for collecting payments from customers.\n- **Notification:** Will take care of sending notifications to customers.\n\n<MdxImage \n  src=\"design/movie-booking/class-diagram.png\" \n  alt=\"Class Diagram for Movie Booking System\"\n/>\n\n<MdxImage \n  src=\"design/concepts/uml.svg\" \n  alt=\"Uml\"\n/>\n\n---\n## Activity Diagram\n**Make a booking:** Any customer can perform this activity. Here are the steps to book a ticket for a show:\n\n<MdxImage \n  src=\"design/movie-booking/activity-book.svg\" \n  alt=\"Activity Diagram for Movie Booking System\"\n/>\n\n**Cancel a booking:** Customer can cancel their bookings. Here are the steps to cancel a booking:\n\n<MdxImage \n  src=\"design/movie-booking/activity-cancel.svg\" \n  alt=\"Activity Diagram for Movie Booking System\"\n/>\n\n---\n## Code\nHere is the high-level definition for the classes described above.\n\n- **Enums and Constants:** Here are the required enums, data types, and constants:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/movie-booking/enums\"\n/>\n\n- **Account, Customer, Admin, FrontDeskOfficer, and Guest:** These classes represent the different people that interact with our system:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/movie-booking/accounts\"\n/>\n\n- **Show and Movie:**  A movie will have many shows:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/movie-booking/show\"\n/>\n\n- **Booking, ShowSeat, and Payment:** Customers will reserve seats with a booking and make a payment:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/movie-booking/booking\"\n/>\n\n- **City, Cinema, and CinemaHall:** Each city can have many cinemas and each cinema can have many cinema halls:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/movie-booking/cinema\"\n/>\n\n- **Search interface and Catalog:** Catalog will implement Search to facilitate searching of products.\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/movie-booking/search\"\n/>\n\n---\n## Concurrency\n**How to handle concurrency; such that no two users are able to book the same seat?**\nWe can use transactions in SQL databases to avoid any clashes. For example, if we are using SQL server we can utilize Transaction Isolation Levels to lock the rows before we update them. Note: within a transaction, if we read rows we get a write-lock on them so that they can’t be updated by anyone else. Here is the sample code:\n\n<MdxCodeTabs\n  langs={[\"sql\"]}\n  path=\"system-design/code/movie-booking/concurrency\"\n/>\n\n\n'Serializable' is the highest isolation level and guarantees safety from <MdxLink href=\"https://en.wikipedia.org/wiki/Isolation_(database_systems)#Dirty_reads\">Dirty Reads</MdxLink>, <MdxLink href=\"https://en.wikipedia.org/wiki/Isolation_(database_systems)#Non-repeatable_reads\">Nonrepeatable</MdxLink>, and <MdxLink href=\"https://en.wikipedia.org/wiki/Isolation_(database_systems)#Phantom_reads\">Phantoms reads</MdxLink>.\n\nOnce the above database transaction is successful, we can safely assume that the reservation has been marked successfully and no two customers will be able to reserve the same seat.\n\nHere is the sample Java code:\n\n<MdxCodeTabs\n  langs={[\"java\"]}\n  path=\"system-design/code/movie-booking/concurrency\"\n/>",
    "body": "An online movie ticket booking system facilitates the purchasing of movie tickets to its customers. E-ticketing systems allow customers to browse through movies currently playing and book seats, anywhere and anytime.\n\n---\n## System Requirements\nOur ticket booking service should meet the following requirements:\n1. It should be able to list the cities where affiliate cinemas are located.\n2. Each cinema can have multiple halls and each hall can run one movie show at a time.\n3. Each Movie will have multiple shows.\n4. Customers should be able to search movies by their title, language, genre, release date, and city name.\n5. Once the customer selects a movie, the service should display the cinemas running that movie and its available shows.\n6. The customer should be able to select a show at a particular cinema and book their tickets.\n7. The service should show the customer the seating arrangement of the cinema hall. The customer should be able to select multiple seats according to their preference.\n8. The customer should be able to distinguish between available seats and booked ones.\n9. The system should send notifications whenever there is a new movie, as well as when a booking is made or canceled.\n10. Customers of our system should be able to pay with credit cards or cash.\n11. The system should ensure that no two customers can reserve the same seat.\n12. Customers should be able to add a discount coupon to their payment.\n\n---\n## Use Case Diagrams\nWe have five main Actors in our system:\n\n- **Admin:** Responsible for adding new movies and their shows, canceling any movie or show, blocking/unblocking customers, etc.\n- **FrontDeskOfficer:** Can book/cancel tickets.\n- **Customer:** Can view movie schedules, book, and cancel tickets.\n- **Guest:** All guests can search movies but to book seats they have to become a registered member.\n- **System:** Mainly responsible for sending notifications for new movies, bookings, cancellations, etc.\n\nHere are the top use cases of the Movie Ticket Booking System:\n\n- **Search movies:** To search movies by title, genre, language, release date, and city name.\n- **Create/Modify/View booking:** To book a movie show ticket, cancel it or view details about the show.\n- **Make payment for booking:** To pay for the booking.\n- **Add a coupon to the payment:** To add a discount coupon to the payment.\n- **Assign Seat:** Customers will be shown a seat map to let them select seats for their booking.\n- **Refund payment:** Upon cancellation, customers will be refunded the payment amount as long as the cancellation occurs within the allowed time frame.\n\n<MdxImage \n  src=\"design/movie-booking/use-case.svg\" \n  alt=\"Usecase Diagram for Movie Booking System\"\n/>\n\n---\n## Class Diagrams\nHere are the main classes of the Movie Ticket Booking System:\n\n- **Account:** Admin will be able to add/remove movies and shows, as well as block/unblock accounts. Customers can search for movies and make bookings for shows. FrontDeskOffice can book tickets for movie shows\n- **Guest:** Guests can search and view movies descriptions. To make a booking for a show they have to become a registered member.\n- **Cinema:** The main part of the organization for which this software has been designed. It has attributes like ‘name’ to distinguish it from other cinemas.\n- **CinemaHall:** Each cinema will have multiple halls containing multiple seats.\n- **City:** Each city can have multiple cinemas.\n- **Movie:** The main entity of the system. Movies have attributes like title, description, language, genre, release date, city name, etc.\n- **Show:** Each movie can have many shows; each show will be played in a cinema hall.\n- **CinemaHallSeat:** Each cinema hall will have many seats.\n- **ShowSeat:** Each ShowSeat will correspond to a movie Show and a CinemaHallSeat. Customers will make a booking against a ShowSeat.\n- **Booking:** A booking is against a movie show and has attributes like a unique booking number, number of seats, and status.\n- **Payment:** Responsible for collecting payments from customers.\n- **Notification:** Will take care of sending notifications to customers.\n\n<MdxImage \n  src=\"design/movie-booking/class-diagram.png\" \n  alt=\"Class Diagram for Movie Booking System\"\n/>\n\n<MdxImage \n  src=\"design/concepts/uml.svg\" \n  alt=\"Uml\"\n/>\n\n---\n## Activity Diagram\n**Make a booking:** Any customer can perform this activity. Here are the steps to book a ticket for a show:\n\n<MdxImage \n  src=\"design/movie-booking/activity-book.svg\" \n  alt=\"Activity Diagram for Movie Booking System\"\n/>\n\n**Cancel a booking:** Customer can cancel their bookings. Here are the steps to cancel a booking:\n\n<MdxImage \n  src=\"design/movie-booking/activity-cancel.svg\" \n  alt=\"Activity Diagram for Movie Booking System\"\n/>\n\n---\n## Code\nHere is the high-level definition for the classes described above.\n\n- **Enums and Constants:** Here are the required enums, data types, and constants:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/movie-booking/enums\"\n/>\n\n- **Account, Customer, Admin, FrontDeskOfficer, and Guest:** These classes represent the different people that interact with our system:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/movie-booking/accounts\"\n/>\n\n- **Show and Movie:**  A movie will have many shows:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/movie-booking/show\"\n/>\n\n- **Booking, ShowSeat, and Payment:** Customers will reserve seats with a booking and make a payment:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/movie-booking/booking\"\n/>\n\n- **City, Cinema, and CinemaHall:** Each city can have many cinemas and each cinema can have many cinema halls:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/movie-booking/cinema\"\n/>\n\n- **Search interface and Catalog:** Catalog will implement Search to facilitate searching of products.\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/movie-booking/search\"\n/>\n\n---\n## Concurrency\n**How to handle concurrency; such that no two users are able to book the same seat?**\nWe can use transactions in SQL databases to avoid any clashes. For example, if we are using SQL server we can utilize Transaction Isolation Levels to lock the rows before we update them. Note: within a transaction, if we read rows we get a write-lock on them so that they can’t be updated by anyone else. Here is the sample code:\n\n<MdxCodeTabs\n  langs={[\"sql\"]}\n  path=\"system-design/code/movie-booking/concurrency\"\n/>\n\n\n'Serializable' is the highest isolation level and guarantees safety from <MdxLink href=\"https://en.wikipedia.org/wiki/Isolation_(database_systems)#Dirty_reads\">Dirty Reads</MdxLink>, <MdxLink href=\"https://en.wikipedia.org/wiki/Isolation_(database_systems)#Non-repeatable_reads\">Nonrepeatable</MdxLink>, and <MdxLink href=\"https://en.wikipedia.org/wiki/Isolation_(database_systems)#Phantom_reads\">Phantoms reads</MdxLink>.\n\nOnce the above database transaction is successful, we can safely assume that the reservation has been marked successfully and no two customers will be able to reserve the same seat.\n\nHere is the sample Java code:\n\n<MdxCodeTabs\n  langs={[\"java\"]}\n  path=\"system-design/code/movie-booking/concurrency\"\n/>",
    "solutions": {}
  },
  "online-shopping": {
    "id": "online-shopping",
    "title": "Design Amazon - Online Shopping System",
    "difficulty": "medium",
    "companies": [],
    "topics": [],
    "langs": [],
    "content": "---\ntitle: \"Design Amazon - Online Shopping System\"\nauthor: \"Rajat Srivastava\"\ncategories: system-designs\ntags: [system-design, hld, lld]\ndescription: \"System design concepts and patterns\"\n---\n\n<MdxLink href=\"https://amazon.com\">Amazon</MdxLink> is the world's largest online retailer. The company was originally a bookseller but has expanded to sell a wide variety of consumer goods and digital media. For the sake of this problem, we will focus on their online retail business where users can sell/buy their products.\n\n---\n## System Requirements\nWe will be designing a system with the following requirements:\n1. Users should be able to add new products to sell.\n2. Users should be able to search for products by their name or category.\n3. Users can search and view all the products, but they will have to become a registered member to buy a product.\n4. Users should be able to add/remove/modify product items in their shopping cart.\n5. Users can check out and buy items in the shopping cart.\n6. Users can rate and add a review for a product.\n7. The user should be able to specify a shipping address where their order will be delivered.\n8. Users can cancel an order if it has not shipped.\n9. Users should get notifications whenever there is a change in the order or shipping status.\n10. Users should be able to pay through credit cards or electronic bank transfer.\n11. Users should be able to track their shipment to see the current state of their order.\n\n---\n## Use Case Diagrams\nWe have four main Actors in our system:\n\n- **Admin:** Mainly responsible for account management and adding or modifying new product categories.\n- **Guest:** All guests can search the catalog, add/remove items to the shopping cart, as well as become registered members.\n- **Member:** Members can perform all the activities that guests can, in addition to which, they can place orders and add new products to sell.\n- **System:** Mainly responsible for sending notifications for orders and shipping updates.\n\nHere are the top use cases of the Online Shopping System:\n1. Add/update products; whenever a product is added or modified, we will update the catalog.\n2. Search for products by their name or category.\n3. Add/remove product items in the shopping cart.\n4. Check-out to buy product items in the shopping cart.\n5. Make a payment to place an order.\n6. Add a new product category.\n7. Send notifications to members with shipment updates.\n\n<MdxImage \n  src=\"design/online-shopping/use-case.svg\" \n  alt=\"Usecase Diagram for Online Shopping\"\n/>\n\n---\n## Class Diagrams\nHere are the descriptions of the different classes of our Online Shopping System:\n\n- **Account:** There are two types of registered accounts in the system: one will be an Admin, who is responsible for adding new product categories and blocking/unblocking members; the other, a Member, who can buy/sell products.\n- **Guest:** Guests can search for and view products, and add them in the shopping cart. To place an order they have to become a registered member.\n- **Catalog:** Users of our system can search for products by their name or category. This class will keep an index of all products for faster search.\n- **ProductCategory:** This will encapsulate the different categories of products, such as books, electronics, etc.\n- **Product:** This class will encapsulate the entity that the users of our system will be buying and selling. Each Product will belong to a ProductCategory.\n- **ProductReview:** Any registered member can add a review about a product.\n- **ShoppingCart:** Users will add product items that they intend to buy to the shopping cart.\n- **Item:** This class will encapsulate a product item that the users will be buying or placing in the shopping cart. For example, a pen could be a product and if there are 10 pens in the inventory, each of these 10 pens will be considered a product item.\n- **Order:** This will encapsulate a buying order to buy everything in the shopping cart.\n- **OrderLog:** Will keep a track of the status of orders, such as unshipped, pending, complete, canceled, etc.\n- **ShipmentLog:** Will keep a track of the status of shipments, such as pending, shipped, delivered, etc.\n- **Notification:** This class will take care of sending notifications to customers.\n- **Payment:** This class will encapsulate the payment for an order. Members can pay through credit card or electronic bank transfer.\n\n<MdxImage \n  src=\"design/online-shopping/class-diagram.png\" \n  alt=\"Class Diagram for Online Shopping\"\n/>\n\n<MdxImage \n  src=\"design/concepts/uml.svg\" \n  alt=\"Uml\"\n/>\n\n---\n## Activity Diagram\nFollowing is the activity diagram for a user performing online shopping:\n\n<MdxImage \n  src=\"design/online-shopping/activity.svg\" \n  alt=\"Activity Diagram for Online Shopping\"\n/>\n\n---\n## Sequence Diagram\n1. Here is the sequence diagram for searching from the catalog:\n\n<MdxImage \n  src=\"design/online-shopping/sequence-searching.svg\" \n  alt=\"Sequence Diagram for Online Shopping\"\n/>\n\n2. Here is the sequence diagram for adding an item to the shopping cart:\n\n<MdxImage \n  src=\"design/online-shopping/sequence-adding-items.svg\" \n  alt=\"Sequence Diagram for Online Shopping\"\n/>\n\n3. Here is the sequence diagram for checking out to place an order:\n\n<MdxImage \n  src=\"design/online-shopping/sequence-checkout.svg\" \n  alt=\"Sequence Diagram for Online Shopping\"\n/>\n\n---\n## Code\nHere is the high-level definition for the classes described above.\n\n- **Enums and Constants:** Here are the required enums, data types, and constants:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/online-shopping/enums\"\n/>\n\n- **Account, Customer, Admin, and Guest:** These classes represent different people that interact with our system:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/online-shopping/accounts\"\n/>\n\n- **ProductCategory, Product, and ProductReview:** Here are the classes related to a product:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/online-shopping/product\"\n/>\n\n- **ShoppingCart, Item, Order, and OrderLog:** Users will add items to the shopping cart and place an order to buy all the items in the cart.\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/online-shopping/cart\"\n/>\n\n- **Shipment, ShipmentLog, and Notification:** After successfully placing an order, a shipment record will be created:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/online-shopping/shipment\"\n/>\n\n- **Search interface and Catalog:** Catalog will implement Search to facilitate searching of products.\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/online-shopping/search\"\n/>",
    "body": "<MdxLink href=\"https://amazon.com\">Amazon</MdxLink> is the world's largest online retailer. The company was originally a bookseller but has expanded to sell a wide variety of consumer goods and digital media. For the sake of this problem, we will focus on their online retail business where users can sell/buy their products.\n\n---\n## System Requirements\nWe will be designing a system with the following requirements:\n1. Users should be able to add new products to sell.\n2. Users should be able to search for products by their name or category.\n3. Users can search and view all the products, but they will have to become a registered member to buy a product.\n4. Users should be able to add/remove/modify product items in their shopping cart.\n5. Users can check out and buy items in the shopping cart.\n6. Users can rate and add a review for a product.\n7. The user should be able to specify a shipping address where their order will be delivered.\n8. Users can cancel an order if it has not shipped.\n9. Users should get notifications whenever there is a change in the order or shipping status.\n10. Users should be able to pay through credit cards or electronic bank transfer.\n11. Users should be able to track their shipment to see the current state of their order.\n\n---\n## Use Case Diagrams\nWe have four main Actors in our system:\n\n- **Admin:** Mainly responsible for account management and adding or modifying new product categories.\n- **Guest:** All guests can search the catalog, add/remove items to the shopping cart, as well as become registered members.\n- **Member:** Members can perform all the activities that guests can, in addition to which, they can place orders and add new products to sell.\n- **System:** Mainly responsible for sending notifications for orders and shipping updates.\n\nHere are the top use cases of the Online Shopping System:\n1. Add/update products; whenever a product is added or modified, we will update the catalog.\n2. Search for products by their name or category.\n3. Add/remove product items in the shopping cart.\n4. Check-out to buy product items in the shopping cart.\n5. Make a payment to place an order.\n6. Add a new product category.\n7. Send notifications to members with shipment updates.\n\n<MdxImage \n  src=\"design/online-shopping/use-case.svg\" \n  alt=\"Usecase Diagram for Online Shopping\"\n/>\n\n---\n## Class Diagrams\nHere are the descriptions of the different classes of our Online Shopping System:\n\n- **Account:** There are two types of registered accounts in the system: one will be an Admin, who is responsible for adding new product categories and blocking/unblocking members; the other, a Member, who can buy/sell products.\n- **Guest:** Guests can search for and view products, and add them in the shopping cart. To place an order they have to become a registered member.\n- **Catalog:** Users of our system can search for products by their name or category. This class will keep an index of all products for faster search.\n- **ProductCategory:** This will encapsulate the different categories of products, such as books, electronics, etc.\n- **Product:** This class will encapsulate the entity that the users of our system will be buying and selling. Each Product will belong to a ProductCategory.\n- **ProductReview:** Any registered member can add a review about a product.\n- **ShoppingCart:** Users will add product items that they intend to buy to the shopping cart.\n- **Item:** This class will encapsulate a product item that the users will be buying or placing in the shopping cart. For example, a pen could be a product and if there are 10 pens in the inventory, each of these 10 pens will be considered a product item.\n- **Order:** This will encapsulate a buying order to buy everything in the shopping cart.\n- **OrderLog:** Will keep a track of the status of orders, such as unshipped, pending, complete, canceled, etc.\n- **ShipmentLog:** Will keep a track of the status of shipments, such as pending, shipped, delivered, etc.\n- **Notification:** This class will take care of sending notifications to customers.\n- **Payment:** This class will encapsulate the payment for an order. Members can pay through credit card or electronic bank transfer.\n\n<MdxImage \n  src=\"design/online-shopping/class-diagram.png\" \n  alt=\"Class Diagram for Online Shopping\"\n/>\n\n<MdxImage \n  src=\"design/concepts/uml.svg\" \n  alt=\"Uml\"\n/>\n\n---\n## Activity Diagram\nFollowing is the activity diagram for a user performing online shopping:\n\n<MdxImage \n  src=\"design/online-shopping/activity.svg\" \n  alt=\"Activity Diagram for Online Shopping\"\n/>\n\n---\n## Sequence Diagram\n1. Here is the sequence diagram for searching from the catalog:\n\n<MdxImage \n  src=\"design/online-shopping/sequence-searching.svg\" \n  alt=\"Sequence Diagram for Online Shopping\"\n/>\n\n2. Here is the sequence diagram for adding an item to the shopping cart:\n\n<MdxImage \n  src=\"design/online-shopping/sequence-adding-items.svg\" \n  alt=\"Sequence Diagram for Online Shopping\"\n/>\n\n3. Here is the sequence diagram for checking out to place an order:\n\n<MdxImage \n  src=\"design/online-shopping/sequence-checkout.svg\" \n  alt=\"Sequence Diagram for Online Shopping\"\n/>\n\n---\n## Code\nHere is the high-level definition for the classes described above.\n\n- **Enums and Constants:** Here are the required enums, data types, and constants:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/online-shopping/enums\"\n/>\n\n- **Account, Customer, Admin, and Guest:** These classes represent different people that interact with our system:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/online-shopping/accounts\"\n/>\n\n- **ProductCategory, Product, and ProductReview:** Here are the classes related to a product:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/online-shopping/product\"\n/>\n\n- **ShoppingCart, Item, Order, and OrderLog:** Users will add items to the shopping cart and place an order to buy all the items in the cart.\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/online-shopping/cart\"\n/>\n\n- **Shipment, ShipmentLog, and Notification:** After successfully placing an order, a shipment record will be created:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/online-shopping/shipment\"\n/>\n\n- **Search interface and Catalog:** Catalog will implement Search to facilitate searching of products.\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/online-shopping/search\"\n/>",
    "solutions": {}
  },
  "parking-lot": {
    "id": "parking-lot",
    "title": "Design a Parking Lot",
    "difficulty": "medium",
    "companies": [],
    "topics": [],
    "langs": [],
    "content": "---\ntitle: \"Design a Parking Lot\"\nauthor: \"Rajat Srivastava\"\ncategories: system-designs\ntags: [system-design, hld, lld]\ndescription: \"System design concepts and patterns\"\n---\n\nA parking lot or car park is a dedicated cleared area that is intended for parking vehicles. In most countries where cars are a major mode of transportation, parking lots are a feature of every city and suburban area. Shopping malls, sports stadiums, megachurches, and similar venues often feature parking lots over large areas.\n\n---\n## System Requirements\nWe will focus on the following set of requirements while designing the parking lot:\n1. The parking lot should have multiple floors where customers can park their cars.\n2. The parking lot should have multiple entry and exit points.\n3. Customers can collect a parking ticket from the entry points and can pay the parking fee at the exit points on their way out.\n4. Customers can pay the tickets at the automated exit panel or to the parking attendant.\n5. Customers can pay via both cash and credit cards.\n6. Customers should also be able to pay the parking fee at the customer’s info portal on each floor. If the customer has paid at the info portal, they don’t have to pay at the exit.\n7. The system should not allow more vehicles than the maximum capacity of the parking lot. If the parking is full, the system should be able to show a message at the entrance panel and on the parking display board on the ground floor.\n8. Each parking floor will have many parking spots. The system should support multiple types of parking spots such as Compact, Large, Handicapped, Motorcycle, etc.\n9. The Parking lot should have some parking spots specified for electric cars. These spots should have an electric panel through which customers can pay and charge their vehicles.\n10. The system should support parking for different types of vehicles like car, truck, van, motorcycle, etc.\n11. Each parking floor should have a display board showing any free parking spot for each spot type.\n12. The system should support a per-hour parking fee model. For example, customers have to pay $4 for the first hour, $3.5 for the second and third hours, and $2.5 for all the remaining hours.\n\n---\n## Use Case Diagrams\nHere are the main Actors in our system:\n\n- **Admin:** Mainly responsible for adding and modifying parking floors, parking spots, entrance, and exit panels, adding/removing parking attendants, etc.\n- **Customer:** All customers can get a parking ticket and pay for it.\n- **Parking attendant:** Parking attendants can do all the activities on the customer’s behalf, and can take cash for ticket payment.\n- **System:** To display messages on different info panels, as well as assigning and removing a vehicle from a parking spot.\n\nHere are the top use cases for Parking Lot:\n\n- **Add/Remove/Edit parking floor:** To add, remove or modify a parking floor from the system. Each floor can have its own display board to show free parking spots.\n- **Add/Remove/Edit parking spot:** To add, remove or modify a parking spot on a parking floor.\n- **Add/Remove a parking attendant:** To add or remove a parking attendant from the system.\n- **Take ticket:** To provide customers with a new parking ticket when entering the parking lot.\n- **Scan ticket:** To scan a ticket to find out the total charge.\n- **Credit card payment:** To pay the ticket fee with credit card.\n- **Cash payment:** To pay the parking ticket through cash.\n- **Add/Modify parking rate:** To allow admin to add or modify the hourly parking rate.\n\n<MdxImage \n  src=\"design/parking-lot/use-case.svg\" \n  alt=\"Usecase Diagram for Parking Lot\"\n/>\n\n---\n## Class Diagrams\nHere are the main classes of our Parking Lot System:\n\n- **ParkingLot:** The central part of the organization for which this software has been designed. It has attributes like ‘Name’ to distinguish it from any other parking lots and ‘Address’ to define its location.\n- **ParkingFloor:** The parking lot will have many parking floors.\n- **ParkingSpot:** Each parking floor will have many parking spots. Our system will support different parking spots 1) Handicapped, 2) Compact, 3) Large, 4) Motorcycle, and 5) Electric.\n- **Account:** We will have two types of accounts in the system: one for an Admin, and the other for a parking attendant.\n- **Parking ticket:** This class will encapsulate a parking ticket. Customers will take a ticket when they enter the parking lot.\n- **Vehicle:** Vehicles will be parked in the parking spots. Our system will support different types of vehicles 1) Car, 2) Truck, 3) Electric, 4) Van and 5) Motorcycle.\n- **EntrancePanel and ExitPanel:** EntrancePanel will print tickets, and ExitPanel will facilitate payment of the ticket fee.\n- **Payment:** This class will be responsible for making payments. The system will support credit card and cash transactions.\n- **ParkingRate:** This class will keep track of the hourly parking rates. It will specify a dollar amount for each hour. For example, for a two hour parking ticket, this class will define the cost for the first and the second hour.\n- **ParkingDisplayBoard:** Each parking floor will have a display board to show available parking spots for each spot type. This class will be responsible for displaying the latest availability of free parking spots to the customers.\n- **ParkingAttendantPortal:** This class will encapsulate all the operations that an attendant can perform, like scanning tickets and processing payments.\n- **CustomerInfoPortal:** This class will encapsulate the info portal that customers use to pay for the parking ticket. Once paid, the info portal will update the ticket to keep track of the payment.\n- **ElectricPanel:** Customers will use the electric panels to pay and charge their electric vehicles.\n\n<MdxImage \n  src=\"design/parking-lot/class-diagram.png\" \n  alt=\"Class Diagram for Parking Lot\"\n/>\n\n<MdxImage \n  src=\"design/concepts/uml.svg\" \n  alt=\"Uml\"\n/>\n\n---\n## Activity diagrams\n\n- **Customer paying for parking ticket:** Any customer can perform this activity. Here are the set of steps:\n\n<MdxImage \n  src=\"design/parking-lot/activity-paying.svg\" \n  alt=\"Activity Diagram for Parking Lot\"\n/>\n\n---\n## Code\nFollowing is the skeleton code for our parking lot system:\n\n- **Enums and Constants:** Here are the required enums, data types, and constants:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/parking-lot/enums\"\n/>\n\n- **Account, Admin, and ParkingAttendant:** These classes represent various people that interact with our system:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/parking-lot/accounts\"\n/>\n\n- **ParkingSpot:** Here is the definition of ParkingSpot and all of its children classes:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/parking-lot/parkingSpot\"\n/>\n\n- **Vehicle:** Here is the definition for Vehicle and all of its child classes:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/parking-lot/vehicle\"\n/>\n\n- **ParkingFloor:** This class encapsulates a parking floor:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/parking-lot/parkingFloor\"\n/>\n\n- **ParkingDisplayBoard:** This class encapsulates a parking display board:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/parking-lot/parkingDisplay\"\n/>\n\n- **ParkingLot:** Our system will have only one object of this class. This can be enforced by using the <MdxLink href=\"https://en.wikipedia.org/wiki/Singleton_pattern\">Singleton</MdxLink> pattern. In software engineering, the singleton pattern is a software design pattern that restricts the instantiation of a class to only one object.\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/parking-lot/parkingLot\"\n/>",
    "body": "A parking lot or car park is a dedicated cleared area that is intended for parking vehicles. In most countries where cars are a major mode of transportation, parking lots are a feature of every city and suburban area. Shopping malls, sports stadiums, megachurches, and similar venues often feature parking lots over large areas.\n\n---\n## System Requirements\nWe will focus on the following set of requirements while designing the parking lot:\n1. The parking lot should have multiple floors where customers can park their cars.\n2. The parking lot should have multiple entry and exit points.\n3. Customers can collect a parking ticket from the entry points and can pay the parking fee at the exit points on their way out.\n4. Customers can pay the tickets at the automated exit panel or to the parking attendant.\n5. Customers can pay via both cash and credit cards.\n6. Customers should also be able to pay the parking fee at the customer’s info portal on each floor. If the customer has paid at the info portal, they don’t have to pay at the exit.\n7. The system should not allow more vehicles than the maximum capacity of the parking lot. If the parking is full, the system should be able to show a message at the entrance panel and on the parking display board on the ground floor.\n8. Each parking floor will have many parking spots. The system should support multiple types of parking spots such as Compact, Large, Handicapped, Motorcycle, etc.\n9. The Parking lot should have some parking spots specified for electric cars. These spots should have an electric panel through which customers can pay and charge their vehicles.\n10. The system should support parking for different types of vehicles like car, truck, van, motorcycle, etc.\n11. Each parking floor should have a display board showing any free parking spot for each spot type.\n12. The system should support a per-hour parking fee model. For example, customers have to pay $4 for the first hour, $3.5 for the second and third hours, and $2.5 for all the remaining hours.\n\n---\n## Use Case Diagrams\nHere are the main Actors in our system:\n\n- **Admin:** Mainly responsible for adding and modifying parking floors, parking spots, entrance, and exit panels, adding/removing parking attendants, etc.\n- **Customer:** All customers can get a parking ticket and pay for it.\n- **Parking attendant:** Parking attendants can do all the activities on the customer’s behalf, and can take cash for ticket payment.\n- **System:** To display messages on different info panels, as well as assigning and removing a vehicle from a parking spot.\n\nHere are the top use cases for Parking Lot:\n\n- **Add/Remove/Edit parking floor:** To add, remove or modify a parking floor from the system. Each floor can have its own display board to show free parking spots.\n- **Add/Remove/Edit parking spot:** To add, remove or modify a parking spot on a parking floor.\n- **Add/Remove a parking attendant:** To add or remove a parking attendant from the system.\n- **Take ticket:** To provide customers with a new parking ticket when entering the parking lot.\n- **Scan ticket:** To scan a ticket to find out the total charge.\n- **Credit card payment:** To pay the ticket fee with credit card.\n- **Cash payment:** To pay the parking ticket through cash.\n- **Add/Modify parking rate:** To allow admin to add or modify the hourly parking rate.\n\n<MdxImage \n  src=\"design/parking-lot/use-case.svg\" \n  alt=\"Usecase Diagram for Parking Lot\"\n/>\n\n---\n## Class Diagrams\nHere are the main classes of our Parking Lot System:\n\n- **ParkingLot:** The central part of the organization for which this software has been designed. It has attributes like ‘Name’ to distinguish it from any other parking lots and ‘Address’ to define its location.\n- **ParkingFloor:** The parking lot will have many parking floors.\n- **ParkingSpot:** Each parking floor will have many parking spots. Our system will support different parking spots 1) Handicapped, 2) Compact, 3) Large, 4) Motorcycle, and 5) Electric.\n- **Account:** We will have two types of accounts in the system: one for an Admin, and the other for a parking attendant.\n- **Parking ticket:** This class will encapsulate a parking ticket. Customers will take a ticket when they enter the parking lot.\n- **Vehicle:** Vehicles will be parked in the parking spots. Our system will support different types of vehicles 1) Car, 2) Truck, 3) Electric, 4) Van and 5) Motorcycle.\n- **EntrancePanel and ExitPanel:** EntrancePanel will print tickets, and ExitPanel will facilitate payment of the ticket fee.\n- **Payment:** This class will be responsible for making payments. The system will support credit card and cash transactions.\n- **ParkingRate:** This class will keep track of the hourly parking rates. It will specify a dollar amount for each hour. For example, for a two hour parking ticket, this class will define the cost for the first and the second hour.\n- **ParkingDisplayBoard:** Each parking floor will have a display board to show available parking spots for each spot type. This class will be responsible for displaying the latest availability of free parking spots to the customers.\n- **ParkingAttendantPortal:** This class will encapsulate all the operations that an attendant can perform, like scanning tickets and processing payments.\n- **CustomerInfoPortal:** This class will encapsulate the info portal that customers use to pay for the parking ticket. Once paid, the info portal will update the ticket to keep track of the payment.\n- **ElectricPanel:** Customers will use the electric panels to pay and charge their electric vehicles.\n\n<MdxImage \n  src=\"design/parking-lot/class-diagram.png\" \n  alt=\"Class Diagram for Parking Lot\"\n/>\n\n<MdxImage \n  src=\"design/concepts/uml.svg\" \n  alt=\"Uml\"\n/>\n\n---\n## Activity diagrams\n\n- **Customer paying for parking ticket:** Any customer can perform this activity. Here are the set of steps:\n\n<MdxImage \n  src=\"design/parking-lot/activity-paying.svg\" \n  alt=\"Activity Diagram for Parking Lot\"\n/>\n\n---\n## Code\nFollowing is the skeleton code for our parking lot system:\n\n- **Enums and Constants:** Here are the required enums, data types, and constants:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/parking-lot/enums\"\n/>\n\n- **Account, Admin, and ParkingAttendant:** These classes represent various people that interact with our system:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/parking-lot/accounts\"\n/>\n\n- **ParkingSpot:** Here is the definition of ParkingSpot and all of its children classes:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/parking-lot/parkingSpot\"\n/>\n\n- **Vehicle:** Here is the definition for Vehicle and all of its child classes:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/parking-lot/vehicle\"\n/>\n\n- **ParkingFloor:** This class encapsulates a parking floor:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/parking-lot/parkingFloor\"\n/>\n\n- **ParkingDisplayBoard:** This class encapsulates a parking display board:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/parking-lot/parkingDisplay\"\n/>\n\n- **ParkingLot:** Our system will have only one object of this class. This can be enforced by using the <MdxLink href=\"https://en.wikipedia.org/wiki/Singleton_pattern\">Singleton</MdxLink> pattern. In software engineering, the singleton pattern is a software design pattern that restricts the instantiation of a class to only one object.\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/parking-lot/parkingLot\"\n/>",
    "solutions": {}
  },
  "stack-overflow": {
    "id": "stack-overflow",
    "title": "Design Stack Overflow",
    "difficulty": "medium",
    "companies": [],
    "topics": [],
    "langs": [],
    "content": "---\ntitle: \"Design Stack Overflow\"\nauthor: \"Rajat Srivastava\"\ncategories: system-designs\ntags: [system-design, hld, lld]\ndescription: \"System design concepts and patterns\"\n---\n\nStack Overflow is one of the largest online communities for developers to learn and share their knowledge. The website provides a platform for its users to ask and answer questions, and through membership and active participation, to vote questions and answers up or down. Users can edit questions and answers in a fashion similar to a <MdxLink href=\"https://en.wikipedia.org/wiki/Wiki\">wiki</MdxLink>.\n\nUsers of Stack Overflow can earn reputation points and badges. For example, a person is awarded ten reputation points for receiving an “up” vote on an answer and five points for the “up” vote of a question. The can also receive badges for their valued contributions. A higher reputation lets users unlock new privileges like the ability to vote, comment on, and even edit other people’s posts.\n\n---\n## System Requirements\nWe will be designing a system with the following requirements:\n1. Any non-member (guest) can search and view questions. However, to add or upvote a question, they have to become a member.\n2. Members should be able to post new questions.\n3. Members should be able to add an answer to an open question.\n4. Members can add comments to any question or answer.\n5. A member can upvote a question, answer or comment.\n6. Members can flag a question, answer or comment, for serious problems or moderator attention.\n7. Any member can add a bounty to their question to draw attention.\n8. Members will earn badges for being helpful.\n9. Members can vote to close a question; Moderators can close or reopen any question.\n10. Members can add tags to their questions. A tag is a word or phrase that describes the topic of the question.\n11. Members can vote to delete extremely off-topic or very low-quality questions.\n12. Moderators can close a question or undelete an already deleted question.\n13. The system should also be able to identify most frequently used tags in the questions.\n\n---\n## Use Case Diagrams\nWe have five main actors in our system:\n\n- **Admin:** Mainly responsible for blocking or unblocking members.\n- **Guest:** All guests can search and view questions.\n- **Member:** Members can perform all activities that guests can, in addition to which they can add/remove questions, answers, and comments. Members can delete and un-delete their questions, answers or comments.\n- **Moderator:** In addition to all the activities that members can perform, moderators can close/delete/undelete any question.\n- **System:** Mainly responsible for sending notifications and assigning badges to members.\n\nHere are the top use cases for Stack Overflow:\n\n1. Search questions.\n2. Create a new question with bounty and tags.\n3. Add/modify answers to questions.\n4. Add comments to questions or answers.\n5. Moderators can close, delete, and un-delete any question.\n\n<MdxImage \n  src=\"design/stack-overflow/use-case.svg\" \n  alt=\"Usecase Diagram for Stack Overflow\"\n/>\n\n---\n## Class Diagrams\nHere are the main classes of Stack Overflow System:\n\n- **Question:** This class is the central part of our system. It has attributes like Title and Description to define the question. In addition to this, we will track the number of times a question has been viewed or voted on. We should also track the status of a question, as well as closing remarks if the question is closed.\n- **Answer:** The most important attributes of any answer will be the text and the view count. In addition to that, we will also track the number of times an answer is voted on or flagged. We should also track if the question owner has accepted an answer.\n- **Comment:** Similar to answer, comments will have text, and view, vote, and flag counts. Members can add comments to questions and answers.\n- **Tag:** Tags will be identified by their names and will have a field for a description to define them. We will also track daily and weekly frequencies at which tags are associated with questions.\n- **Badge:** Similar to tags, badges will have a name and description.\n- **Photo:** Questions or answers can have photos.\n- **Bounty:** Each member, while asking a question, can place a bounty to draw attention. Bounties will have a total reputation and an expiry date.\n- **Account:** We will have four types of accounts in the system, guest, member, admin, and moderator. Guests can search and view questions. Members can ask questions and earn reputation by answering questions and from bounties.\n- **Notification:** This class will be responsible for sending notifications to members and assigning badges to members based on their reputations.\n\n<MdxImage \n  src=\"design/stack-overflow/class-diagram.svg\" \n  alt=\"Class Diagram for Stack Overflow\"\n/>\n\n<MdxImage \n  src=\"design/concepts/uml.svg\" \n  alt=\"Uml\"\n/>\n\n---\n## Activity Diagram\n**Post a new question:** Any member or moderator can perform this activity. Here are the steps to post a question:\n\n<MdxImage \n  src=\"design/stack-overflow/activity-post.svg\" \n  alt=\"Activity Diagram for Stack Overflow\"\n/>\n\n---\n## Sequence Diagram\nFollowing is the sequence diagram for creating a new question:\n\n<MdxImage \n  src=\"design/stack-overflow/sequence-create-question.svg\" \n  alt=\"Sequence Diagram for Stack Overflow\"\n/>\n\n---\n## Code\nHere is the high-level definition for the classes described above.\n\n- **Enums and Constants:** Here are the required enums, data types, and constants:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/stack-overflow/enums\"\n/>\n\n- **Account, Member, Admin, and Moderator:** These classes represent different people that interact with our system:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/stack-overflow/accounts\"\n/>\n\n- **Badge, Tag, and Notification:** Members have badges, questions have tags and notifications:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/stack-overflow/tag\"\n/>\n\n- **Photo and Bounty:** Members can put bounties on questions. Answers and Questions can have multiple photos:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/stack-overflow/photo-bounty\"\n/>\n\n- **Question, Comment and Answer:** Members can ask questions, as well as add an answer to any question. All members can add comments to all open questions or answers:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/stack-overflow/question\"\n/>",
    "body": "Stack Overflow is one of the largest online communities for developers to learn and share their knowledge. The website provides a platform for its users to ask and answer questions, and through membership and active participation, to vote questions and answers up or down. Users can edit questions and answers in a fashion similar to a <MdxLink href=\"https://en.wikipedia.org/wiki/Wiki\">wiki</MdxLink>.\n\nUsers of Stack Overflow can earn reputation points and badges. For example, a person is awarded ten reputation points for receiving an “up” vote on an answer and five points for the “up” vote of a question. The can also receive badges for their valued contributions. A higher reputation lets users unlock new privileges like the ability to vote, comment on, and even edit other people’s posts.\n\n---\n## System Requirements\nWe will be designing a system with the following requirements:\n1. Any non-member (guest) can search and view questions. However, to add or upvote a question, they have to become a member.\n2. Members should be able to post new questions.\n3. Members should be able to add an answer to an open question.\n4. Members can add comments to any question or answer.\n5. A member can upvote a question, answer or comment.\n6. Members can flag a question, answer or comment, for serious problems or moderator attention.\n7. Any member can add a bounty to their question to draw attention.\n8. Members will earn badges for being helpful.\n9. Members can vote to close a question; Moderators can close or reopen any question.\n10. Members can add tags to their questions. A tag is a word or phrase that describes the topic of the question.\n11. Members can vote to delete extremely off-topic or very low-quality questions.\n12. Moderators can close a question or undelete an already deleted question.\n13. The system should also be able to identify most frequently used tags in the questions.\n\n---\n## Use Case Diagrams\nWe have five main actors in our system:\n\n- **Admin:** Mainly responsible for blocking or unblocking members.\n- **Guest:** All guests can search and view questions.\n- **Member:** Members can perform all activities that guests can, in addition to which they can add/remove questions, answers, and comments. Members can delete and un-delete their questions, answers or comments.\n- **Moderator:** In addition to all the activities that members can perform, moderators can close/delete/undelete any question.\n- **System:** Mainly responsible for sending notifications and assigning badges to members.\n\nHere are the top use cases for Stack Overflow:\n\n1. Search questions.\n2. Create a new question with bounty and tags.\n3. Add/modify answers to questions.\n4. Add comments to questions or answers.\n5. Moderators can close, delete, and un-delete any question.\n\n<MdxImage \n  src=\"design/stack-overflow/use-case.svg\" \n  alt=\"Usecase Diagram for Stack Overflow\"\n/>\n\n---\n## Class Diagrams\nHere are the main classes of Stack Overflow System:\n\n- **Question:** This class is the central part of our system. It has attributes like Title and Description to define the question. In addition to this, we will track the number of times a question has been viewed or voted on. We should also track the status of a question, as well as closing remarks if the question is closed.\n- **Answer:** The most important attributes of any answer will be the text and the view count. In addition to that, we will also track the number of times an answer is voted on or flagged. We should also track if the question owner has accepted an answer.\n- **Comment:** Similar to answer, comments will have text, and view, vote, and flag counts. Members can add comments to questions and answers.\n- **Tag:** Tags will be identified by their names and will have a field for a description to define them. We will also track daily and weekly frequencies at which tags are associated with questions.\n- **Badge:** Similar to tags, badges will have a name and description.\n- **Photo:** Questions or answers can have photos.\n- **Bounty:** Each member, while asking a question, can place a bounty to draw attention. Bounties will have a total reputation and an expiry date.\n- **Account:** We will have four types of accounts in the system, guest, member, admin, and moderator. Guests can search and view questions. Members can ask questions and earn reputation by answering questions and from bounties.\n- **Notification:** This class will be responsible for sending notifications to members and assigning badges to members based on their reputations.\n\n<MdxImage \n  src=\"design/stack-overflow/class-diagram.svg\" \n  alt=\"Class Diagram for Stack Overflow\"\n/>\n\n<MdxImage \n  src=\"design/concepts/uml.svg\" \n  alt=\"Uml\"\n/>\n\n---\n## Activity Diagram\n**Post a new question:** Any member or moderator can perform this activity. Here are the steps to post a question:\n\n<MdxImage \n  src=\"design/stack-overflow/activity-post.svg\" \n  alt=\"Activity Diagram for Stack Overflow\"\n/>\n\n---\n## Sequence Diagram\nFollowing is the sequence diagram for creating a new question:\n\n<MdxImage \n  src=\"design/stack-overflow/sequence-create-question.svg\" \n  alt=\"Sequence Diagram for Stack Overflow\"\n/>\n\n---\n## Code\nHere is the high-level definition for the classes described above.\n\n- **Enums and Constants:** Here are the required enums, data types, and constants:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/stack-overflow/enums\"\n/>\n\n- **Account, Member, Admin, and Moderator:** These classes represent different people that interact with our system:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/stack-overflow/accounts\"\n/>\n\n- **Badge, Tag, and Notification:** Members have badges, questions have tags and notifications:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/stack-overflow/tag\"\n/>\n\n- **Photo and Bounty:** Members can put bounties on questions. Answers and Questions can have multiple photos:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/stack-overflow/photo-bounty\"\n/>\n\n- **Question, Comment and Answer:** Members can ask questions, as well as add an answer to any question. All members can add comments to all open questions or answers:\n\n<MdxCodeTabs\n  langs={[\"java\", \"py\"]}\n  path=\"system-design/code/stack-overflow/question\"\n/>",
    "solutions": {}
  }
}