const e="---\nlayout: post\ntitle: Split Array Largest Sum\ntopics: [array, dynamic-programming, greedy]\nlangs: [java]\ntc: O(n<sup>2</sup>m)\nsc: O(nm)\nleetid: 410\ndifficulty: hard\ncompanies: \ngfg: \nhackerrank: \ninterviewbit: \nleetcode: split-array-largest-sum\n---\n\nGiven an array nums which consists of non-negative integers and an integer `m`, \nyou can split the array into `m` non-empty continuous subarrays.\n\nWrite an algorithm to minimize the largest sum among these `m` subarrays.\n\n---\n\n## How to Solve\n\n1. Fill the array `prefixSum`. The i<sup>th</sup> index of `prefixSum` will have the sum of integers in nums in the range `[0, i - 1]` with `prefix[0] = 0`.\n2. Initialize an array memo where `memo[currIndex][subarrayCount]` will store the result for the subproblem `(currIndex, subarrayCount)`. \n3. We need to find the value of `memo[0][m]` which represents the minimum largest subarray sum starting at index `0` with `m` subarrays. \n   1. But we only know what the result will be for the base cases. \n   2. To fill the memo array, we will iterate subarrayCount over the range `[1, m]` (starting at `1` because that is our base case) and iterate `currIndex` over the range `[0, n - 1]`.\n4. For each value of `subarrayCount` and `currIndex`, we will update `memo[subarrayCount][currIndex]`:\n   1. As the sum of the elements between `currIndex` and the end of the array if we are at a base case (`subarrayCount` equals 1).\n   2. Otherwise, we will use the recurrence relation and the results from previously solved subproblems to calculate `memo[subarrayCount][currIndex]`.\n5. Return the value stored at `memo[0][m]`.\n\n---\n\n## Test Cases\n\n**Example 1:** \n```\nInput: nums = [7,2,5,10,8], m = 2\nOutput: 18\nExplanation:\nThere are four ways to split nums into two subarrays.\nThe best way is to split it into [7,2,5] and [10,8],\nwhere the largest sum among the two subarrays is only 18.\n```\n\n**Example 2:** \n```\nInput: nums = [1,2,3,4,5], m = 2\nOutput: 9\n```\n\n**Example 3:**\n```\nInput: nums = [1,4,4], m = 3\nOutput: 4\n```";export{e as default};
