const e='---\nlayout: post\ntitle: Replace Words\ntopics: [array, hash-table, string, trie]\nlangs: [java, py]\ntc: O(nm)\nsc: O(d)\nleetid: 648\ncompanies: \ndifficulty: medium\ngfg: \nhackerrank: \ninterviewbit: \nleetcode: replace-words\n---\nIn English, we have a concept called **root**, which can be followed by some other word to form another longer word - let\'s call this word **derivative**. For example, when the **root** `"help"` is followed by the word `"ful"`, we can form a derivative `"helpful"`.\nGiven a `dictionary` consisting of many **roots** and a `sentence` consisting of words separated by spaces, replace all the derivatives in the sentence with the **root** forming it. If a derivative can be replaced by more than one **root**, replace it with the **root** that has **the shortest length**.\nReturn *the `sentence`* after the replacement.\n\n---\n## Test Cases\n**Example 1:**\n```\nInput: dictionary = ["cat","bat","rat"], sentence = "the cattle was rattled by the battery"\nOutput: "the cat was rat by the bat"\n```\n\n**Example 2:**\n```\nInput: dictionary = ["a","b","c"], sentence = "aadsfasf absbs bbab cadsfafs"\nOutput: "a a b c"\n```\n \n**Constraints:**\n	\n* `1 <= dictionary.length <= 1000`\n* `1 <= dictionary[i].length <= 100`\n* `dictionary[i]` consists of only lower-case letters.\n* `1 <= sentence.length <= 10<sup>6</sup>`\n* `sentence` consists of only lower-case letters and spaces.\n* The number of words in `sentence` is in the range `[1, 1000]`\n* The length of each word in `sentence` is in the range `[1, 1000]`\n* Every two consecutive words in `sentence` will be separated by exactly one space.\n* `sentence` does not have leading or trailing spaces.\n\n        ';export{e as default};
