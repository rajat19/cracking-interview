"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1873],{21873:n=>{n.exports=JSON.parse('{"c":{"language":"c","code":"int min(int num1, int num2) {\\n    return (num1 < num2 ) ? num1 : num2;\\n}\\n\\nint coinChange(int* coins, int coinsSize, int amount){\\n    int max = amount + 1;\\n    int dp[amount+1];\\n    dp[0] = 0;\\n    for (int i = 1; i <= amount; i++) {\\n        dp[i] = max;\\n        for(int j=0; j<coinsSize; j++) {\\n            int coin = coins[j];\\n            if (coin <= i) {\\n                dp[i] = min(dp[i], dp[i - coin] + 1);\\n            }\\n        }\\n    }\\n    return dp[amount] > amount ? -1 : dp[amount];\\n}","subPath":"","fileName":"solution.c"},"cpp":{"language":"cpp","code":"class Solution {\\npublic:\\n    int coinChange(vector<int>& coins, int amount) {\\n        int max = amount + 1;\\n        vector<int> dp(amount+1, max);\\n        dp[0] = 0;\\n        for (int i = 1; i <= amount; i++) {\\n            for(int j=0; j<coins.size(); j++) {\\n                int coin = coins[j];\\n                if (coin <= i) {\\n                    dp[i] = min(dp[i], dp[i - coin] + 1);\\n                }\\n            }\\n        }\\n        return dp[amount] > amount ? -1 : dp[amount];\\n    }\\n};","subPath":"","fileName":"solution.cpp"},"java":{"language":"java","code":"class Solution {\\n    public int coinChange(int[] coins, int amount) {\\n        int max = amount + 1;\\n        int[] dp = new int[amount+1];\\n        Arrays.fill(dp, max);\\n        dp[0] = 0;\\n        for (int i = 1; i <= amount; i++) {\\n            for(int coin: coins) {\\n                if (coin <= i) {\\n                    dp[i] = Math.min(dp[i], dp[i - coin] + 1);\\n                }\\n            }\\n        }\\n        return dp[amount] > amount ? -1 : dp[amount];\\n    }\\n}","subPath":"","fileName":"solution.java"},"py":{"language":"py","code":"class Solution:\\n    def coinChange(self, coins: List[int], amount: int) -> int:\\n        mx = amount + 1\\n        dp = [mx]*mx\\n        dp[0] = 0\\n        for i in range(1, amount+1):\\n            for coin in coins:\\n                if coin <= i:\\n                    dp[i] = min(dp[i], 1 + dp[i - coin])\\n        return -1 if dp[amount] > amount else dp[amount]","subPath":"","fileName":"solution.py"}}')}}]);