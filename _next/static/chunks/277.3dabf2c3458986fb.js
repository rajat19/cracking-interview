"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[277],{60277:n=>{n.exports=JSON.parse('{"cpp":{"language":"cpp","code":"class Solution {\\npublic:\\n    int minDistance(string word1, string word2) {\\n        int n1 = word1.length(), n2 = word2.length();\\n        vector<vector<int>> dp(n1+1, vector<int>(n2+1, 0));\\n        for (int i = 1; i <= n1; i++) {\\n            dp[i][0] = i;\\n        }\\n        for (int j = 1; j <= n2; j++) {\\n            dp[0][j] = j;\\n        }\\n        for(int i=1; i<=n1; i++) {\\n            for(int j=1; j<=n2; j++) {\\n                if (word1[i-1] != word2[j-1]) {\\n                    dp[i][j] = 1 + min(dp[i-1][j-1], min(dp[i-1][j], dp[i][j-1]));\\n                } else {\\n                    dp[i][j] = dp[i-1][j-1];\\n                }\\n            }\\n        }\\n        return dp[n1][n2];\\n    }\\n};","subPath":"","fileName":"solution.cpp"},"java":{"language":"java","code":"class Solution {\\n    public int minDistance(String word1, String word2) {\\n        int n1 = word1.length(), n2 = word2.length();\\n        int[][] dp = new int[n1+1][n2+1];\\n        for (int i = 1; i <= n1; i++) {\\n            dp[i][0] = i;\\n        }\\n        for (int j = 1; j <= n2; j++) {\\n            dp[0][j] = j;\\n        }\\n        for(int i=1; i<=n1; i++) {\\n            for(int j=1; j<=n2; j++) {\\n                if (word1.charAt(i-1) != word2.charAt(j-1)) {\\n                    dp[i][j] = 1 + Math.min(dp[i-1][j-1], Math.min(dp[i-1][j], dp[i][j-1]));\\n                } else {\\n                    dp[i][j] = dp[i-1][j-1];\\n                }\\n            }\\n        }\\n        return dp[n1][n2];\\n    }\\n}","subPath":"","fileName":"solution.java"},"py":{"language":"py","code":"class Solution:\\n    def minDistance(self, word1: str, word2: str) -> int:\\n        l1, l2 = len(word1), len(word2)\\n        dp = [[0 for _ in range(l2 + 1)] for _ in range(l1 + 1)]\\n        for i in range(1, l1+1, 1):\\n            dp[i][0] = i\\n        for i in range(1, l2+1, 1):\\n            dp[0][i] = i\\n\\n        for i in range(1, l1+1, 1):\\n            for j in range(1, l2+1, 1):\\n                if word1[i-1] != word2[j-1]:\\n                    dp[i][j] = 1 + min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1])\\n                else:\\n                    dp[i][j] = dp[i-1][j-1]\\n        return dp[l1][l2]","subPath":"","fileName":"solution.py"}}')}}]);