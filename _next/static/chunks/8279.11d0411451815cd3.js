"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8279],{88279:t=>{t.exports=JSON.parse('{"c":{"language":"c","code":"int trap(int* height, int n){\\n    int left = 0, right = n-1;\\n    int maxleft = 0, maxright = 0, total = 0;\\n    while(left < right) {\\n        if (height[left] < height[right]) {\\n            if (height[left] < maxleft) {\\n                total += maxleft - height[left];\\n            } else {\\n                maxleft = height[left];\\n            }\\n            left++;\\n        } else {\\n            if (height[right] < maxright) {\\n                total += maxright - height[right];\\n            } else {\\n                maxright = height[right];\\n            }\\n            right--;\\n        }\\n    }\\n    return total;\\n}","subPath":"","fileName":"solution.c"},"cpp":{"language":"cpp","code":"class Solution {\\npublic:\\n    int trap(vector<int>& height) {\\n        int n = height.size();\\n        int left = 0, right = n-1;\\n        int maxleft = 0, maxright = 0, total = 0;\\n        while(left < right) {\\n            if (height[left] < height[right]) {\\n                if (height[left] < maxleft) {\\n                    total += maxleft - height[left];\\n                } else {\\n                    maxleft = height[left];\\n                }\\n                left++;\\n            } else {\\n                if (height[right] < maxright) {\\n                    total += maxright - height[right];\\n                } else {\\n                    maxright = height[right];\\n                }\\n                right--;\\n            }\\n        }\\n        return total;\\n    }\\n};","subPath":"","fileName":"solution.cpp"},"cs":{"language":"cs","code":"public class Solution {\\n    public int Trap(int[] height) {\\n        int left=0, right=height.Length-1, min, level=0, water=0;\\n        while(left < right) {\\n            if (height[left] < height[right]) {\\n                min = height[left++];\\n            } else {\\n                min = height[right--];\\n            }\\n            if (min > level) level = min;\\n            water += level - min;\\n        }\\n        return water;\\n    }\\n}","subPath":"","fileName":"solution.cs"},"go":{"language":"go","code":"package trapping_rain_water\\n\\nfunc trap(height []int) int {\\n\\tn := len(height)\\n\\tleft, right := 0, n-1\\n\\tmaxLeft, maxRight, total := 0, 0, 0\\n\\tfor left < right {\\n\\t\\tif height[left] < height[right] {\\n\\t\\t\\tif height[left] >= maxLeft {\\n\\t\\t\\t\\tmaxLeft = height[left]\\n\\t\\t\\t} else {\\n\\t\\t\\t\\ttotal += maxLeft - height[left]\\n\\t\\t\\t}\\n\\t\\t\\tleft++\\n\\t\\t} else {\\n\\t\\t\\tif height[right] >= maxRight {\\n\\t\\t\\t\\tmaxRight = height[right]\\n\\t\\t\\t} else {\\n\\t\\t\\t\\ttotal += maxRight - height[right]\\n\\t\\t\\t}\\n\\t\\t\\tright--\\n\\t\\t}\\n\\t}\\n\\treturn total\\n}","subPath":"","fileName":"solution.go"},"java":{"language":"java","code":"class Solution {\\n    public int trap(int[] height) {\\n        int n = height.length;\\n        int left = 0, right = n-1;\\n        int total = 0;\\n        int maxLeft = 0, maxRight = 0;\\n        while(left < right) {\\n            if (height[left] < height[right]) {\\n                if (height[left] >= maxLeft) {\\n                    maxLeft = height[left];\\n                } else {\\n                    total += maxLeft - height[left];\\n                }\\n                left++;\\n            } else {\\n                if (height[right] >= maxRight) {\\n                    maxRight = height[right];\\n                } else {\\n                    total += maxRight - height[right];\\n                }\\n                right--;\\n            }\\n        }\\n        return total;\\n    }\\n}","subPath":"","fileName":"solution.java"},"js":{"language":"js","code":"/**\\n * @param {number[]} height\\n * @return {number}\\n */\\nvar trap = function(height) {\\n    let left=0, right=height.length-1, min, level=0, water=0;\\n    while(left < right) {\\n        if (height[left] < height[right]) {\\n            min = height[left++];\\n        } else {\\n            min = height[right--];\\n        }\\n        if (min > level) level = min;\\n        water += level - min;\\n    }\\n    return water;\\n};","subPath":"","fileName":"solution.js"},"py":{"language":"py","code":"from typing import List\\n\\n\\nclass Solution:\\n    def trap(self, height: List[int]) -> int:\\n        left, right = 0, len(height) - 1\\n        maxleft, maxright, total = 0, 0, 0\\n        while left < right:\\n            if height[left] < height[right]:\\n                if height[left] < maxleft:\\n                    total += maxleft - height[left]\\n                else:\\n                    maxleft = height[left]\\n\\n                left += 1\\n            else:\\n                if height[right] < maxright:\\n                    total += maxright - height[right]\\n                else:\\n                    maxright = height[right]\\n\\n                right -= 1\\n\\n        return total","subPath":"","fileName":"solution.py"},"ts":{"language":"ts","code":"function trap(height: number[]): number {\\n    let maxLeft = 0;\\n    let maxRight = 0;\\n    let left = 0;\\n    let right = height.length - 1;\\n    let total = 0;\\n    while(left < right) {\\n        if (height[left] < height[right]) {\\n            if (height[left] < maxLeft) {\\n                total += maxLeft - height[left];\\n            } else {\\n                maxLeft = height[left];\\n            }\\n            left++;\\n        } else {\\n            if (height[right] < maxRight) {\\n                total += maxRight - height[right];\\n            } else {\\n                maxRight = height[right];\\n            }\\n            right--;\\n        }\\n    }\\n    return total;\\n};","subPath":"","fileName":"solution.ts"}}')}}]);