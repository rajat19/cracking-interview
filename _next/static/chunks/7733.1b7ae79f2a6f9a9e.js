"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7733],{77733:n=>{n.exports=JSON.parse('{"cpp":{"language":"cpp","code":"class Solution {\\npublic:\\n    int findPeakElement(vector<int>& nums) {\\n        int l = 0, r = nums.size() - 1;\\n        while(l < r) {\\n            int mid = l + (r-l)/2;\\n            if (nums[mid] > nums[mid+1]) {\\n                r = mid;\\n            } else {\\n                l = mid+1;\\n            }\\n        }\\n        return l;\\n    }\\n};","subPath":"","fileName":"solution.cpp"},"java":{"language":"java","code":"public class Solution {\\n    public int findPeakElement(int[] nums) {\\n        int l = 0, r = nums.length - 1;\\n        while (l < r) {\\n            int mid = (l + r) / 2;\\n            if (nums[mid] > nums[mid + 1])\\n                r = mid;\\n            else\\n                l = mid + 1;\\n        }\\n        return l;\\n    }\\n}","subPath":"","fileName":"solution.java"},"py":{"language":"py","code":"class Solution:\\n    def findPeakElement(self, A: List[int]) -> int:\\n        nums = A\\n        l, r = 0, len(nums) - 1\\n\\n        while l < r:\\n            mid = (l+r) // 2\\n            if nums[mid] > nums[mid + 1]:\\n                r = mid\\n            else:\\n                l = mid + 1\\n\\n        return l","subPath":"","fileName":"solution.py"}}')}}]);