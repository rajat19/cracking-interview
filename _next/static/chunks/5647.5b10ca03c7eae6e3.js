"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5647],{75647:n=>{n.exports=JSON.parse('{"java":{"language":"java","code":"class Solution {\\n    public int[] maxSlidingWindow(int[] nums, int k) {\\n        int n = nums.length;\\n        if (n == 0 || k == 0) {\\n            return new int[0];\\n        }\\n        int[] result = new int[n - k + 1]; // number of windows\\n        Deque<Integer> win = new ArrayDeque<>(); // stores indices\\n\\n        for (int i = 0; i < n; ++i) {\\n            // remove indices that are out of bound\\n            while (win.size() > 0 && win.peekFirst() <= i - k) {\\n                win.pollFirst();\\n            }\\n            // remove indices whose corresponding values are less than nums[i]\\n            while (win.size() > 0 && nums[win.peekLast()] < nums[i]) {\\n                win.pollLast();\\n            }\\n            // add nums[i]\\n            win.offerLast(i);\\n            // add to result\\n            if (i >= k - 1) {\\n                result[i - k + 1] = nums[win.peekFirst()];\\n            }\\n        }\\n        return result;\\n    }\\n}","subPath":"","fileName":"solution.java"},"py":{"language":"py","code":"from typing import List\\n\\n\\nclass Solution:\\n    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:\\n        n = len(nums)\\n        if n == 0 or k == 0:\\n            return []\\n        res, window = [0]*(n-k+1), []\\n        for i in range(n):\\n            while window and window[0] <= i-k:\\n                window.pop(0)\\n            while window and nums[window[-1]] < nums[i]:\\n                window.pop()\\n            window.append(i)\\n            if i >= k - 1:\\n                res[i-k+1] = nums[window[0]]\\n        return res","subPath":"","fileName":"solution.py"}}')}}]);