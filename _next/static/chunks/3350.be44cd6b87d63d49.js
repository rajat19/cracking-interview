"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3350],{13350:e=>{e.exports=JSON.parse('{"accounts_java":{"language":"java","code":"// For simplicity, we are not defining getter and setter functions. The reader can\\n// assume that all class attributes are private and accessed through their respective\\n// public getter methods and modified only through their public methods function.\\n\\npublic class Account {\\n  private String id;\\n  private String password;\\n  private AccountStatus status;\\n  private String name;\\n  private Address address;\\n  private String email;\\n  private String phone;\\n  private int reputation;\\n\\n  public boolean resetPassword();\\n}\\n\\npublic class Member {\\n  private Account account;\\n  private List<Badge> badges;\\n\\n  public int getReputation();\\n  public String getEmail();\\n  public boolean createQuestion(Question question);\\n  public boolean createTag(Tag tag);\\n}\\n\\npublic class Admin extends Member {\\n  public boolean blockMember(Member member);\\n  public boolean unblockMember(Member member);\\n}\\n\\npublic class Moderator extends Member {\\n  public boolean closeQuestion(Question question);\\n  public boolean undeleteQuestion(Question question);\\n}","subPath":"accounts","fileName":"solution.java"},"accounts_py":{"language":"py","code":"# For simplicity, we are not defining getter and setter functions. The reader can\\n# assume that all class attributes are private and accessed through their respective\\n# public getter methods and modified only through their public methods function.\\n\\n\\nclass Account:\\n  def __init__(self, id, password, name, address, email, phone, status=AccountStatus.Active):\\n    self.__id = id\\n    self.__password = password\\n    self.__name = name\\n    self.__address = address\\n    self.__email = email\\n    self.__phone = phone\\n    self.__status = status\\n    self.__reputation = 0\\n\\n  def reset_password(self):\\n    None\\n\\n\\nclass Member:\\n  def __init__(self, account):\\n    self.__account = account\\n    self.__badges = []\\n\\n  def get_reputation(self):\\n    return self.__account.get_reputation()\\n\\n  def get_email(self):\\n    return self.__account.get_email()\\n\\n  def create_question(self, question):\\n    None\\n\\n  def create_tag(self, tag):\\n    None\\n\\n\\nclass Admin(Member):\\n  def block_member(self, member):\\n    None\\n\\n  def unblock_member(self, member):\\n    None\\n\\n\\nclass Moderator(Member):\\n  def close_question(self, question):\\n    None\\n\\n  def undelete_question(self, question):\\n    None","subPath":"accounts","fileName":"solution.py"},"enums_java":{"language":"java","code":"public enum QuestionStatus{\\n  OPEN,\\n  CLOSED,\\n  ON_HOLD,\\n  DELETED\\n}\\n\\npublic enum QuestionClosingRemark{\\n  DUPLICATE,\\n  OFF_TOPIC,\\n  TOO_BROAD,\\n  NOT_CONSTRUCTIVE,\\n  NOT_A_REAL_QUESTION,\\n  PRIMARILY_OPINION_BASED\\n}\\n\\npublic enum AccountStatus{\\n  ACTIVE,\\n  CLOSED,\\n  CANCELED,\\n  BLACKLISTED,\\n  BLOCKED\\n}","subPath":"enums","fileName":"solution.java"},"enums_py":{"language":"py","code":"class QuestionStatus(Enum):\\n  OPEN, CLOSED, ON_HOLD, DELETED = 1, 2, 3, 4\\n\\n\\nclass QuestionClosingRemark(Enum):\\n  DUPLICATE, OFF_TOPIC, TOO_BROAD, NOT_CONSTRUCTIVE, NOT_A_REAL_QUESTION, PRIMARILY_OPINION_BASED = 1, 2, 3, 4, 5, 6\\n\\n\\nclass AccountStatus(Enum):\\n  ACTIVE, CLOSED, CANCELED, BLACKLISTED, BLOCKED = 1, 2, 3, 4, 5","subPath":"enums","fileName":"solution.py"},"photo-bounty_java":{"language":"java","code":"public class Photo {\\n  private int photoId;\\n  private String photoPath;\\n  private Date creationDate;\\n\\n  private Member creatingMember;\\n\\n  public boolean delete();\\n}\\n\\npublic class Bounty {\\n  private int reputation;\\n  private Date expiry;\\n\\n  public boolean modifyReputation(int reputation);\\n}","subPath":"photo-bounty","fileName":"solution.java"},"photo-bounty_py":{"language":"py","code":"import datetime\\n\\nclass Photo:\\n  def __init__(self, id, path, member):\\n    self.__photo_id = id\\n    self.__photo_path = path\\n    self.__creation_date = datetime.datetime.now()\\n    self.__creating_member = member\\n\\n  def delete(self):\\n    None\\n\\n# import datetime\\n\\n\\nclass Bounty:\\n  def __init__(self, reputation, expiry):\\n    self.__reputation = reputation\\n    self.__expiry = expiry\\n\\n  def modify_reputation(self, reputation):\\n    None","subPath":"photo-bounty","fileName":"solution.py"},"question_java":{"language":"java","code":"public interface Search {\\n  public static List<Question> search(String query);\\n}\\n\\npublic class Question implements Search {\\n  private String title;\\n  private String description;\\n  private int viewCount;\\n  private int voteCount;\\n  private Date creationTime;\\n  private Date updateTime;\\n  private QuestionStatus status;\\n  private QuestionClosingRemark closingRemark;\\n\\n  private Member askingMember;\\n  private Bounty bounty;\\n  private List<Photo> photos;\\n  private List<Comment> comments;\\n  private List<Answer> answers;\\n\\n  public boolean close();\\n  public boolean undelete();\\n  public boolean addComment(Comment comment);\\n  public boolean addBounty(Bounty bounty);\\n\\n  public static List<Question> search(String query) {\\n    // return all questions containing the string query in their title or description.\\n  }\\n}\\n\\npublic class Comment {\\n  private String text;\\n  private Date creationTime;\\n  private int flagCount;\\n  private int voteCount;\\n\\n  private Member askingMember;\\n\\n  public boolean incrementVoteCount();\\n}\\n\\npublic class Answer {\\n  private String answerText;\\n  private boolean accepted;\\n  private int voteCount;\\n  private int flagCount;\\n  private Date creationTime;\\n\\n  private Member creatingMember;\\n  private List<Photo> photos;\\n\\n  public boolean incrementVoteCount();\\n}","subPath":"question","fileName":"solution.java"},"question_py":{"language":"py","code":"from abc import ABC, abstractmethod\\n\\nclass Search(ABC):\\n  def search(self, query):\\n    None\\n\\nimport datetime\\n\\nclass Question(Search):\\n  def __init__(self, title, description, bounty, asking_member):\\n    self.__title = title\\n    self.__description = description\\n    self.__view_count = 0\\n    self.__vote_count = 0\\n    self.__creation_time = datetime.datetime.now()\\n    self.__update_time = datetime.datetime.now()\\n    self.__status = QuestionStatus.OPEN\\n    self.__closing_remark = QuestionClosingRemark.DUPLICATE\\n\\n    self.__bounty = bounty\\n    self.__asking_member = asking_member\\n    self.__photos = []\\n    self.__comments = []\\n    self.__answers = []\\n\\n  def close(self):\\n    None\\n\\n  def undelete(self):\\n    None\\n\\n  def add_comment(self, comment):\\n    None\\n\\n  def add_bounty(self, bounty):\\n    None\\n\\n  def search(self, query):\\n    # return all questions containing the string query in their title or description.\\n    None\\n\\n\\nclass Comment:\\n  def __init__(self, text, member):\\n    self.__text = text\\n    self.__creation_time = datetime.datetime.now()\\n    self.__flag_count = 0\\n    self.__vote_count = 0\\n    self.__asking_member = member\\n\\n  def increment_vote_count(self):\\n    None\\n\\n\\nclass Answer:\\n  def __init__(self, text, member):\\n    self.__answer_text = text\\n    self.__accepted = False\\n    self.__vote_count = 0\\n    self.__flag_count = 0\\n    self.__creation_time = datetime.datetime.now()\\n    self.__creating_member = member\\n    self.__photos = []\\n\\n  def increment_vote_count(self):\\n    None","subPath":"question","fileName":"solution.py"},"tag_java":{"language":"java","code":"public class Badge {\\n  private String name;\\n  private String description;\\n}\\n\\npublic class Tag {\\n  private String name;\\n  private String description;\\n  private long dailyAskedFrequency;\\n  private long weeklyAskedFrequency;\\n}\\n\\npublic class Notification {\\n  private int notificationId;\\n  private Date createdOn;\\n  private String content;\\n\\n  public boolean sendNotification();\\n}","subPath":"tag","fileName":"solution.java"},"tag_py":{"language":"py","code":"class Badge:\\n  def __init__(self, name, description):\\n    self.__name = name\\n    self.__description = description\\n\\n\\nclass Tag:\\n  def __init__(self, name, description):\\n    self.__name = name\\n    self.__description = description\\n    self.__daily_asked_frequency = 0\\n    self.__weekly_asked_frequency = 0\\n\\n# import datetime\\n\\n\\nclass Notification:\\n  def __init__(self, id, content):\\n    self.__notification_id = id\\n    self.__created_on = datetime.datetime.now()\\n    self.__content = content\\n\\n  def send_notification(self):\\n    None","subPath":"tag","fileName":"solution.py"}}')}}]);