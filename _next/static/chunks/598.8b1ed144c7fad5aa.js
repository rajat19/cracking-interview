"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[598],{50598:n=>{n.exports=JSON.parse('{"java":{"language":"java","code":"class Solution {\\n    public boolean isMatch(String text, String pattern) {\\n        boolean[][] dp = new boolean[text.length() + 1][pattern.length() + 1];\\n        dp[text.length()][pattern.length()] = true;\\n\\n        for (int i = text.length(); i >= 0; i--){\\n            for (int j = pattern.length() - 1; j >= 0; j--){\\n                boolean first_match = (i < text.length() &&\\n                                       (pattern.charAt(j) == text.charAt(i) ||\\n                                        pattern.charAt(j) == \'.\'));\\n                if (j + 1 < pattern.length() && pattern.charAt(j+1) == \'*\'){\\n                    dp[i][j] = dp[i][j+2] || first_match && dp[i+1][j];\\n                } else {\\n                    dp[i][j] = first_match && dp[i+1][j+1];\\n                }\\n            }\\n        }\\n        return dp[0][0];\\n    }\\n}","subPath":"","fileName":"solution.java"},"py":{"language":"py","code":"class Solution:\\n    def isMatch(self, s: str, p: str) -> bool:\\n        lp, ls = len(p), len(s)\\n        dp = [[False] * (lp+1) for _ in range(ls + 1)]\\n        dp[-1][-1] = True\\n        \\n        for i in range(ls, -1, -1):\\n            for j in range(lp - 1, -1, -1):\\n                match = i < ls and p[j] in {s[i], \'.\'}\\n                if j + 1 < lp and p[j+1] == \'*\':\\n                    dp[i][j] = dp[i][j+2] or match and dp[i+1][j]\\n                else:\\n                    dp[i][j] = match and dp[i+1][j+1]\\n        return dp[0][0]","subPath":"","fileName":"solution.py"}}')}}]);