"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[2598],{32598:t=>{t.exports=JSON.parse('{"cpp":{"language":"cpp","code":"class Solution {\\npublic:\\n    int largestRectangleArea(vector<int>& heights) {\\n        stack<int> stack;\\n        int maxArea = 0, n = heights.size(), i=0;\\n        while(i<n) {\\n            if (stack.empty() || heights[i] >= heights[stack.top()]) {\\n                stack.push(i++);\\n            } else {\\n                int top = stack.top();\\n                stack.pop();\\n                int width = stack.empty() ? i : i - stack.top() - 1;\\n                maxArea = max(maxArea, width*heights[top]);\\n            }\\n        }\\n        while(!stack.empty()) {\\n            int top = stack.top();\\n            stack.pop();\\n            int width = stack.empty() ? n : n - stack.top() - 1;\\n            maxArea = max(maxArea, width*heights[top]);\\n        }\\n        return maxArea;\\n    }\\n};","subPath":"","fileName":"solution.cpp"},"go":{"language":"go","code":"func largestRectangleArea(heights []int) int {\\n    i, maxArea, n := 0, 0, len(heights)\\n    var stack []int\\n    top := -1\\n    for i < n {\\n        if len(stack) == 0 || heights[i] >= heights[stack[len(stack) - 1]] {\\n            stack = append(stack, i)\\n            i++\\n        } else {\\n            top, stack = stack[len(stack)-1], stack[:len(stack)-1]\\n            width := i\\n            if len(stack) > 0 {\\n                width = i - stack[len(stack)-1] -1\\n            }\\n            area := heights[top]*width\\n            if area > maxArea {\\n                maxArea = area\\n            }\\n        }\\n    }\\n    for len(stack) > 0 {\\n        top, stack = stack[len(stack)-1], stack[:len(stack)-1]\\n        width := i\\n        if len(stack) > 0 {\\n            width = i - stack[len(stack)-1] -1\\n        }\\n        area := heights[top]*width\\n        if area > maxArea {\\n            maxArea = area\\n        }\\n    }\\n    return maxArea\\n}","subPath":"","fileName":"solution.go"},"java":{"language":"java","code":"class Solution {\\n    public int largestRectangleArea(int[] heights) {\\n        Stack<Integer> stack = new Stack<>();\\n        int n = heights.length;\\n        int maxArea = 0;\\n        int i=0;\\n        while(i<n) {\\n            if (stack.isEmpty() || heights[stack.peek()] <= heights[i]) {\\n                stack.push(i++);\\n            } else {\\n                int top = stack.pop();\\n                int width = stack.isEmpty() ? i : i - stack.peek() - 1;\\n                maxArea = Math.max(maxArea, heights[top]*width);\\n            }\\n        }\\n        while(!stack.isEmpty()) {\\n            int top = stack.pop();\\n            int width = stack.isEmpty() ? n : n - stack.peek() - 1;\\n            maxArea = Math.max(maxArea, heights[top]*width);\\n        }\\n        return maxArea;\\n    }\\n}","subPath":"","fileName":"solution.java"},"py":{"language":"py","code":"class Solution:\\n    def largestRectangleArea(self, heights: List[int]) -> int:\\n        i, n, maxArea = 0, len(heights), 0\\n        stack = []\\n        while i<n:\\n            if not stack or heights[stack[-1]] <= heights[i]:\\n                stack.append(i)\\n                i += 1\\n            else:\\n                top = stack.pop()\\n                width = i if not stack else i-stack[-1]-1\\n                maxArea = max(maxArea, heights[top]*width)\\n        while stack:\\n            top = stack.pop()\\n            width = i if not stack else i-stack[-1]-1\\n            maxArea = max(maxArea, heights[top]*width)\\n        return maxArea","subPath":"","fileName":"solution.py"}}')}}]);