"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3562],{83562:n=>{n.exports=JSON.parse('{"cpp":{"language":"cpp","code":"class Solution {\\npublic:\\n    string multiply(string num1, string num2) {\\n        if (num1 == \\"0\\" || num2 == \\"0\\") return \\"0\\";\\n        int n1 = num1.size(), n2 = num2.size();\\n        vector<int> result(n1+n2, 0);\\n        for(int i=n1-1; i>=0; i--) {\\n            for(int j=n2-1; j>=0; j--) {\\n                int mult = (num1[i] - \'0\')*(num2[j] - \'0\');\\n                int sum = mult + result[i + j + 1];\\n                result[i + j + 1] = sum % 10;\\n                result[i + j] += sum / 10;\\n            }\\n        }\\n\\n        int i = 0;\\n        while(i < result.size() && result[i] == 0) {\\n            i++;\\n        }\\n\\n        string res = \\"\\";\\n        while(i < result.size()) {\\n            res.push_back(result[i++] + \'0\');\\n        }\\n        return res;\\n    }\\n};","subPath":"","fileName":"solution.cpp"},"java":{"language":"java","code":"class Solution {\\n    public String multiply(String num1, String num2) {\\n        int m = num1.length(), n = num2.length();\\n        int[] pos = new int[m + n];\\n\\n        for(int i = m - 1; i >= 0; i--) {\\n            for(int j = n - 1; j >= 0; j--) {\\n                int mul = (num1.charAt(i) - \'0\') * (num2.charAt(j) - \'0\');\\n                int p1 = i + j, p2 = i + j + 1;\\n                int sum = mul + pos[p2];\\n\\n                pos[p1] += sum / 10;\\n                pos[p2] = (sum) % 10;\\n            }\\n        }\\n\\n        StringBuilder sb = new StringBuilder();\\n        for(int p : pos) if(!(sb.length() == 0 && p == 0)) sb.append(p);\\n        return sb.length() == 0 ? \\"0\\" : sb.toString();\\n    }\\n}","subPath":"","fileName":"solution.java"},"py":{"language":"py","code":"class Solution(object):\\n    def multiply(self, num1, num2):\\n        \\"\\"\\"\\n        :type num1: str\\n        :type num2: str\\n        :rtype: str\\n        \\"\\"\\"\\n        n, m = len(num1), len(num2)\\n        result = [0] * (n + m)\\n\\n        for i in range(n - 1, -1, -1):\\n            for j in range(m - 1, -1, -1):\\n                mul = (ord(num1[i]) - ord(\'0\')) * (ord(num2[j]) - ord(\'0\'))\\n                sum_ = mul + result[i + j + 1]\\n                result[i + j + 1] = sum_ % 10\\n                result[i + j] += sum_ // 10\\n\\n        product = \'\'.join(map(str, result)).lstrip(\'0\')\\n        return product if product else \\"0\\"","subPath":"","fileName":"solution.py"}}')}}]);