"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5053],{55053:n=>{n.exports=JSON.parse('{"cpp":{"language":"cpp","code":"/**\\n * Definition for singly-linked list.\\n * struct ListNode {\\n *     int val;\\n *     ListNode *next;\\n *     ListNode() : val(0), next(nullptr) {}\\n *     ListNode(int x) : val(x), next(nullptr) {}\\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\\n        if (head == nullptr || head->next == nullptr) return nullptr;\\n        ListNode *slow = head, *fast = head;\\n        while(n>0 && fast != nullptr) {\\n            fast = fast->next;\\n            n--;\\n        }\\n        if (fast == nullptr) return head->next;\\n        while(fast != nullptr && fast->next != nullptr) {\\n            slow = slow->next;\\n            fast = fast->next;\\n        }\\n        slow->next = slow->next->next;\\n        return head;\\n    }\\n};","subPath":"","fileName":"solution.cpp"},"java":{"language":"java","code":"/**\\n * Definition for singly-linked list.\\n * public class ListNode {\\n *     int val;\\n *     ListNode next;\\n *     ListNode() {}\\n *     ListNode(int val) { this.val = val; }\\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\\n * }\\n */\\nclass Solution {\\n    public ListNode removeNthFromEnd(ListNode head, int n) {\\n        if (head == null || head.next == null)  return null;\\n        ListNode slow = head, fast = head;\\n        while(n > 0 && fast != null) {\\n            fast = fast.next;\\n            n--;\\n        }\\n        if (fast == null) return head.next;\\n        while(fast != null && fast.next != null) {\\n            slow = slow.next;\\n            fast = fast.next;\\n        }\\n        slow.next = slow.next.next;\\n        return head;\\n    }\\n}","subPath":"","fileName":"solution.java"},"py":{"language":"py","code":"from typing import Optional\\n\\n\\n# Definition for singly-linked list.\\nclass ListNode:\\n    def __init__(self, val=0, next=None):\\n        self.val = val\\n        self.next = next\\n\\n\\nclass Solution:\\n    def removeNthFromEnd(self, head: Optional[ListNode], n: int) -> Optional[ListNode]:\\n        if not head or not head.next:\\n            return None\\n        slow, fast = head, head\\n        while n > 0 and fast:\\n            fast = fast.next\\n            n -= 1\\n        if not fast:\\n            return head.next\\n        while fast and fast.next:\\n            slow = slow.next\\n            fast = fast.next\\n        slow.next = slow.next.next\\n        return head","subPath":"","fileName":"solution.py"}}')}}]);