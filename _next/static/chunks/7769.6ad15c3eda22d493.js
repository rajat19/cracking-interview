"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7769],{37769:n=>{n.exports=JSON.parse('{"java":{"language":"java","code":"class Solution {\\n    public String removeDuplicateLetters(String s) {\\n\\n        int[] occ = new int[26];\\n        boolean[] visited = new boolean[26];\\n        char[] ch = s.toCharArray();\\n        for(char c: ch){\\n            occ[c - \'a\']++;\\n        }\\n        Stack<Character> stack = new Stack<>();\\n        int index;\\n        for(char c: ch){\\n            index= c-\'a\';\\n            occ[index]--;\\n            if(visited[index]) continue;\\n            while(!stack.isEmpty() && c < stack.peek() && occ[stack.peek() - \'a\'] != 0){\\n                visited[stack.pop() - \'a\']=false;\\n            }\\n            stack.push(c);\\n            visited[index]=true;\\n        }\\n\\n        StringBuilder sb = new StringBuilder();\\n        while(!stack.isEmpty()){\\n            sb.insert(0,stack.pop());\\n        }\\n        return sb.toString();\\n    }\\n}","subPath":"","fileName":"solution.java"},"py":{"language":"py","code":"class Solution:\\n    def removeDuplicateLetters(self, s: str) -> str:\\n        stack, occ, visited = [], {}, {}\\n        for c in s:\\n            occ[c] = occ.get(c, 0) + 1\\n            visited[c] = False\\n        for c in s:\\n            occ[c] -= 1\\n            if visited[c]:\\n                continue\\n            while stack and c < stack[-1] and occ[stack[-1]] > 0:\\n                visited[stack.pop()] = False\\n            visited[c] = True\\n            stack.append(c)\\n        return \'\'.join(stack)","subPath":"","fileName":"solution.py"}}')}}]);