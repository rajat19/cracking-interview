"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5710],{85710:n=>{n.exports=JSON.parse('{"java":{"language":"java","code":"class Solution {\\n    public int matchingPairs(String s, String t) {\\n        // Write your code here\\n        int match = 0;\\n        Set<String> unmatched = new HashSet<>();\\n        Set<Character> matched = new HashSet<>();\\n        boolean hasDup = false;\\n        int n = s.length();\\n        for(int i=0; i<n; i++) {\\n            if (s.charAt(i) == t.charAt(i)) {\\n                match++;\\n                if (matched.contains(s.charAt(i))) hasDup = true;\\n                matched.add(s.charAt(i));\\n            } else {\\n                unmatched.add(s.charAt(i)+\\"\\"+t.charAt(i));\\n            }\\n        }\\n        if (match == n) return hasDup ? n : n-2;\\n        if (match == n-1) {\\n            String onlyUnmatched = (String)unmatched.toArray()[0];\\n            if (hasDup || matched.contains(onlyUnmatched.charAt(0)) || matched.contains(onlyUnmatched.charAt(1))) {\\n                return match;\\n            }\\n            return match - 1;\\n        }\\n\\n        for(String um: unmatched) {\\n            if (unmatched.contains(um.charAt(1)+\\"\\"+um.charAt(0))) {\\n                return match+2;\\n            }\\n        }\\n\\n        Set<Character> unmatchedS = new HashSet<>();\\n        Set<Character> unmatchedT = new HashSet<>();\\n\\n        for(String um : unmatched) {\\n            if(unmatchedS.contains(um.charAt(1)) || unmatchedT.contains(um.charAt(0))) {\\n                return match + 1;\\n            }\\n            unmatchedS.add(um.charAt(0));\\n            unmatchedT.add(um.charAt(1));\\n        }\\n        return match;\\n    }\\n}","subPath":"","fileName":"solution.java"}}')}}]);