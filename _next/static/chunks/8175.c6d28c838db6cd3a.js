"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8175],{98175:n=>{n.exports=JSON.parse('{"c":{"language":"c","code":"int search(int* nums, int numsSize, int target) {\\n    int left = 0, right = numsSize-1;\\n    while(left <= right) {\\n        int mid = left + (right - left)/2;\\n        if (nums[mid] == target) {\\n            return mid;\\n        }\\n        if (nums[left] <= nums[mid]) {\\n            if (nums[left] <= target && target <= nums[mid]) {\\n                right = mid - 1;\\n            } else {\\n                left = mid + 1;\\n            }\\n        } else {\\n            if (nums[mid] <= target && target <= nums[right]) {\\n                left = mid + 1;\\n            } else {\\n                right = mid - 1;\\n            }\\n        }\\n    }\\n    return -1;\\n}","subPath":"","fileName":"solution.c"},"cpp":{"language":"cpp","code":"class Solution {\\npublic:\\n    int search(vector<int>& nums, int target) {\\n        int low = 0, high = nums.size() - 1, mid;\\n        while(low <= high) {\\n            mid = low + (high-low)/2;\\n            cout<<low<<\\" \\"<<mid<<\\" \\"<<high<<endl;\\n            if (nums[mid] == target) return mid;\\n            if (nums[low] <= nums[mid]) {\\n                if (nums[low] <= target && target < nums[mid]) {\\n                    high = mid-1;\\n                } else {\\n                    low = mid+1;\\n                }\\n            } else {\\n                if (nums[mid] < target && target <= nums[high]) {\\n                    low = mid+1;\\n                } else {\\n                    high = mid-1;\\n                }\\n            }\\n        }\\n        return -1;\\n    }\\n};","subPath":"","fileName":"solution.cpp"},"go":{"language":"go","code":"package search_in_rotated_sorted_array\\n\\nfunc search(nums []int, target int) int {\\n\\tlow, high := 0, len(nums)-1\\n\\tfor low <= high {\\n\\t\\tmid := low + (high-low)/2\\n\\t\\tif nums[mid] == target {\\n\\t\\t\\treturn mid\\n\\t\\t}\\n\\t\\tif nums[low] <= nums[mid] {\\n\\t\\t\\tif nums[low] <= target && target < nums[mid] {\\n\\t\\t\\t\\thigh = mid-1\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tlow = mid+1\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tif nums[mid] < target && target <= nums[high] {\\n\\t\\t\\t\\tlow = mid+1\\n\\t\\t\\t} else {\\n\\t\\t\\t\\thigh = mid-1\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn -1\\n}","subPath":"","fileName":"solution.go"},"java":{"language":"java","code":"class Solution {\\n    public int search(int[] nums, int target) {\\n        int low = 0, high = nums.length-1;\\n        while(low <= high) {\\n            int mid = low + (high-low)/2;\\n            if (nums[mid] == target) return mid;\\n            if (nums[low] <= nums[mid]) {\\n                if (nums[low] <= target && target < nums[mid]) {\\n                    high = mid-1;\\n                } else {\\n                    low = mid+1;\\n                }\\n            } else {\\n                if (nums[mid] < target && target <= nums[high]) {\\n                    low = mid+1;\\n                } else {\\n                    high = mid-1;\\n                }\\n            }\\n        }\\n        return -1;\\n    }\\n}","subPath":"","fileName":"solution.java"},"py":{"language":"py","code":"class Solution:\\n    def search(self, nums: List[int], target: int) -> int:\\n        if not nums: return -1\\n        l = len(nums)\\n        ll, ul = 0, l-1\\n        while ll <= ul:\\n            m = (ll + ul) // 2\\n            print(ll, m, ul)\\n            if nums[m] == target:\\n                return m\\n            if nums[ll] <= nums[m]:\\n                if nums[ll] <= target <= nums[m]:\\n                    ul = m - 1\\n                else:\\n                    ll = m + 1\\n            else:\\n                if nums[m] <= target <= nums[ul]:\\n                    ll = m + 1\\n                else:\\n                    ul = m - 1\\n            \\n        return -1","subPath":"","fileName":"solution.py"}}')}}]);