"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[222],{20222:n=>{n.exports=JSON.parse('{"cpp":{"language":"cpp","code":"class Solution {\\npublic:\\n    void merge(vector<int> &count, vector<pair<int, int> > &v, int left, int mid, int right) {\\n        vector<pair<int, int> > tmp(right-left+1);\\n        int i = left;\\n        int j = mid+1;\\n        int k = 0;\\n\\n        while (i <= mid && j <= right) {\\n            if (v[i].first <= v[j].first) {\\n                tmp[k++] = v[j++];\\n            }\\n            else {\\n                count[v[i].second] += right - j + 1;\\n                tmp[k++] = v[i++];\\n            }\\n        }\\n        while (i <= mid) {\\n            tmp[k++] = v[i++];\\n        }\\n        while (j <= right) {\\n            tmp[k++] = v[j++];\\n        }\\n        for (int i = left; i <= right; i++)\\n            v[i] = tmp[i-left];\\n    }\\n\\n    void mergeSort(vector<int> &count, vector<pair<int, int> > &v, int left, int right) {\\n        if (left >= right)\\n            return;\\n\\n        int mid = left + (right-left)/2;\\n        mergeSort(count, v, left, mid);\\n        mergeSort(count, v, mid+1, right);\\n        merge(count, v, left, mid, right);\\n    }\\n\\n    vector<int> countSmaller(vector<int>& nums) {\\n        int N = nums.size();\\n\\n        vector<pair<int, int> > v(N);\\n        for (int i = 0; i < N; i++)\\n            v[i] = make_pair(nums[i], i);\\n\\n        vector<int> count(N, 0);\\n        mergeSort(count, v, 0, N-1);\\n\\n        return count;\\n    }\\n};","subPath":"","fileName":"solution.cpp"},"java":{"language":"java","code":"class Solution {\\n    public List<Integer> countSmaller(int[] nums) {\\n        int n = nums.length;\\n        Pair[] pairs = new Pair[n];\\n        for(int i=0; i<n; i++) {\\n            pairs[i] = new Pair(nums[i], i);\\n        }\\n\\n        int[] count = new int[n];\\n        mergeSort(count, pairs, 0, n-1);\\n        List<Integer> result = new ArrayList<>();\\n        for(int c: count) result.add(c);\\n        return result;\\n    }\\n\\n    private void mergeSort(int[] count, Pair[] pairs, int left, int right) {\\n        if (left >= right) return;\\n        int mid = left + (right-left)/2;\\n        mergeSort(count, pairs, left, mid);\\n        mergeSort(count, pairs, mid+1, right);\\n        merge(count, pairs, left, mid, right);\\n    }\\n\\n    private void merge(int[] count, Pair[] pairs, int left, int mid, int right) {\\n        Pair[] temp = new Pair[right-left+1];\\n        int i=left, j=mid+1, k=0;\\n        while(i <= mid && j<= right) {\\n            if (pairs[i].val <= pairs[j].val) {\\n                temp[k++] = pairs[j++];\\n            } else {\\n                count[pairs[i].pos] += right - j + 1;\\n                temp[k++] = pairs[i++];\\n            }\\n        }\\n        while(i <= mid) {\\n            temp[k++] = pairs[i++];\\n        }\\n        while(j <= right) {\\n            temp[k++] = pairs[j++];\\n        }\\n        for(i=left; i<= right; i++) {\\n            pairs[i] = temp[i-left];\\n        }\\n    }\\n}\\n\\nclass Pair {\\n    int val;\\n    int pos;\\n\\n    public Pair(int val, int pos) {\\n        this.val = val;\\n        this.pos = pos;\\n    }\\n}","subPath":"","fileName":"solution.java"}}')}}]);