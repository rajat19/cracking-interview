"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8045],{88045:e=>{e.exports=JSON.parse('{"accounts_java":{"language":"java","code":"// For simplicity, we are not defining getter and setter functions. The reader can\\n// assume that all class attributes are private and accessed through their respective\\n// public getter methods and modified only through their public methods function.\\n\\npublic class Account {\\n  private String userName;\\n  private String password;\\n  private AccountStatus status;\\n  private String name;\\n  private Address shippingAddress;\\n  private String email;\\n  private String phone;\\n\\n  private List<CreditCard> creditCards;\\n  private List<ElectronicBankTransfer> bankAccounts;\\n\\n  public boolean addProduct(Product product);\\n  public boolean addProductReview(ProductReview review);\\n  public boolean resetPassword();\\n}\\n\\npublic abstract class Customer {\\n  private ShoppingCart cart;\\n  private Order order;\\n\\n  public ShoppingCart getShoppingCart();\\n  public bool addItemToCart(Item item);\\n  public bool removeItemFromCart(Item item);\\n}\\n\\npublic class Guest extends Customer {\\n  public bool registerAccount();\\n}\\n\\npublic class Member extends Customer {\\n  private Account account;\\n  public OrderStatus placeOrder(Order order);\\n}","subPath":"accounts","fileName":"solution.java"},"accounts_py":{"language":"py","code":"# For simplicity, we are not defining getter and setter functions. The reader can\\n# assume that all class attributes are private and accessed through their respective\\n# public getter methods and modified only through their public methods function.\\n\\n\\nclass Account:\\n  def __init__(self, user_name, password, name, email, phone, shipping_address, status=AccountStatus):\\n    self.__user_name = user_name\\n    self.__password = password\\n    self.__name = name\\n    self.__email = email\\n    self.__phone = phone\\n    self.__shipping_address = shipping_address\\n    self.__status = status.ACTIVE\\n    self.__credit_cards = []\\n    self.__bank_accounts = []\\n\\n  def add_product(self, product):\\n    None\\n\\n  def add_productReview(self, review):\\n    None\\n\\n  def reset_password(self):\\n    None\\n\\n\\nfrom abc import ABC, abstractmethod\\n\\nclass Customer(ABC):\\n  def __init__(self, cart, order):\\n    self.__cart = cart\\n    self.__order = order\\n\\n  def get_shopping_cart(self):\\n    return self.__cart\\n\\n  def add_item_to_cart(self, item):\\n    None\\n\\n  def remove_item_from_cart(self, item):\\n    None\\n\\n\\nclass Guest(Customer):\\n  def register_account(self):\\n    None\\n\\n\\nclass Member(Customer):\\n  def __init__(self, account):\\n    self.__account = account\\n\\n  def place_order(self, order):\\n    None","subPath":"accounts","fileName":"solution.py"},"cart_java":{"language":"java","code":"public class Item {\\n  private String productID;\\n  private int quantity;\\n  private double price;\\n\\n  public boolean updateQuantity(int quantity);\\n}\\n\\npublic class ShoppingCart {\\n  private List<Items> items;\\n\\n  public boolean addItem(Item item);\\n  public boolean removeItem(Item item);\\n  public boolean updateItemQuantity(Item item, int quantity);\\n  public List<Item> getItems();\\n  public boolean checkout();\\n}\\n\\npublic class OrderLog {\\n  private String orderNumber;\\n  private Date creationDate;\\n  private OrderStatus status;\\n}\\n\\npublic class Order {\\n  private String orderNumber;\\n  private OrderStatus status;\\n  private Date orderDate;\\n  private List<OrderLog> orderLog;\\n\\n  public boolean sendForShipment();\\n  public boolean makePayment(Payment payment);\\n  public boolean addOrderLog(OrderLog orderLog);\\n}","subPath":"cart","fileName":"solution.java"},"cart_py":{"language":"py","code":"class Item:\\n  def __init__(self, id, quantity, price):\\n    self.__product_id = id\\n    self.__quantity = quantity\\n    self.__price = price\\n\\n  def update_quantity(self, quantity):\\n    None\\n\\n\\nclass ShoppingCart:\\n  def __init__(self):\\n    self.__items = []\\n\\n  def add_item(self, item):\\n    None\\n\\n  def remove_item(self, item):\\n    None\\n\\n  def update_item_quantity(self, item, quantity):\\n    None\\n\\n  def get_items(self):\\n    return self.__items\\n\\n  def checkout(self):\\n    None\\n\\n\\nclass OrderLog:\\n  def __init__(self, order_number, status=OrderStatus.PENDING):\\n    self.__order_number = order_number\\n    self.__creation_date = datetime.date.today()\\n    self.__status = status\\n\\n\\nclass Order:\\n  def __init__(self, order_number, status=OrderStatus.PENDING):\\n    self.__order_number = 0\\n    self.__status = status\\n    self.__order_date = datetime.date.today()\\n    self.__order_log = []\\n\\n  def send_for_shipment(self):\\n    None\\n\\n  def make_payment(self, payment):\\n    None\\n\\n  def add_order_log(self, order_log):\\n    None","subPath":"cart","fileName":"solution.py"},"enums_java":{"language":"java","code":"public class Address {\\n  private String streetAddress;\\n  private String city;\\n  private String state;\\n  private String zipCode;\\n  private String country;\\n}\\n\\npublic enum OrderStatus {\\n  UNSHIPPED, PENDING, SHIPPED, COMPLETED, CANCELED, REFUND_APPLIED\\n}\\n\\npublic enum AccountStatus {\\n  ACTIVE, BLOCKED, BANNED, COMPROMISED, ARCHIVED, UNKNOWN\\n}\\n\\npublic enum ShipmentStatus {\\n  PENDING, SHIPPED, DELIVERED, ON_HOLD,\\n}\\n\\npublic enum PaymentStatus {\\n  UNPAID, PENDING, COMPLETED, FILLED, DECLINED, CANCELLED, ABANDONED, SETTLING, SETTLED, REFUNDED\\n}","subPath":"enums","fileName":"solution.java"},"enums_py":{"language":"py","code":"class Address:\\n  def __init__(self, street, city, state, zip_code, country):\\n    self.__street_address = street\\n    self.__city = city\\n    self.__state = state\\n    self.__zip_code = zip_code\\n    self.__country = country\\n\\n\\nclass OrderStatus(Enum):\\n  UNSHIPPED, PENDING, SHIPPED, COMPLETED, CANCELED, REFUND_APPLIED = 1, 2, 3, 4, 5, 6\\n\\n\\nclass AccountStatus(Enum):\\n  ACTIVE, BLOCKED, BANNED, COMPROMISED, ARCHIVED, UNKNOWN = 1, 2, 3, 4, 5, 6\\n\\n\\nclass ShipmentStatus(Enum):\\n  PENDING, SHIPPED, DELIVERED, ON_HOLD = 1, 2, 3, 4\\n\\n\\nclass PaymentStatus(Enum):\\n  UNPAID, PENDING, COMPLETED, FILLED, DECLINED, CANCELLED, ABANDONED, SETTLING, SETTLED, REFUNDED = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10","subPath":"enums","fileName":"solution.py"},"product_java":{"language":"java","code":"public class ProductCategory {\\n  private String name;\\n  private String description;\\n}\\n\\npublic class ProductReview {\\n  private int rating;\\n  private String review;\\n\\n  private Member reviewer;\\n}\\n\\npublic class Product {\\n  private String productID;\\n  private String name;\\n  private String description;\\n  private double price;\\n  private ProductCategory category;\\n  private int availableItemCount;\\n\\n  private Account seller;\\n\\n  public int getAvailableCount();\\n  public boolean updatePrice(double newPrice);\\n}","subPath":"product","fileName":"solution.java"},"product_py":{"language":"py","code":"class ProductCategory:\\n  def __init__(self, name, description):\\n    self.__name = name\\n    self.__description = description\\n\\n\\nclass ProductReview:\\n  def __init__(self, rating, review, reviewer):\\n    self.__rating = rating\\n    self.__review = review\\n    self.__reviewer = reviewer\\n\\n\\nclass Product:\\n  def __init__(self, id, name, description, price, category, seller_account):\\n    self.__product_id = id\\n    self.__name = name\\n    self.__description = description\\n    self.__price = price\\n    self.__category = category\\n    self.__available_item_count = 0\\n\\n    self.__seller = seller_account\\n\\n  def get_available_count(self):\\n    return self.__available_item_count\\n\\n  def update_price(self, new_price):\\n    None","subPath":"product","fileName":"solution.py"},"search_java":{"language":"java","code":"public interface Search {\\n  public List<Product> searchProductsByName(String name);\\n  public List<Product> searchProductsByCategory(String category);\\n}\\n\\npublic class Catalog implements Search {\\n   HashMap<String, List<Product>> productNames;\\n   HashMap<String, List<Product>> productCategories;\\n\\n  public List<Product> searchProductsByName(String name) {\\n    return productNames.get(name);\\n  }\\n\\n  public List<Product> searchProductsByCategory(String category) {\\n    return productCategories.get(category);\\n  }\\n}","subPath":"search","fileName":"solution.java"},"search_py":{"language":"py","code":"from abc import ABC, abstractmethod\\n\\nclass Search(ABC):\\n  def search_products_by_name(self, name):\\n    None\\n\\n  def search_products_by_category(self, category):\\n    None\\n\\n\\nclass Catalog(Search):\\n  def __init__(self):\\n    self.__product_names = {}\\n    self.__product_categories = {}\\n\\n  def search_products_by_name(self, name):\\n    return self.product_names.get(name)\\n\\n  def search_products_by_category(self, category):\\n    return self.product_categories.get(category)","subPath":"search","fileName":"solution.py"},"shipment_java":{"language":"java","code":"public class ShipmentLog {\\n  private String shipmentNumber;\\n  private ShipmentStatus status;\\n  private Date creationDate;\\n}\\n\\npublic class Shipment {\\n  private String shipmentNumber;\\n  private Date shipmentDate;\\n  private Date estimatedArrival;\\n  private String shipmentMethod;\\n  private List<ShipmentLog> shipmentLogs;\\n\\n  public boolean addShipmentLog(ShipmentLog shipmentLog);\\n}\\n\\npublic abstract class Notification {\\n  private int notificationId;\\n  private Date createdOn;\\n  private String content;\\n\\n  public boolean sendNotification(Account account);\\n}","subPath":"shipment","fileName":"solution.java"},"shipment_py":{"language":"py","code":"class ShipmentLog:\\n  def __init__(self, shipment_number, status=ShipmentStatus.PENDING):\\n    self.__shipment_number = shipment_number\\n    self.__status = status\\n    self.__creation_date = datetime.date.today()\\n\\n\\nclass Shipment:\\n  def __init__(self, shipment_numbe, shipment_methodr):\\n    self.__shipment_number = shipment_number\\n    self.__shipment_date = datetime.date.today()\\n    self.__estimated_arrival = datetime.date.today()\\n    self.__shipment_method = shipment_method\\n    self.__shipmentLogs = []\\n\\n  def add_shipment_log(self, shipment_log):\\n    None\\n\\n\\n# from abc import ABC, abstractmethod\\nclass Notification(ABC):\\n  def __init__(self, id, content):\\n    self.__notification_id = id\\n    self.__created_on = datetime.date.today()\\n    self.__content = content\\n\\n  def send_notification(self, account):\\n    None","subPath":"shipment","fileName":"solution.py"}}')}}]);