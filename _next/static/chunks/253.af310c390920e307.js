"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[253],{253:n=>{n.exports=JSON.parse('{"java":{"language":"java","code":"class Solution {\\n    public List<List<String>> groupAnagrams(String[] strs) {\\n        List<List<String>> result = new ArrayList<>();\\n        if (strs == null || strs.length == 0) {\\n            return result;\\n        }\\n        if (strs.length == 1) {\\n            result.add(Arrays.asList(strs));\\n            return result;\\n        }\\n\\n        HashMap<String, List<String>> groups = new HashMap<>();\\n        for (String s : strs) {\\n            String signature = getSignature(s);\\n            groups.putIfAbsent(signature, new ArrayList<>());\\n            groups.get(signature).add(s);\\n        }\\n\\n        return new ArrayList<>(groups.values());\\n    }\\n\\n    private String getSignature(String s) {\\n        int[] count = new int[26];\\n        for (int i = 0; i < s.length(); i++) {\\n            count[s.charAt(i) - \'a\']++;\\n        }\\n\\n        StringBuilder sb = new StringBuilder();\\n        for (int i = 0; i < 26; i++) {\\n            if (count[i] != 0) {\\n                sb.append((char) (\'a\' + i)).append(count[i]);\\n            }\\n        }\\n        return sb.toString();\\n    }\\n}","subPath":"","fileName":"solution.java"},"py":{"language":"py","code":"class Solution:\\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\\n        def signature(str):\\n            count = [0]*26\\n            for c in str:\\n                count[ord(c) - ord(\'a\')]+= 1\\n            sign = []\\n            for i in range(26):\\n                c = (chr)(i + ord(\'a\'))\\n                if count[i] != 0:\\n                    sign.append(f\\"${c}${count[i]}\\")\\n            return \'\'.join(sign)\\n\\n        groups = dict()\\n        for string in strs:\\n            sign = signature(string)\\n            if sign in groups:\\n                groups[sign].append(string)\\n            else:\\n                groups[sign] = [string]\\n        print(groups)\\n        res = []\\n        for value in groups.values():\\n            res.append(value)\\n        return res","subPath":"","fileName":"solution.py"}}')}}]);