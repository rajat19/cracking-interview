"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9100],{99100:n=>{n.exports=JSON.parse('{"java":{"language":"java","code":"class Solution {\\n    public int maxIncreaseKeepingSkyline(int[][] grid) {\\n        int sum = 0;\\n        int n = grid.length;\\n        int[] row = new int[n], col = new int[n];\\n        for(int i=0; i<n; i++) {\\n            for(int j=0; j<n; j++) {\\n                row[i] = Math.max(row[i], grid[i][j]);\\n                col[j] = Math.max(col[j], grid[i][j]);\\n            }\\n        }\\n        for(int i=0; i<n; i++) {\\n            for(int j=0; j<n; j++) {\\n                int nh = Math.min(row[i], col[j]);\\n                if (nh > grid[i][j]) sum += nh - grid[i][j];\\n            }\\n        }\\n        return sum;\\n    }\\n}","subPath":"","fileName":"solution.java"},"py":{"language":"py","code":"class Solution:\\n    def maxIncreaseKeepingSkyline(self, grid: List[List[int]]) -> int:\\n        n = len(grid)\\n        row, col = [0]*n, [0]*n\\n        for i in range(n):\\n            for j in range(n):\\n                row[i] = max(row[i], grid[i][j])\\n                col[j] = max(col[j], grid[i][j])\\n\\n        increase = 0\\n        for i in range(n):\\n            for j in range(n):\\n                newheight = min(row[i], col[j])\\n                if newheight > grid[i][j]:\\n                    increase += newheight - grid[i][j]\\n        return increase","subPath":"","fileName":"solution.py"}}')}}]);