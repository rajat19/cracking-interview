"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4446],{24446:n=>{n.exports=JSON.parse('{"cpp":{"language":"cpp","code":"class Solution {\\npublic:\\n    int superEggDrop(int K, int N) {\\n        vector<vector<int>> dp(N + 1, vector<int>(K + 1, 0));\\n        int m = 0;\\n        while (dp[m][K] < N) {\\n            m++;\\n            for (int k = 1; k <= K; ++k)\\n                dp[m][k] = dp[m - 1][k - 1] + dp[m - 1][k] + 1;\\n        }\\n        return m;\\n    }\\n};","subPath":"","fileName":"solution.cpp"},"java":{"language":"java","code":"class Solution {\\n    public int superEggDrop(int K, int N) {\\n        int[][] dp = new int[N + 1][K + 1];\\n        int m = 0;\\n        while (dp[m][K] < N) {\\n            ++m;\\n            for (int k = 1; k <= K; ++k)\\n                dp[m][k] = dp[m - 1][k - 1] + dp[m - 1][k] + 1;\\n        }\\n        return m;\\n    }\\n}","subPath":"","fileName":"solution.java"},"py":{"language":"py","code":"class Solution:\\n    def superEggDrop(self, K: int, N: int) -> int:\\n        dp = [[0] * (K + 1) for i in range(N + 1)]\\n        for m in range(1, N + 1):\\n            for k in range(1, K + 1):\\n                dp[m][k] = dp[m - 1][k - 1] + dp[m - 1][k] + 1\\n            if dp[m][K] >= N: return m","subPath":"","fileName":"solution.py"}}')}}]);