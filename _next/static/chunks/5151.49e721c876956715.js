"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5151],{75151:n=>{n.exports=JSON.parse('{"cpp":{"language":"cpp","code":"class Solution {\\npublic:\\n    int numIslands(vector<vector<char>>& grid) {\\n        int count = 0, m = grid.size(), n = grid[0].size();\\n        for(int i=0; i<m; i++) {\\n            for(int j=0; j<n; j++) {\\n                if (grid[i][j] == \'1\') {\\n                    dfs(grid, i, j, m, n);\\n                    count++;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n\\nprivate:\\n    void dfs(vector<vector<char>> &grid, int row, int col, int rowsize, int colsize) {\\n        if (row < 0 || row >= rowsize || col <0 || col >= colsize || grid[row][col] == \'0\') {\\n            return;\\n        }\\n        grid[row][col] = \'0\';\\n        dfs(grid, row-1, col, rowsize, colsize);\\n        dfs(grid, row+1, col, rowsize, colsize);\\n        dfs(grid, row, col-1, rowsize, colsize);\\n        dfs(grid, row, col+1, rowsize, colsize);\\n    }\\n};","subPath":"","fileName":"solution.cpp"},"java":{"language":"java","code":"class Solution {\\n    public int numIslands(char[][] grid) {\\n        int count = 0;\\n        int n = grid.length, m = grid[0].length;\\n        for(int i=0; i<n; i++) {\\n            for(int j=0; j<m; j++) {\\n                if (grid[i][j] == \'1\') {\\n                    count++;\\n                    dfs(grid, i, j, n, m);\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n    \\n    private void dfs(char[][] grid, int r, int c, int n, int m) {\\n        grid[r][c] = \'2\';\\n        if (r>0 && grid[r-1][c] == \'1\') dfs(grid, r-1, c, n, m);\\n        if (r<n-1 && grid[r+1][c] == \'1\') dfs(grid, r+1, c, n, m);\\n        if (c>0 && grid[r][c-1] == \'1\') dfs(grid, r, c-1, n, m);\\n        if (c<m-1 && grid[r][c+1] == \'1\') dfs(grid, r, c+1, n, m);\\n    }\\n}","subPath":"","fileName":"solution.java"},"py":{"language":"py","code":"class Solution:\\n    def numIslands(self, grid: List[List[str]]) -> int:\\n        def graph_search(grid: List[List[str]], i: int, j: int, m: int, n: int):\\n            if 0 <= i < m and 0 <= j < n and grid[i][j] == \'1\':\\n                grid[i][j] = \'0\'\\n                graph_search(grid, i+1, j, m, n)\\n                graph_search(grid, i-1, j, m, n)\\n                graph_search(grid, i, j+1, m, n)\\n                graph_search(grid, i, j-1, m, n)\\n        m: int = len(grid)\\n        n: int = len(grid[0])\\n        count = 0\\n        for i in range(m):\\n            for j in range(n):\\n                if grid[i][j] == \'1\':\\n                    count += 1\\n                    graph_search(grid, i, j, m, n)\\n        return count","subPath":"","fileName":"solution.py"}}')}}]);