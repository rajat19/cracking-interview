"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6267],{16267:n=>{n.exports=JSON.parse('{"cpp":{"language":"cpp","code":"class Solution {\\npublic:\\n    string minRemoveToMakeValid(string s) {\\n        stack<int> st;\\n        int n = s.length();\\n        for(int i=0; i<n; i++) {\\n            if (s[i] == \'(\') {\\n                st.push(i);\\n            } else if (s[i] == \')\') {\\n                if (!st.empty()) {\\n                    st.pop();\\n                } else {\\n                    s[i] = \'*\';\\n                }\\n            }\\n        }\\n        while(!st.empty()) {\\n            s[st.top()] = \'*\';\\n            st.pop();\\n        }\\n        s.erase(remove(s.begin(), s.end(), \'*\'), s.end());\\n        return s;\\n    }\\n};","subPath":"","fileName":"solution.cpp"},"java":{"language":"java","code":"class Solution {\\n    public String minRemoveToMakeValid(String s) {\\n        StringBuilder builder = new StringBuilder(s);\\n        Deque<Integer> stack = new ArrayDeque<>();\\n\\n        for(int i=0; i<s.length(); i++) {\\n            char c = s.charAt(i);\\n            if (c == \'(\') {\\n                stack.offerLast(i);\\n            } else if (c == \')\') {\\n                if (!stack.isEmpty()) {\\n                    stack.pollLast();\\n                } else {\\n                    builder.setCharAt(i, \'*\');\\n                }\\n            }\\n        }\\n\\n        while(!stack.isEmpty()) {\\n            builder.setCharAt(stack.pollLast(), \'*\');\\n        }\\n\\n        return builder.toString().replace(\\"*\\", \\"\\");\\n    }\\n}\\n\\n/*\\n* Alternate approach without using stack\\nclass Solution {\\n    public String minRemoveToMakeValid(String s) {\\n        StringBuilder sb = new StringBuilder(s);\\n        int open = 0;\\n        for(int i=0; i<s.length(); i++) {\\n            char c = s.charAt(i);\\n            if (c == \'(\') {\\n                open++;\\n            } else if (c == \')\') {\\n                if (open > 0) {\\n                    open--;\\n                } else {\\n                    sb.setCharAt(i, \'*\');\\n                }\\n            }\\n        }\\n\\n        int i = s.length() - 1;\\n        while(i >=0 && open > 0) {\\n            if (s.charAt(i) == \'(\') {\\n                sb.setCharAt(i, \'*\');\\n                open--;\\n            }\\n            i--;\\n        }\\n\\n        return sb.toString().replace(\\"*\\", \\"\\");\\n    }\\n}\\n*\\n* */","subPath":"","fileName":"solution.java"},"py":{"language":"py","code":"class Solution:\\n    def minRemoveToMakeValid(self, s: str) -> str:\\n        stack = []\\n        arr = list(s)\\n        print(arr)\\n        for i in range(len(s)):\\n            if s[i] == \'(\':\\n                stack.append(i)\\n            elif s[i] == \')\':\\n                if not stack:\\n                    arr[i] = \'*\'\\n                else:\\n                    stack.pop()\\n        while stack:\\n            arr[stack.pop()] = \'*\'\\n        return \'\'.join(arr).replace(\'*\', \'\')","subPath":"","fileName":"solution.py"}}')}}]);