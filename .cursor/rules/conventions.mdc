---
description: Cracking interview conventions
globs:
alwaysApply: true
---

# Cursor Rules â€“ Cracking Interview (Next.js 15, React 19, TS, MDX, Tailwind)

## Project context

- Next.js 15 App Router with static export (output: export), trailingSlash enabled, and production basePath/assetPrefix: "/cracking-interview".
- React 19 with TypeScript; Tailwind CSS 3 (with typography, animate, daisyui).
- Content lives in MDX under `src/content/**`; generated JSON lives in `src/generated/**` (via `scripts/generate-content.js`).
- Firebase client integration under `src/integrations/firebase/client.ts`.
- Use helper `src/lib/assetPath.ts` when linking to assets to respect basePath.

## Tooling commands

- Use pnpm for all commands.
- Dev: `pnpm dev`
- Build (local): `pnpm build` (runs `pnpm generate:content` first)
- Export/Deploy (static): `pnpm export` or `pnpm deploy` (also runs content generation)
- Lint/Format: `pnpm lint`, `pnpm format`, `pnpm format:check`

## Edit boundaries

- Prefer edits in: `src/app/**`, `src/components/**`, `src/lib/**`, `src/hooks/**`, `src/config/**`, `src/contexts/**`, `src/types/**`, `src/integrations/firebase/client.ts`, `tailwind.config.ts`, `postcss.config.*`, `eslint.config.mjs`, `next.config.mjs`.
- Avoid modifying without explicit instruction: `public/assets/**` (immutable references), `src/generated/**` (autogenerated), `out/**`, `.next/**`.
- Never hand-edit files in `src/generated/**`; update `scripts/generate-content.js` or the source content instead, then run generation.

## Next.js/React conventions

- Default to Server Components; mark components using state, effects, or browser APIs with `"use client"` at the file top.
- Do not import Node-only modules in Client Components.
- Use `assetPath("/path")` for any references to assets under `public/` so basePath/assetPrefix work in production static exports.
- Preserve `basePath`, `assetPrefix`, and `images.unoptimized` in `next.config.mjs` unless changing deployment strategy.
- Keep `pageExtensions` including `md`/`mdx`.

## MDX/content rules

- Do not change frontmatter schema used by generation. Supported keys include: `title`, `langs`, `difficulty`, `companies`, `tags`, `tc`, `sc`, `leetcode`, `gfg`, `leetid`.
- Place solutions under `src/content/<category>/code/<topicId>/**/solution.<ext>` only. The generator scans recursively and keys by subpath and extension.
- Keep problem ids (MDX filenames) stable; changing them breaks generated indexes and deep links.

## Coding style (TypeScript)

- Prefer explicit function signatures for exports; avoid `any`.
- Use early returns and shallow nesting; meaningful variable names; small, composable functions.
- Add concise docstrings for nontrivial functions; avoid inline comments.
- Handle errors meaningfully; avoid swallowing exceptions.

## Tailwind/UI

- Keep class order stable; Prettier with Tailwind plugin is configured.
- Prefer utility classes over ad-hoc CSS; reuse existing UI primitives in `src/components/ui/**`.

## Performance & DX

- Mind bundle size; rely on `experimental.optimizePackageImports` already configured.
- Avoid dynamic imports for tiny components; use when code-splitting is warranted.
- Do not introduce server-only APIs into client bundles.

## Testing/verification steps for significant changes

- Run: `pnpm lint && pnpm format:check`.
- Run: `pnpm generate:content && pnpm dev` to verify pages render and solution tabs load.
- For static correctness: `pnpm export` and open `out/index.html`. Verify asset links use basePath.

## PR/commit guidance for AI edits

- Keep edits scoped and atomic; include rationale in commit message.
- If altering content generation, update `scripts/generate-content.js` and re-run. Do not hand-edit generated JSON.
- If touching routes or assets, confirm `assetPath` usage and basePath-safe links.

## When unsure

- Prefer reading `src/lib/**` loaders (`contentLoader.ts`, `topicLoader.ts`, `simpleCodeLoader.ts`) before modifying data flows.
- Ask before changing content schemas or deployment strategy.
